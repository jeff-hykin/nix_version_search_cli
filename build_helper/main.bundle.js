var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/_utils/distance.ts
function distance(a, b) {
  if (a.length == 0) {
    return b.length;
  }
  if (b.length == 0) {
    return a.length;
  }
  const matrix = [];
  for (let i2 = 0; i2 <= b.length; i2++) {
    matrix[i2] = [i2];
  }
  for (let j = 0; j <= a.length; j++) {
    matrix[0][j] = j;
  }
  for (let i2 = 1; i2 <= b.length; i2++) {
    for (let j = 1; j <= a.length; j++) {
      if (b.charAt(i2 - 1) == a.charAt(j - 1)) {
        matrix[i2][j] = matrix[i2 - 1][j - 1];
      } else {
        matrix[i2][j] = Math.min(
          matrix[i2 - 1][j - 1] + 1,
          Math.min(matrix[i2][j - 1] + 1, matrix[i2 - 1][j] + 1)
        );
      }
    }
  }
  return matrix[b.length][a.length];
}

// https://deno.land/x/cliffy@v1.0.0-rc.3/flags/_utils.ts
function paramCaseToCamelCase(str2) {
  return str2.replace(
    /-([a-z])/g,
    (g) => g[1].toUpperCase()
  );
}
function underscoreToCamelCase(str2) {
  return str2.replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase().replace(
    /_([a-z])/g,
    (g) => g[1].toUpperCase()
  );
}
function getOption(flags, name) {
  while (name[0] === "-") {
    name = name.slice(1);
  }
  for (const flag of flags) {
    if (isOption(flag, name)) {
      return flag;
    }
  }
  return;
}
function didYouMeanOption(option, options) {
  const optionNames = options.map((option2) => [option2.name, ...option2.aliases ?? []]).flat().map((option2) => getFlag(option2));
  return didYouMean(" Did you mean option", getFlag(option), optionNames);
}
function didYouMeanType(type, types) {
  return didYouMean(" Did you mean type", type, types);
}
function didYouMean(message, type, types) {
  const match = closest(type, types);
  return match ? `${message} "${match}"?` : "";
}
function getFlag(name) {
  if (name.startsWith("-")) {
    return name;
  }
  if (name.length > 1) {
    return `--${name}`;
  }
  return `-${name}`;
}
function isOption(option, name) {
  return option.name === name || option.aliases && option.aliases.indexOf(name) !== -1;
}
function matchWildCardOptions(name, flags) {
  for (const option of flags) {
    if (option.name.indexOf("*") === -1) {
      continue;
    }
    let matched = matchWildCardOption(name, option);
    if (matched) {
      matched = { ...matched, name };
      flags.push(matched);
      return matched;
    }
  }
}
function matchWildCardOption(name, option) {
  const parts = option.name.split(".");
  const parts2 = name.split(".");
  if (parts.length !== parts2.length) {
    return false;
  }
  const count4 = Math.max(parts.length, parts2.length);
  for (let i2 = 0; i2 < count4; i2++) {
    if (parts[i2] !== parts2[i2] && parts[i2] !== "*") {
      return false;
    }
  }
  return option;
}
function closest(str2, arr) {
  let minDistance = Infinity;
  let minIndex = 0;
  for (let i2 = 0; i2 < arr.length; i2++) {
    const dist = distance(str2, arr[i2]);
    if (dist < minDistance) {
      minDistance = dist;
      minIndex = i2;
    }
  }
  return arr[minIndex];
}
function getDefaultValue(option) {
  return typeof option.default === "function" ? option.default() : option.default;
}

// https://deno.land/x/cliffy@v1.0.0-rc.3/flags/_errors.ts
var FlagsError = class _FlagsError extends Error {
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, _FlagsError.prototype);
  }
};
var UnknownRequiredOptionError = class _UnknownRequiredOptionError extends FlagsError {
  constructor(option, options) {
    super(
      `Unknown required option "${getFlag(option)}".${didYouMeanOption(option, options)}`
    );
    Object.setPrototypeOf(this, _UnknownRequiredOptionError.prototype);
  }
};
var UnknownConflictingOptionError = class _UnknownConflictingOptionError extends FlagsError {
  constructor(option, options) {
    super(
      `Unknown conflicting option "${getFlag(option)}".${didYouMeanOption(option, options)}`
    );
    Object.setPrototypeOf(this, _UnknownConflictingOptionError.prototype);
  }
};
var UnknownTypeError = class _UnknownTypeError extends FlagsError {
  constructor(type, types) {
    super(`Unknown type "${type}".${didYouMeanType(type, types)}`);
    Object.setPrototypeOf(this, _UnknownTypeError.prototype);
  }
};
var ValidationError = class _ValidationError extends FlagsError {
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, _ValidationError.prototype);
  }
};
var DuplicateOptionError = class _DuplicateOptionError extends ValidationError {
  constructor(name) {
    super(
      `Option "${getFlag(name).replace(/^--no-/, "--")}" can only occur once, but was found several times.`
    );
    Object.setPrototypeOf(this, _DuplicateOptionError.prototype);
  }
};
var InvalidOptionError = class _InvalidOptionError extends ValidationError {
  constructor(option, options) {
    super(
      `Invalid option "${getFlag(option)}".${didYouMeanOption(option, options)}`
    );
    Object.setPrototypeOf(this, _InvalidOptionError.prototype);
  }
};
var UnknownOptionError = class _UnknownOptionError extends ValidationError {
  constructor(option, options) {
    super(
      `Unknown option "${getFlag(option)}".${didYouMeanOption(option, options)}`
    );
    Object.setPrototypeOf(this, _UnknownOptionError.prototype);
  }
};
var MissingOptionValueError = class _MissingOptionValueError extends ValidationError {
  constructor(option) {
    super(`Missing value for option "${getFlag(option)}".`);
    Object.setPrototypeOf(this, _MissingOptionValueError.prototype);
  }
};
var InvalidOptionValueError = class _InvalidOptionValueError extends ValidationError {
  constructor(option, expected, value) {
    super(
      `Option "${getFlag(option)}" must be of type "${expected}", but got "${value}".`
    );
    Object.setPrototypeOf(this, _InvalidOptionValueError.prototype);
  }
};
var UnexpectedOptionValueError = class extends ValidationError {
  constructor(option, value) {
    super(
      `Option "${getFlag(option)}" doesn't take a value, but got "${value}".`
    );
    Object.setPrototypeOf(this, InvalidOptionValueError.prototype);
  }
};
var OptionNotCombinableError = class _OptionNotCombinableError extends ValidationError {
  constructor(option) {
    super(`Option "${getFlag(option)}" cannot be combined with other options.`);
    Object.setPrototypeOf(this, _OptionNotCombinableError.prototype);
  }
};
var ConflictingOptionError = class _ConflictingOptionError extends ValidationError {
  constructor(option, conflictingOption) {
    super(
      `Option "${getFlag(option)}" conflicts with option "${getFlag(conflictingOption)}".`
    );
    Object.setPrototypeOf(this, _ConflictingOptionError.prototype);
  }
};
var DependingOptionError = class _DependingOptionError extends ValidationError {
  constructor(option, dependingOption) {
    super(
      `Option "${getFlag(option)}" depends on option "${getFlag(dependingOption)}".`
    );
    Object.setPrototypeOf(this, _DependingOptionError.prototype);
  }
};
var MissingRequiredOptionError = class _MissingRequiredOptionError extends ValidationError {
  constructor(option) {
    super(`Missing required option "${getFlag(option)}".`);
    Object.setPrototypeOf(this, _MissingRequiredOptionError.prototype);
  }
};
var UnexpectedRequiredArgumentError = class _UnexpectedRequiredArgumentError extends ValidationError {
  constructor(arg) {
    super(
      `An required argument cannot follow an optional argument, but "${arg}"  is defined as required.`
    );
    Object.setPrototypeOf(
      this,
      _UnexpectedRequiredArgumentError.prototype
    );
  }
};
var UnexpectedArgumentAfterVariadicArgumentError = class _UnexpectedArgumentAfterVariadicArgumentError extends ValidationError {
  constructor(arg) {
    super(`An argument cannot follow an variadic argument, but got "${arg}".`);
    Object.setPrototypeOf(
      this,
      _UnexpectedArgumentAfterVariadicArgumentError.prototype
    );
  }
};
var InvalidTypeError = class extends ValidationError {
  constructor({ label, name, value, type }, expected) {
    super(
      `${label} "${name}" must be of type "${type}", but got "${value}".` + (expected ? ` Expected values: ${expected.map((value2) => `"${value2}"`).join(", ")}` : "")
    );
    Object.setPrototypeOf(this, MissingOptionValueError.prototype);
  }
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/flags/types/boolean.ts
var boolean = (type) => {
  if (~["1", "true"].indexOf(type.value)) {
    return true;
  }
  if (~["0", "false"].indexOf(type.value)) {
    return false;
  }
  throw new InvalidTypeError(type, ["true", "false", "1", "0"]);
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/flags/types/number.ts
var number = (type) => {
  const value = Number(type.value);
  if (Number.isFinite(value)) {
    return value;
  }
  throw new InvalidTypeError(type);
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/flags/types/string.ts
var string = ({ value }) => {
  return value;
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/flags/_validate_flags.ts
function validateFlags(ctx, opts, options = /* @__PURE__ */ new Map()) {
  if (!opts.flags) {
    return;
  }
  setDefaultValues(ctx, opts);
  const optionNames = Object.keys(ctx.flags);
  if (!optionNames.length && opts.allowEmpty) {
    return;
  }
  if (ctx.standalone) {
    validateStandaloneOption(
      ctx,
      options,
      optionNames
    );
    return;
  }
  for (const [name, option] of options) {
    validateUnknownOption(option, opts);
    validateConflictingOptions(ctx, option);
    validateDependingOptions(ctx, option);
    validateRequiredValues(ctx, option, name);
  }
  validateRequiredOptions(ctx, options, opts);
}
function validateUnknownOption(option, opts) {
  if (!getOption(opts.flags ?? [], option.name)) {
    throw new UnknownOptionError(option.name, opts.flags ?? []);
  }
}
function setDefaultValues(ctx, opts) {
  if (!opts.flags?.length) {
    return;
  }
  for (const option of opts.flags) {
    let name;
    let defaultValue = void 0;
    if (option.name.startsWith("no-")) {
      const propName = option.name.replace(/^no-/, "");
      if (typeof ctx.flags[propName] !== "undefined") {
        continue;
      }
      const positiveOption = getOption(opts.flags, propName);
      if (positiveOption) {
        continue;
      }
      name = paramCaseToCamelCase(propName);
      defaultValue = true;
    }
    if (!name) {
      name = paramCaseToCamelCase(option.name);
    }
    const hasDefaultValue = (!opts.ignoreDefaults || typeof opts.ignoreDefaults[name] === "undefined") && typeof ctx.flags[name] === "undefined" && (typeof option.default !== "undefined" || typeof defaultValue !== "undefined");
    if (hasDefaultValue) {
      ctx.flags[name] = getDefaultValue(option) ?? defaultValue;
      ctx.defaults[option.name] = true;
      if (typeof option.value === "function") {
        ctx.flags[name] = option.value(ctx.flags[name]);
      }
    }
  }
}
function validateStandaloneOption(ctx, options, optionNames) {
  if (!ctx.standalone || optionNames.length === 1) {
    return;
  }
  for (const [_, opt] of options) {
    if (!ctx.defaults[opt.name] && opt !== ctx.standalone) {
      throw new OptionNotCombinableError(ctx.standalone.name);
    }
  }
}
function validateConflictingOptions(ctx, option) {
  if (!option.conflicts?.length) {
    return;
  }
  for (const flag of option.conflicts) {
    if (isset(flag, ctx.flags)) {
      throw new ConflictingOptionError(option.name, flag);
    }
  }
}
function validateDependingOptions(ctx, option) {
  if (!option.depends) {
    return;
  }
  for (const flag of option.depends) {
    if (!isset(flag, ctx.flags) && !ctx.defaults[option.name]) {
      throw new DependingOptionError(option.name, flag);
    }
  }
}
function validateRequiredValues(ctx, option, name) {
  if (!option.args) {
    return;
  }
  const isArray = option.args.length > 1;
  for (let i2 = 0; i2 < option.args.length; i2++) {
    const arg = option.args[i2];
    if (arg.optional) {
      continue;
    }
    const hasValue = isArray ? typeof ctx.flags[name][i2] !== "undefined" : typeof ctx.flags[name] !== "undefined";
    if (!hasValue) {
      throw new MissingOptionValueError(option.name);
    }
  }
}
function validateRequiredOptions(ctx, options, opts) {
  if (!opts.flags?.length) {
    return;
  }
  const optionsValues = [...options.values()];
  for (const option of opts.flags) {
    if (!option.required || paramCaseToCamelCase(option.name) in ctx.flags) {
      continue;
    }
    const conflicts = option.conflicts ?? [];
    const hasConflict = conflicts.find((flag) => !!ctx.flags[flag]);
    const hasConflicts = hasConflict || optionsValues.find(
      (opt) => opt.conflicts?.find((flag) => flag === option.name)
    );
    if (hasConflicts) {
      continue;
    }
    throw new MissingRequiredOptionError(option.name);
  }
}
function isset(flagName, flags) {
  const name = paramCaseToCamelCase(flagName);
  return typeof flags[name] !== "undefined";
}

// https://deno.land/x/cliffy@v1.0.0-rc.3/flags/types/integer.ts
var integer = (type) => {
  const value = Number(type.value);
  if (Number.isInteger(value)) {
    return value;
  }
  throw new InvalidTypeError(type);
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/flags/flags.ts
var DefaultTypes = {
  string,
  number,
  integer,
  boolean
};
function parseFlags(argsOrCtx, opts = {}) {
  let args;
  let ctx;
  if (Array.isArray(argsOrCtx)) {
    ctx = {};
    args = argsOrCtx;
  } else {
    ctx = argsOrCtx;
    args = argsOrCtx.unknown;
    argsOrCtx.unknown = [];
  }
  args = args.slice();
  ctx.flags ??= {};
  ctx.literal ??= [];
  ctx.unknown ??= [];
  ctx.stopEarly = false;
  ctx.stopOnUnknown = false;
  ctx.defaults ??= {};
  opts.dotted ??= true;
  validateOptions(opts);
  const options = parseArgs(ctx, args, opts);
  validateFlags(ctx, opts, options);
  if (opts.dotted) {
    parseDottedOptions(ctx);
  }
  return ctx;
}
function validateOptions(opts) {
  opts.flags?.forEach((opt) => {
    opt.depends?.forEach((flag) => {
      if (!opts.flags || !getOption(opts.flags, flag)) {
        throw new UnknownRequiredOptionError(flag, opts.flags ?? []);
      }
    });
    opt.conflicts?.forEach((flag) => {
      if (!opts.flags || !getOption(opts.flags, flag)) {
        throw new UnknownConflictingOptionError(flag, opts.flags ?? []);
      }
    });
  });
}
function parseArgs(ctx, args, opts) {
  const optionsMap = /* @__PURE__ */ new Map();
  let inLiteral = false;
  for (let argsIndex = 0; argsIndex < args.length; argsIndex++) {
    let parseNext = function(option2) {
      if (negate) {
        setFlagValue(false);
        return;
      } else if (!option2.args?.length) {
        setFlagValue(void 0);
        return;
      }
      const arg = option2.args[optionArgsIndex];
      if (!arg) {
        const flag = next();
        throw new UnknownOptionError(flag, opts.flags ?? []);
      }
      if (!arg.type) {
        arg.type = "boolean" /* BOOLEAN */;
      }
      if (!option2.args?.length && arg.type === "boolean" /* BOOLEAN */ && arg.optional === void 0) {
        arg.optional = true;
      }
      if (arg.optional) {
        inOptionalArg = true;
      } else if (inOptionalArg) {
        throw new UnexpectedRequiredArgumentError(option2.name);
      }
      let result2;
      let increase = false;
      if (arg.list && hasNext(arg)) {
        const parsed = next().split(arg.separator || ",").map((nextValue) => {
          const value = parseValue(option2, arg, nextValue);
          if (typeof value === "undefined") {
            throw new InvalidOptionValueError(
              option2.name,
              arg.type ?? "?",
              nextValue
            );
          }
          return value;
        });
        if (parsed?.length) {
          result2 = parsed;
        }
      } else {
        if (hasNext(arg)) {
          result2 = parseValue(option2, arg, next());
        } else if (arg.optional && arg.type === "boolean" /* BOOLEAN */) {
          result2 = true;
        }
      }
      if (increase && typeof currentValue === "undefined") {
        argsIndex++;
        if (!arg.variadic) {
          optionArgsIndex++;
        } else if (option2.args[optionArgsIndex + 1]) {
          throw new UnexpectedArgumentAfterVariadicArgumentError(next());
        }
      }
      if (typeof result2 !== "undefined" && (option2.args.length > 1 || arg.variadic)) {
        if (!ctx.flags[propName]) {
          setFlagValue([]);
        }
        ctx.flags[propName].push(result2);
        if (hasNext(arg)) {
          parseNext(option2);
        }
      } else {
        setFlagValue(result2);
      }
      function hasNext(arg2) {
        if (!option2.args?.length) {
          return false;
        }
        const nextValue = currentValue ?? args[argsIndex + 1];
        if (!nextValue) {
          return false;
        }
        if (option2.args.length > 1 && optionArgsIndex >= option2.args.length) {
          return false;
        }
        if (!arg2.optional) {
          return true;
        }
        if (option2.equalsSign && arg2.optional && !arg2.variadic && typeof currentValue === "undefined") {
          return false;
        }
        if (arg2.optional || arg2.variadic) {
          return nextValue[0] !== "-" || typeof currentValue !== "undefined" || arg2.type === "number" /* NUMBER */ && !isNaN(Number(nextValue));
        }
        return false;
      }
      function parseValue(option3, arg2, value) {
        const result3 = opts.parse ? opts.parse({
          label: "Option",
          type: arg2.type || "string" /* STRING */,
          name: `--${option3.name}`,
          value
        }) : parseDefaultType(option3, arg2, value);
        if (typeof result3 !== "undefined") {
          increase = true;
        }
        return result3;
      }
    }, setFlagValue = function(value) {
      ctx.flags[propName] = value;
      if (ctx.defaults[propName]) {
        delete ctx.defaults[propName];
      }
    };
    let option;
    let current2 = args[argsIndex];
    let currentValue;
    let negate = false;
    if (inLiteral) {
      ctx.literal.push(current2);
      continue;
    } else if (current2 === "--") {
      inLiteral = true;
      continue;
    } else if (ctx.stopEarly || ctx.stopOnUnknown) {
      ctx.unknown.push(current2);
      continue;
    }
    const isFlag = current2.length > 1 && current2[0] === "-";
    if (!isFlag) {
      if (opts.stopEarly) {
        ctx.stopEarly = true;
      }
      ctx.unknown.push(current2);
      continue;
    }
    const isShort = current2[1] !== "-";
    const isLong = isShort ? false : current2.length > 3 && current2[2] !== "-";
    if (!isShort && !isLong) {
      throw new InvalidOptionError(current2, opts.flags ?? []);
    }
    if (isShort && current2.length > 2 && current2[2] !== ".") {
      args.splice(argsIndex, 1, ...splitFlags(current2));
      current2 = args[argsIndex];
    } else if (isLong && current2.startsWith("--no-")) {
      negate = true;
    }
    const equalSignIndex = current2.indexOf("=");
    if (equalSignIndex !== -1) {
      currentValue = current2.slice(equalSignIndex + 1) || void 0;
      current2 = current2.slice(0, equalSignIndex);
    }
    if (opts.flags) {
      option = getOption(opts.flags, current2);
      if (!option) {
        const name = current2.replace(/^-+/, "");
        option = matchWildCardOptions(name, opts.flags);
        if (!option) {
          if (opts.stopOnUnknown) {
            ctx.stopOnUnknown = true;
            ctx.unknown.push(args[argsIndex]);
            continue;
          }
          throw new UnknownOptionError(current2, opts.flags);
        }
      }
    } else {
      option = {
        name: current2.replace(/^-+/, ""),
        optionalValue: true,
        type: "string" /* STRING */
      };
    }
    if (option.standalone) {
      ctx.standalone = option;
    }
    const positiveName = negate ? option.name.replace(/^no-?/, "") : option.name;
    const propName = paramCaseToCamelCase(positiveName);
    if (typeof ctx.flags[propName] !== "undefined") {
      if (!opts.flags?.length) {
        option.collect = true;
      } else if (!option.collect && !ctx.defaults[option.name]) {
        throw new DuplicateOptionError(current2);
      }
    }
    if (option.type && !option.args?.length) {
      option.args = [{
        type: option.type,
        optional: option.optionalValue,
        variadic: option.variadic,
        list: option.list,
        separator: option.separator
      }];
    }
    if (opts.flags?.length && !option.args?.length && typeof currentValue !== "undefined") {
      throw new UnexpectedOptionValueError(option.name, currentValue);
    }
    let optionArgsIndex = 0;
    let inOptionalArg = false;
    const next = () => currentValue ?? args[argsIndex + 1];
    const previous = ctx.flags[propName];
    parseNext(option);
    if (typeof ctx.flags[propName] === "undefined") {
      if (option.args?.length && !option.args?.[optionArgsIndex].optional) {
        throw new MissingOptionValueError(option.name);
      } else if (typeof option.default !== "undefined" && (option.type || option.value || option.args?.length)) {
        ctx.flags[propName] = getDefaultValue(option);
      } else {
        setFlagValue(true);
      }
    }
    if (option.value) {
      const value = option.value(ctx.flags[propName], previous);
      setFlagValue(value);
    } else if (option.collect) {
      const value = typeof previous !== "undefined" ? Array.isArray(previous) ? previous : [previous] : [];
      value.push(ctx.flags[propName]);
      setFlagValue(value);
    }
    optionsMap.set(propName, option);
    opts.option?.(option, ctx.flags[propName]);
  }
  return optionsMap;
}
function parseDottedOptions(ctx) {
  ctx.flags = Object.keys(ctx.flags).reduce(
    (result2, key) => {
      if (~key.indexOf(".")) {
        key.split(".").reduce(
          (result3, subKey, index, parts) => {
            if (index === parts.length - 1) {
              result3[subKey] = ctx.flags[key];
            } else {
              result3[subKey] = result3[subKey] ?? {};
            }
            return result3[subKey];
          },
          result2
        );
      } else {
        result2[key] = ctx.flags[key];
      }
      return result2;
    },
    {}
  );
}
function splitFlags(flag) {
  flag = flag.slice(1);
  const normalized = [];
  const index = flag.indexOf("=");
  const flags = (index !== -1 ? flag.slice(0, index) : flag).split("");
  if (isNaN(Number(flag[flag.length - 1]))) {
    flags.forEach((val) => normalized.push(`-${val}`));
  } else {
    normalized.push(`-${flags.shift()}`);
    if (flags.length) {
      normalized.push(flags.join(""));
    }
  }
  if (index !== -1) {
    normalized[normalized.length - 1] += flag.slice(index);
  }
  return normalized;
}
function parseDefaultType(option, arg, value) {
  const type = arg.type || "string" /* STRING */;
  const parseType = DefaultTypes[type];
  if (!parseType) {
    throw new UnknownTypeError(type, Object.keys(DefaultTypes));
  }
  return parseType({
    label: "Option",
    type,
    name: `--${option.name}`,
    value
  });
}

// https://deno.land/x/cliffy@v1.0.0-rc.3/command/_utils.ts
function didYouMeanCommand(command2, commands, excludes = []) {
  const commandNames = commands.map((command3) => command3.getName()).filter((command3) => !excludes.includes(command3));
  return didYouMean(" Did you mean command", command2, commandNames);
}
var ARGUMENT_REGEX = /^[<\[].+[\]>]$/;
var ARGUMENT_DETAILS_REGEX = /[<\[:>\]]/;
function splitArguments(args) {
  const parts = args.trim().split(/[, =] */g);
  const typeParts = [];
  while (parts[parts.length - 1] && ARGUMENT_REGEX.test(parts[parts.length - 1])) {
    typeParts.unshift(parts.pop());
  }
  const typeDefinition = typeParts.join(" ");
  return { flags: parts, typeDefinition, equalsSign: args.includes("=") };
}
function parseArgumentsDefinition(argsDefinition, validate = true, all) {
  const argumentDetails = [];
  let hasOptional = false;
  let hasVariadic = false;
  const parts = argsDefinition.split(/ +/);
  for (const arg of parts) {
    if (validate && hasVariadic) {
      throw new UnexpectedArgumentAfterVariadicArgumentError(arg);
    }
    const parts2 = arg.split(ARGUMENT_DETAILS_REGEX);
    if (!parts2[1]) {
      if (all) {
        argumentDetails.push(parts2[0]);
      }
      continue;
    }
    const type = parts2[2] || "string" /* STRING */;
    const details = {
      optional: arg[0] === "[",
      name: parts2[1],
      action: parts2[3] || type,
      variadic: false,
      list: type ? arg.indexOf(type + "[]") !== -1 : false,
      type
    };
    if (validate && !details.optional && hasOptional) {
      throw new UnexpectedRequiredArgumentError(details.name);
    }
    if (arg[0] === "[") {
      hasOptional = true;
    }
    if (details.name.length > 3) {
      const istVariadicLeft = details.name.slice(0, 3) === "...";
      const istVariadicRight = details.name.slice(-3) === "...";
      hasVariadic = details.variadic = istVariadicLeft || istVariadicRight;
      if (istVariadicLeft) {
        details.name = details.name.slice(3);
      } else if (istVariadicRight) {
        details.name = details.name.slice(0, -3);
      }
    }
    argumentDetails.push(details);
  }
  return argumentDetails;
}
function dedent(str2) {
  const lines = str2.split(/\r?\n|\r/g);
  let text = "";
  let indent4 = 0;
  for (const line of lines) {
    if (text || line.trim()) {
      if (!text) {
        text = line.trimStart();
        indent4 = line.length - text.length;
      } else {
        text += line.slice(indent4);
      }
      text += "\n";
    }
  }
  return text.trimEnd();
}
function getDescription(description, short) {
  return short ? description.trim().split("\n", 1)[0].trim() : dedent(description);
}

// https://deno.land/std@0.196.0/fmt/colors.ts
var { Deno: Deno2 } = globalThis;
var noColor = typeof Deno2?.noColor === "boolean" ? Deno2.noColor : false;
var enabled = !noColor;
function setColorEnabled(value) {
  if (Deno2?.noColor) {
    return;
  }
  enabled = value;
}
function getColorEnabled() {
  return enabled;
}
function code(open, close) {
  return {
    open: `\x1B[${open.join(";")}m`,
    close: `\x1B[${close}m`,
    regexp: new RegExp(`\\x1b\\[${close}m`, "g")
  };
}
function run(str2, code2) {
  return enabled ? `${code2.open}${str2.replace(code2.regexp, code2.open)}${code2.close}` : str2;
}
function reset(str2) {
  return run(str2, code([0], 0));
}
function bold(str2) {
  return run(str2, code([1], 22));
}
function dim(str2) {
  return run(str2, code([2], 22));
}
function italic(str2) {
  return run(str2, code([3], 23));
}
function underline(str2) {
  return run(str2, code([4], 24));
}
function red(str2) {
  return run(str2, code([31], 39));
}
function green(str2) {
  return run(str2, code([32], 39));
}
function yellow(str2) {
  return run(str2, code([33], 39));
}
function cyan(str2) {
  return run(str2, code([36], 39));
}
function brightBlue(str2) {
  return run(str2, code([94], 39));
}
function brightMagenta(str2) {
  return run(str2, code([95], 39));
}
var ANSI_PATTERN = new RegExp(
  [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"
  ].join("|"),
  "g"
);
function stripColor(string2) {
  return string2.replace(ANSI_PATTERN, "");
}

// https://deno.land/x/cliffy@v1.0.0-rc.3/command/_errors.ts
var CommandError = class _CommandError extends Error {
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, _CommandError.prototype);
  }
};
var ValidationError2 = class _ValidationError extends CommandError {
  exitCode;
  cmd;
  constructor(message, { exitCode } = {}) {
    super(message);
    Object.setPrototypeOf(this, _ValidationError.prototype);
    this.exitCode = exitCode ?? 2;
  }
};
var DuplicateOptionNameError = class _DuplicateOptionNameError extends CommandError {
  constructor(optionName, commandName) {
    super(
      `An option with name '${bold(getFlag(optionName))}' is already registered on command '${bold(commandName)}'. If it is intended to override the option, set the '${bold("override")}' option of the '${bold("option")}' method to true.`
    );
    Object.setPrototypeOf(this, _DuplicateOptionNameError.prototype);
  }
};
var MissingCommandNameError = class _MissingCommandNameError extends CommandError {
  constructor() {
    super("Missing command name.");
    Object.setPrototypeOf(this, _MissingCommandNameError.prototype);
  }
};
var DuplicateCommandNameError = class _DuplicateCommandNameError extends CommandError {
  constructor(name) {
    super(`Duplicate command name "${name}".`);
    Object.setPrototypeOf(this, _DuplicateCommandNameError.prototype);
  }
};
var DuplicateCommandAliasError = class _DuplicateCommandAliasError extends CommandError {
  constructor(alias) {
    super(`Duplicate command alias "${alias}".`);
    Object.setPrototypeOf(this, _DuplicateCommandAliasError.prototype);
  }
};
var CommandNotFoundError = class _CommandNotFoundError extends CommandError {
  constructor(name, commands, excluded) {
    super(
      `Unknown command "${name}".${didYouMeanCommand(name, commands, excluded)}`
    );
    Object.setPrototypeOf(this, _CommandNotFoundError.prototype);
  }
};
var DuplicateTypeError = class _DuplicateTypeError extends CommandError {
  constructor(name) {
    super(`Type with name "${name}" already exists.`);
    Object.setPrototypeOf(this, _DuplicateTypeError.prototype);
  }
};
var DuplicateCompletionError = class _DuplicateCompletionError extends CommandError {
  constructor(name) {
    super(`Completion with name "${name}" already exists.`);
    Object.setPrototypeOf(this, _DuplicateCompletionError.prototype);
  }
};
var DuplicateExampleError = class _DuplicateExampleError extends CommandError {
  constructor(name) {
    super(`Example with name "${name}" already exists.`);
    Object.setPrototypeOf(this, _DuplicateExampleError.prototype);
  }
};
var DuplicateEnvVarError = class _DuplicateEnvVarError extends CommandError {
  constructor(name) {
    super(`Environment variable with name "${name}" already exists.`);
    Object.setPrototypeOf(this, _DuplicateEnvVarError.prototype);
  }
};
var MissingRequiredEnvVarError = class _MissingRequiredEnvVarError extends ValidationError2 {
  constructor(envVar) {
    super(`Missing required environment variable "${envVar.names[0]}".`);
    Object.setPrototypeOf(this, _MissingRequiredEnvVarError.prototype);
  }
};
var TooManyEnvVarValuesError = class _TooManyEnvVarValuesError extends CommandError {
  constructor(name) {
    super(
      `An environment variable can only have one value, but "${name}" has more than one.`
    );
    Object.setPrototypeOf(this, _TooManyEnvVarValuesError.prototype);
  }
};
var UnexpectedOptionalEnvVarValueError = class _UnexpectedOptionalEnvVarValueError extends CommandError {
  constructor(name) {
    super(
      `An environment variable cannot have an optional value, but "${name}" is defined as optional.`
    );
    Object.setPrototypeOf(this, _UnexpectedOptionalEnvVarValueError.prototype);
  }
};
var UnexpectedVariadicEnvVarValueError = class _UnexpectedVariadicEnvVarValueError extends CommandError {
  constructor(name) {
    super(
      `An environment variable cannot have an variadic value, but "${name}" is defined as variadic.`
    );
    Object.setPrototypeOf(this, _UnexpectedVariadicEnvVarValueError.prototype);
  }
};
var DefaultCommandNotFoundError = class _DefaultCommandNotFoundError extends CommandError {
  constructor(name, commands) {
    super(
      `Default command "${name}" not found.${didYouMeanCommand(name, commands)}`
    );
    Object.setPrototypeOf(this, _DefaultCommandNotFoundError.prototype);
  }
};
var CommandExecutableNotFoundError = class _CommandExecutableNotFoundError extends CommandError {
  constructor(name) {
    super(
      `Command executable not found: ${name}`
    );
    Object.setPrototypeOf(this, _CommandExecutableNotFoundError.prototype);
  }
};
var UnknownCommandError = class _UnknownCommandError extends ValidationError2 {
  constructor(name, commands, excluded) {
    super(
      `Unknown command "${name}".${didYouMeanCommand(name, commands, excluded)}`
    );
    Object.setPrototypeOf(this, _UnknownCommandError.prototype);
  }
};
var NoArgumentsAllowedError = class _NoArgumentsAllowedError extends ValidationError2 {
  constructor(name) {
    super(`No arguments allowed for command "${name}".`);
    Object.setPrototypeOf(this, _NoArgumentsAllowedError.prototype);
  }
};
var MissingArgumentsError = class _MissingArgumentsError extends ValidationError2 {
  constructor(names) {
    super(`Missing argument(s): ${names.join(", ")}`);
    Object.setPrototypeOf(this, _MissingArgumentsError.prototype);
  }
};
var MissingArgumentError = class _MissingArgumentError extends ValidationError2 {
  constructor(name) {
    super(`Missing argument: ${name}`);
    Object.setPrototypeOf(this, _MissingArgumentError.prototype);
  }
};
var TooManyArgumentsError = class _TooManyArgumentsError extends ValidationError2 {
  constructor(args) {
    super(`Too many arguments: ${args.join(" ")}`);
    Object.setPrototypeOf(this, _TooManyArgumentsError.prototype);
  }
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/command/type.ts
var Type = class {
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/command/types/boolean.ts
var BooleanType = class extends Type {
  /** Parse boolean type. */
  parse(type) {
    return boolean(type);
  }
  /** Complete boolean type. */
  complete() {
    return ["true", "false"];
  }
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/command/types/string.ts
var StringType = class extends Type {
  /** Complete string type. */
  parse(type) {
    return string(type);
  }
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/command/types/file.ts
var FileType = class extends StringType {
  constructor() {
    super();
  }
  // getOptions(): FileTypeOptions {
  //   return this.opts;
  // }
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/command/types/integer.ts
var IntegerType = class extends Type {
  /** Parse integer type. */
  parse(type) {
    return integer(type);
  }
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/command/types/number.ts
var NumberType = class extends Type {
  /** Parse number type. */
  parse(type) {
    return number(type);
  }
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/table/border.ts
var border = {
  top: "\u2500",
  topMid: "\u252C",
  topLeft: "\u250C",
  topRight: "\u2510",
  bottom: "\u2500",
  bottomMid: "\u2534",
  bottomLeft: "\u2514",
  bottomRight: "\u2518",
  left: "\u2502",
  leftMid: "\u251C",
  mid: "\u2500",
  midMid: "\u253C",
  right: "\u2502",
  rightMid: "\u2524",
  middle: "\u2502"
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/table/cell.ts
var Cell = class _Cell {
  /**
   * Cell constructor.
   *
   * @param value Cell value.
   */
  constructor(value) {
    this.value = value;
  }
  options = {};
  /** Get cell length. */
  get length() {
    return this.toString().length;
  }
  /**
   * Create a new cell. If value is a cell, the value and all options of the cell
   * will be copied to the new cell.
   *
   * @param value Cell or cell value.
   */
  static from(value) {
    let cell;
    if (value instanceof _Cell) {
      cell = new this(value.getValue());
      cell.options = { ...value.options };
    } else {
      cell = new this(value);
    }
    return cell;
  }
  /** Get cell string value. */
  toString() {
    return this.value.toString();
  }
  /** Get cell value. */
  getValue() {
    return this.value;
  }
  /**
   * Set cell value.
   *
   * @param value Cell or cell value.
   */
  setValue(value) {
    this.value = value;
    return this;
  }
  /**
   * Clone cell with all options.
   *
   * @param value Cell or cell value.
   */
  clone(value) {
    return _Cell.from(value ?? this);
  }
  /**
   * Setter:
   */
  /**
   * Enable/disable cell border.
   *
   * @param enable    Enable/disable cell border.
   * @param override  Override existing value.
   */
  border(enable = true, override = true) {
    if (override || typeof this.options.border === "undefined") {
      this.options.border = enable;
    }
    return this;
  }
  /**
   * Set col span.
   *
   * ```ts
   * import { Cell, Table } from "./mod.ts";
   *
   * new Table()
   *   .body([
   *     [
   *       new Cell("Row 1 & 2 Column 1").rowSpan(2),
   *       "Row 1 Column 2",
   *       "Row 1 Column 3",
   *     ],
   *     [new Cell("Row 2 Column 2 & 3").colSpan(2)],
   *   ])
   *   .border()
   *   .render();
   * ```
   *
   * @param span      Number of cols to span.
   * @param override  Override existing value.
   */
  colSpan(span, override = true) {
    if (override || typeof this.options.colSpan === "undefined") {
      this.options.colSpan = span;
    }
    return this;
  }
  /**
   * Set row span.
   *
   * ```ts
   * import { Cell, Table } from "./mod.ts";
   *
   * new Table()
   *   .body([
   *     [
   *       new Cell("Row 1 & 2 Column 1").rowSpan(2),
   *       "Row 1 Column 2",
   *       "Row 1 Column 3",
   *     ],
   *     [new Cell("Row 2 Column 2 & 3").colSpan(2)],
   *   ])
   *   .border()
   *   .render();
   * ```
   *
   * @param span      Number of rows to span.
   * @param override  Override existing value.
   */
  rowSpan(span, override = true) {
    if (override || typeof this.options.rowSpan === "undefined") {
      this.options.rowSpan = span;
    }
    return this;
  }
  /**
   * Align cell content.
   *
   * @param direction Align direction.
   * @param override  Override existing value.
   */
  align(direction, override = true) {
    if (override || typeof this.options.align === "undefined") {
      this.options.align = direction;
    }
    return this;
  }
  /**
   * Getter:
   */
  /** Check if cell has border. */
  getBorder() {
    return this.options.border === true;
  }
  /** Get col span. */
  getColSpan() {
    return typeof this.options.colSpan === "number" && this.options.colSpan > 0 ? this.options.colSpan : 1;
  }
  /** Get row span. */
  getRowSpan() {
    return typeof this.options.rowSpan === "number" && this.options.rowSpan > 0 ? this.options.rowSpan : 1;
  }
  /** Get row span. */
  getAlign() {
    return this.options.align ?? "left";
  }
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/table/column.ts
var Column = class _Column {
  /**
   * Create a new cell from column options or an existing column.
   * @param options
   */
  static from(options) {
    const opts = options instanceof _Column ? options.opts : options;
    return new _Column().options(opts);
  }
  opts = {};
  /** Set column options. */
  options(options) {
    Object.assign(this.opts, options);
    return this;
  }
  /** Set min column width. */
  minWidth(width) {
    this.opts.minWidth = width;
    return this;
  }
  /** Set max column width. */
  maxWidth(width) {
    this.opts.maxWidth = width;
    return this;
  }
  /** Set column border. */
  border(border2 = true) {
    this.opts.border = border2;
    return this;
  }
  /** Set column padding. */
  padding(padding) {
    this.opts.padding = padding;
    return this;
  }
  /** Set column alignment. */
  align(direction) {
    this.opts.align = direction;
    return this;
  }
  /** Get min column width. */
  getMinWidth() {
    return this.opts.minWidth;
  }
  /** Get max column width. */
  getMaxWidth() {
    return this.opts.maxWidth;
  }
  /** Get column border. */
  getBorder() {
    return this.opts.border;
  }
  /** Get column padding. */
  getPadding() {
    return this.opts.padding;
  }
  /** Get column alignment. */
  getAlign() {
    return this.opts.align;
  }
};

// https://deno.land/std@0.196.0/console/_data.json
var data_default = {
  UNICODE_VERSION: "15.0.0",
  tables: [
    {
      d: "AAECAwQFBgcICQoLDA0OAw8DDwkQCRESERIA",
      r: "AQEBAgEBAQEBAQEBAQEBBwEHAVABBwcBBwF4"
    },
    {
      d: "AAECAwQFBgcGCAYJCgsMDQ4PEAYREhMUBhUWFxgZGhscHR4fICEiIyIkJSYnKCkqJSssLS4vMDEyMzQ1Njc4OToGOzwKBj0GPj9AQUIGQwZEBkVGR0hJSktMTQZOBgoGT1BRUlNUVVZXWFkGWgZbBlxdXl1fYGFiY2RlZmdoBmlqBmsGAQZsBm1uO29wcXI7czt0dXZ3OwY7eHkGent8Bn0Gfn+AgYKDhIWGBoc7iAZdO4kGiosGAXGMBo0GjgaPBpAGkQaSBpMGlJUGlpcGmJmam5ydnp+gLgahLKIGo6SlpganqKmqqwasBq0Grq8GsLGyswa0BrUGtre4Brm6uwZHvAa9vga/wME7wjvDxAbFO8bHO8gGyQbKywbMzQbOBs/Q0QbSBr8GvgbT1AbUBtUG1gbXBtjZ2tsG3N0G3t/g4eLjO+Tl5ufoO+k76gbrBuztOwbu7/AGO+XxCgYKCwZd8g==",
      r: "AQEBAQEBAQEBAQEBAQEBAQEBAQMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECBQEOAQEBAQEBAQEBAwEBAQEBAQEBAQIBAwEIAQEBAQEBAQEBAQEBAQIBAQEBAQEBAQEBAQEBAQEBDQEBBQEBAQEBAgEBAwEBAQEBAQEBAQEBbQHaAQEFAQEBBAECAQEBAQEBAQEBAwGuASFkCAELAQEBAQEBAQEHAQMBAQEaAQIBCAEFAQEBAQEBAQEBAQEBAQEBAQEBAQECAQEBAQIBAQEBAQEBAwEDAQEBAQEBAQUBAQEBAQEBBAEBAVIBAdkBARABAQFfARMBAYoBBAEBBQEmAUkBAQcBAQIBHgEBARUBAQEBAQUBAQcBDwEBARoBAgEBAQEBAQECAQEBAQEBAQEBAQEBAQEBAQMBBAEBAgEBAQEUfwEBAQIDAXj/AQ=="
    },
    {
      d: "AFUVAF3Xd3X/93//VXVVV9VX9V91f1/31X93XVXdVdVV9dVV/VVX1X9X/131VfXVVXV3V1VdVV1V1/1dV1X/3VUAVf3/3/9fVf3/3/9fVV1V/11VFQBQVQEAEEEQVQBQVQBAVFUVAFVUVQUAEAAUBFBVFVFVAEBVBQBUVRUAVVFVBRAAAVBVAVVQVQBVBQBAVUVUAQBUUQEAVQVVUVVUAVRVUVUFVUVBVVRBFRRQUVVQUVUBEFRRVQVVBQBRVRQBVFVRVUFVBVVFVVRVUVVUVQRUBQRQVUFVBVVFVVBVBVVQVRVUAVRVUVUFVVFVRVUFRFVRAEBVFQBAVVEAVFUAQFVQVRFRVQEAQAAEVQEAAQBUVUVVAQQAQVVQBVRVAVRVRUFVUVVRVaoAVQFVBVRVBVUFVQVVEABQVUUBAFVRVRUAVUFVUVVAFVRVRVUBVRUUVUUAQEQBAFQVABRVAEBVAFUEQFRFVRUAVVBVBVAQUFVFUBFQVQAFVUAABABUUVVUUFUVANd/X3//BUD3XdV1VQAEAFVXVdX9V1VXVQBUVdVdVdV1VX111VXVV9V//1X/X1VdVf9fVV9VdVdV1VX31dfVXXX9193/d1X/VV9VV3VVX//1VfVVXVVdVdVVdVWlVWlVqVaWVf/f/1X/Vf/1X1Xf/19V9VVf9df1X1X1X1XVVWlVfV31VVpVd1V3VapV33/fVZVVlVX1WVWlVelV+v/v//7/31Xv/6/77/tVWaVVVlVdVWaVmlX1/1WpVVZVlVWVVlVW+V9VFVBVAKqaqlWqWlWqVaoKoKpqqapqgapVqaqpqmqqVapqqv+qVqpqVRVAAFBVBVVQVUUVVUFVVFVQVQBQVRVVBQBQVRUAUFWqVkBVFQVQVVFVAUBBVRVVVFVUVQQUVAVRVVBVRVVRVFFVqlVFVQCqWlUAqmqqaqpVqlZVqmpVAV1VUVVUVQVAVQFBVQBVQBVVQVUAVRVUVQFVBQBUVQVQVVFVAEBVFFRVFVBVFUBBUUVVUVVAVRUAAQBUVRVVUFUFAEBVARRVFVAEVUVVFQBAVVRVBQBUAFRVAAVEVUVVFQBEFQRVBVBVEFRVUFUVAEARVFUVUQAQVQEFEABVFQBBVRVEFVUABVVUVQEAQFUVABRAVRVVAUABVQUAQFBVAEAAEFUFAAUABEFVAUBFEAAQVVARVRVUVVBVBUBVRFVUFQBQVQBUVQBAVRVVFUBVqlRVWlWqVapaVapWVaqpqmmqalVlVWpZVapVqlVBAFUAUABAVRVQVRUAQAEAVQVQVQVUVQBAFQBUVVFVVFUVAAEAVQBAABQAEARAVUVVAFUAQFUAQFVWVZVV/39V/1//X1X/76uq6v9XVWpVqlWqVlVaVapaVapWVamqmqqmqlWqapWqVapWqmqmqpaqWlWVaqpVZVVpVVZVlapVqlpVVmqpVapVlVZVqlZVqlVWVapqqpqqVapWqlZVqpqqWlWlqlWqVlWqVlVRVQD/Xw==",
      r: "CBcBCAEBAQEBAQEBAQECAQEBAQEBAQEBAQEBAQMBAQECAQEBAQEBAQEBAQEBBAEBGAEDAQwBAwEIAQEBAQEBAQgcCAEDAQEBAQEDAQEBDQEDEAELAQEBEQEKAQEBDgEBAgIBAQoBBQQBCAEBAQEBAQEHAQEHBgEWAQIBDQECAgEFAQECAgEKAQ0BAQIKAQ0BDQEBAQEBAQEBAgEHAQ4BAQEBAQQBBgEBDgEBAQEBAQcBAQIBAQEBBAEFAQEBDgEBAQEBAQECAQcBDwECAQwCDQEBAQEBAQECAQgBAQEEAQcBDQEBAQEBAQQBBwERAQEBARYBAQECAQEBGAECAQIBARIBBgEBDQECAQEBAQECAQgBAQEZAQEBAgYBAQEDAQECAQEBAQMBCBgIBwEMAQEGAQcBBwEQAQEBAQEBAgIBCgEBDQEIAQ0BAQEBAQEBBgEBDgEBAQEBAQEBAgEMBwEMAQwBAQEBCQECAwEHAQEBAQ0BAQEBDgIBBgEDAQEBAQEBAQMBAQEBAgEBAQEBAQEBCAEBAgEBAQEBAQkBCAgBAwECAQEBAgEBAQkBAQEBAwECAQMBAQIBBwEFAQEDAQYBAQEBAgEBAQEBAQEBAQECAgEDAQECBAIDAgIBBQEEAQEBAwEPAQEBCyIBCAEJAwQBAQIBAQEBAgECAQEBAQMBAQEBAwEBAQEBAQEBAQgBAQMDAgEBAwEEAQIBAQEBBAEBAQEBAQECAQEBAQEBAQEBAQEHAQQBAwEBAQcBAgUBBgECAQYBAQwBAQEUAQELCAYBFgMFAQYDAQoBAQMBARQBAQkBAQoBBgEVAwsBCgIPAQ0BGQEBAgEHARQBAwIBBgEBAQUBBgQBAgEJAQEBBQECAQMHAQELAQECCQEQAQECAgECAQsBDAEBAQEBCgEBAQsBAQEECQ4BCAQCAQEECAEEAQEFCAEPAQEEAQEPAQgBFAEBAQEBAQEKAQEJAQ8BEAEBEwEBAQIBCwEBDgENAwEKAQEBAQELAQEBAQECAQwBCAEBAQEBDgEDAQwBAQECAQEXAQEBAQEHAgEBBQEIAQEBAQEQAgEBBQEUAQEBAQEbAQEBAQEGARQBAQEBARkBAQEBCQEBAQEQAQIBDwEBARQBAQEBBwEBAQkBAQEBAQECAQEBCwECAQEVAQEBAQQBBQEBAQEOAQEBAQEBEgEBFgEBAgEMAQEBAQ8BAQMBFgEBDgEBBQEPAQETAQECAQMOAgUBCgIBGQEBAQEIAQMBBwEBAwECEwgBAQcLAQUBFwEBAQEDAQEBBwEBBAEBDg0BAQwBAQEDAQQBAQEDBAEBBAEBAQEBEAEPAQgBAQsBAQ4BEQEMAgEBBwEOAQEHAQEBAQQBBAEDCwECAQEBAwEBBggBAgEBAREBBQMKAQEBAwQCEQEBHgEPAQIBAQYEAQYBAwEUAQUMAQEBAQEBAQECAQEBAgEIAwEBBgsBAgEODAMBAgEBCwEBAQEBAwECAQECAQEBBwgPAQ=="
    }
  ]
};

// https://deno.land/std@0.196.0/assert/assertion_error.ts
var AssertionError = class extends Error {
  name = "AssertionError";
  constructor(message) {
    super(message);
  }
};

// https://deno.land/std@0.196.0/assert/assert.ts
function assert(expr, msg = "") {
  if (!expr) {
    throw new AssertionError(msg);
  }
}

// https://deno.land/std@0.196.0/console/_rle.ts
function runLengthDecode({ d, r }) {
  const data = atob(d);
  const runLengths = atob(r);
  let out = "";
  for (const [i2, ch] of [...runLengths].entries()) {
    out += data[i2].repeat(ch.codePointAt(0));
  }
  return Uint8Array.from([...out].map((x) => x.codePointAt(0)));
}

// https://deno.land/std@0.196.0/console/unicode_width.ts
var tables = null;
function lookupWidth(cp) {
  if (!tables)
    tables = data_default.tables.map(runLengthDecode);
  const t1Offset = tables[0][cp >> 13 & 255];
  const t2Offset = tables[1][128 * t1Offset + (cp >> 6 & 127)];
  const packedWidths = tables[2][16 * t2Offset + (cp >> 2 & 15)];
  const width = packedWidths >> 2 * (cp & 3) & 3;
  return width === 3 ? 1 : width;
}
var cache = /* @__PURE__ */ new Map();
function charWidth(ch) {
  if (cache.has(ch))
    return cache.get(ch);
  const cp = ch.codePointAt(0);
  let v = null;
  if (cp < 127) {
    v = cp >= 32 ? 1 : cp === 0 ? 0 : null;
  } else if (cp >= 160) {
    v = lookupWidth(cp);
  } else {
    v = null;
  }
  cache.set(ch, v);
  return v;
}
function unicodeWidth(str2) {
  return [...str2].map((ch) => charWidth(ch) ?? 0).reduce((a, b) => a + b, 0);
}

// https://deno.land/x/cliffy@v1.0.0-rc.3/table/_utils.ts
function longest(index, rows, maxWidth) {
  const cellLengths = rows.map((row) => {
    const cell = row[index];
    const cellValue = cell instanceof Cell && cell.getColSpan() > 1 ? "" : cell?.toString() || "";
    return cellValue.split("\n").map((line) => {
      const str2 = typeof maxWidth === "undefined" ? line : consumeWords(maxWidth, line);
      return strLength(str2) || 0;
    });
  }).flat();
  return Math.max(...cellLengths);
}
var strLength = (str2) => {
  return unicodeWidth(stripColor(str2));
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/table/consume_words.ts
function consumeWords(length, content) {
  let consumed = "";
  const words = content.split("\n")[0]?.split(/ /g);
  for (let i2 = 0; i2 < words.length; i2++) {
    const word = words[i2];
    if (consumed) {
      const nextLength = strLength(word);
      const consumedLength = strLength(consumed);
      if (consumedLength + nextLength >= length) {
        break;
      }
    }
    consumed += (i2 > 0 ? " " : "") + word;
  }
  return consumed;
}

// https://deno.land/x/cliffy@v1.0.0-rc.3/table/row.ts
var Row = class _Row extends Array {
  options = {};
  /**
   * Create a new row. If cells is a row, all cells and options of the row will
   * be copied to the new row.
   *
   * @param cells Cells or row.
   */
  static from(cells) {
    const row = new this(...cells);
    if (cells instanceof _Row) {
      row.options = { ...cells.options };
    }
    return row;
  }
  /** Clone row recursively with all options. */
  clone() {
    const row = new _Row(
      ...this.map((cell) => cell instanceof Cell ? cell.clone() : cell)
    );
    row.options = { ...this.options };
    return row;
  }
  /**
   * Setter:
   */
  /**
   * Enable/disable cell border.
   *
   * @param enable    Enable/disable cell border.
   * @param override  Override existing value.
   */
  border(enable = true, override = true) {
    if (override || typeof this.options.border === "undefined") {
      this.options.border = enable;
    }
    return this;
  }
  /**
   * Align row content.
   *
   * @param direction Align direction.
   * @param override  Override existing value.
   */
  align(direction, override = true) {
    if (override || typeof this.options.align === "undefined") {
      this.options.align = direction;
    }
    return this;
  }
  /**
   * Getter:
   */
  /** Check if row has border. */
  getBorder() {
    return this.options.border === true;
  }
  /** Check if row or any child cell has border. */
  hasBorder() {
    return this.getBorder() || this.some((cell) => cell instanceof Cell && cell.getBorder());
  }
  /** Get row alignment. */
  getAlign() {
    return this.options.align ?? "left";
  }
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/table/_layout.ts
var TableLayout = class {
  /**
   * Table layout constructor.
   * @param table   Table instance.
   * @param options Render options.
   */
  constructor(table, options) {
    this.table = table;
    this.options = options;
  }
  /** Generate table string. */
  toString() {
    const opts = this.createLayout();
    return opts.rows.length ? this.renderRows(opts) : "";
  }
  /**
   * Generates table layout including row and col span, converts all none
   * Cell/Row values to Cells and Rows and returns the layout rendering
   * settings.
   */
  createLayout() {
    Object.keys(this.options.chars).forEach((key) => {
      if (typeof this.options.chars[key] !== "string") {
        this.options.chars[key] = "";
      }
    });
    const hasBodyBorder = this.table.getBorder() || this.table.hasBodyBorder();
    const hasHeaderBorder = this.table.hasHeaderBorder();
    const hasBorder = hasHeaderBorder || hasBodyBorder;
    const rows = this.#getRows();
    const columns = Math.max(...rows.map((row) => row.length));
    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
      const row = rows[rowIndex];
      const length = row.length;
      if (length < columns) {
        const diff2 = columns - length;
        for (let i2 = 0; i2 < diff2; i2++) {
          row.push(this.createCell(null, row, rowIndex, length + i2));
        }
      }
    }
    const padding = [];
    const width = [];
    for (let colIndex = 0; colIndex < columns; colIndex++) {
      const column = this.options.columns.at(colIndex);
      const minColWidth = column?.getMinWidth() ?? (Array.isArray(this.options.minColWidth) ? this.options.minColWidth[colIndex] : this.options.minColWidth);
      const maxColWidth = column?.getMaxWidth() ?? (Array.isArray(this.options.maxColWidth) ? this.options.maxColWidth[colIndex] : this.options.maxColWidth);
      const colWidth = longest(colIndex, rows, maxColWidth);
      width[colIndex] = Math.min(maxColWidth, Math.max(minColWidth, colWidth));
      padding[colIndex] = column?.getPadding() ?? (Array.isArray(this.options.padding) ? this.options.padding[colIndex] : this.options.padding);
    }
    return {
      padding,
      width,
      rows,
      columns,
      hasBorder,
      hasBodyBorder,
      hasHeaderBorder
    };
  }
  #getRows() {
    const header = this.table.getHeader();
    const rows = header ? [header, ...this.table] : this.table.slice();
    const hasSpan = rows.some(
      (row) => row.some(
        (cell) => cell instanceof Cell && (cell.getColSpan() > 1 || cell.getRowSpan() > 1)
      )
    );
    if (hasSpan) {
      return this.spanRows(rows);
    }
    return rows.map((row, rowIndex) => {
      const newRow = this.createRow(row);
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        newRow[colIndex] = this.createCell(
          row[colIndex],
          newRow,
          rowIndex,
          colIndex
        );
      }
      return newRow;
    });
  }
  /**
   * Fills rows and cols by specified row/col span with a reference of the
   * original cell.
   */
  spanRows(rows) {
    const rowSpan = [];
    let colSpan = 1;
    let rowIndex = -1;
    while (true) {
      rowIndex++;
      if (rowIndex === rows.length && rowSpan.every((span) => span === 1)) {
        break;
      }
      const row = rows[rowIndex] = this.createRow(rows[rowIndex] || []);
      let colIndex = -1;
      while (true) {
        colIndex++;
        if (colIndex === row.length && colIndex === rowSpan.length && colSpan === 1) {
          break;
        }
        if (colSpan > 1) {
          colSpan--;
          rowSpan[colIndex] = rowSpan[colIndex - 1];
          row.splice(
            colIndex,
            this.getDeleteCount(rows, rowIndex, colIndex),
            row[colIndex - 1]
          );
          continue;
        }
        if (rowSpan[colIndex] > 1) {
          rowSpan[colIndex]--;
          rows[rowIndex].splice(
            colIndex,
            this.getDeleteCount(rows, rowIndex, colIndex),
            rows[rowIndex - 1][colIndex]
          );
          continue;
        }
        const cell = row[colIndex] = this.createCell(
          row[colIndex] || null,
          row,
          rowIndex,
          colIndex
        );
        colSpan = cell.getColSpan();
        rowSpan[colIndex] = cell.getRowSpan();
      }
    }
    return rows;
  }
  getDeleteCount(rows, rowIndex, colIndex) {
    return colIndex <= rows[rowIndex].length - 1 && typeof rows[rowIndex][colIndex] === "undefined" ? 1 : 0;
  }
  /**
   * Create a new row from existing row or cell array.
   * @param row Original row.
   */
  createRow(row) {
    return Row.from(row).border(this.table.getBorder(), false).align(this.table.getAlign(), false);
  }
  /**
   * Create a new cell from existing cell or cell value.
   *
   * @param cell      Original cell.
   * @param row       Parent row.
   * @param rowIndex  The row index of the cell.
   * @param colIndex  The column index of the cell.
   */
  createCell(cell, row, rowIndex, colIndex) {
    const column = this.options.columns.at(colIndex);
    const isHeaderRow = this.isHeaderRow(rowIndex);
    return Cell.from(cell ?? "").border(
      (isHeaderRow ? null : column?.getBorder()) ?? row.getBorder(),
      false
    ).align(
      (isHeaderRow ? null : column?.getAlign()) ?? row.getAlign(),
      false
    );
  }
  isHeaderRow(rowIndex) {
    return rowIndex === 0 && this.table.getHeader() !== void 0;
  }
  /**
   * Render table layout.
   * @param opts Render options.
   */
  renderRows(opts) {
    let result2 = "";
    const rowSpan = new Array(opts.columns).fill(1);
    for (let rowIndex = 0; rowIndex < opts.rows.length; rowIndex++) {
      result2 += this.renderRow(rowSpan, rowIndex, opts);
    }
    return result2.slice(0, -1);
  }
  /**
   * Render row.
   * @param rowSpan     Current row span.
   * @param rowIndex    Current row index.
   * @param opts        Render options.
   * @param isMultiline Is multiline row.
   */
  renderRow(rowSpan, rowIndex, opts, isMultiline) {
    const row = opts.rows[rowIndex];
    const prevRow = opts.rows[rowIndex - 1];
    const nextRow = opts.rows[rowIndex + 1];
    let result2 = "";
    let colSpan = 1;
    if (!isMultiline && rowIndex === 0 && row.hasBorder()) {
      result2 += this.renderBorderRow(void 0, row, rowSpan, opts);
    }
    let isMultilineRow = false;
    result2 += " ".repeat(this.options.indent || 0);
    for (let colIndex = 0; colIndex < opts.columns; colIndex++) {
      if (colSpan > 1) {
        colSpan--;
        rowSpan[colIndex] = rowSpan[colIndex - 1];
        continue;
      }
      result2 += this.renderCell(colIndex, row, opts);
      if (rowSpan[colIndex] > 1) {
        if (!isMultiline) {
          rowSpan[colIndex]--;
        }
      } else if (!prevRow || prevRow[colIndex] !== row[colIndex]) {
        rowSpan[colIndex] = row[colIndex].getRowSpan();
      }
      colSpan = row[colIndex].getColSpan();
      if (rowSpan[colIndex] === 1 && row[colIndex].length) {
        isMultilineRow = true;
      }
    }
    if (opts.columns > 0) {
      if (row[opts.columns - 1].getBorder()) {
        result2 += this.options.chars.right;
      } else if (opts.hasBorder) {
        result2 += " ";
      }
    }
    result2 += "\n";
    if (isMultilineRow) {
      return result2 + this.renderRow(rowSpan, rowIndex, opts, isMultilineRow);
    }
    if (opts.rows.length > 1 && (rowIndex === 0 && opts.hasHeaderBorder || rowIndex < opts.rows.length - 1 && opts.hasBodyBorder)) {
      result2 += this.renderBorderRow(row, nextRow, rowSpan, opts);
    }
    if (rowIndex === opts.rows.length - 1 && row.hasBorder()) {
      result2 += this.renderBorderRow(row, void 0, rowSpan, opts);
    }
    return result2;
  }
  /**
   * Render cell.
   * @param colIndex  Current col index.
   * @param row       Current row.
   * @param opts      Render options.
   * @param noBorder  Disable border.
   */
  renderCell(colIndex, row, opts, noBorder) {
    let result2 = "";
    const prevCell = row[colIndex - 1];
    const cell = row[colIndex];
    if (!noBorder) {
      if (colIndex === 0) {
        if (cell.getBorder()) {
          result2 += this.options.chars.left;
        } else if (opts.hasBorder) {
          result2 += " ";
        }
      } else {
        if (cell.getBorder() || prevCell?.getBorder()) {
          result2 += this.options.chars.middle;
        } else if (opts.hasBorder) {
          result2 += " ";
        }
      }
    }
    let maxLength2 = opts.width[colIndex];
    const colSpan = cell.getColSpan();
    if (colSpan > 1) {
      for (let o = 1; o < colSpan; o++) {
        maxLength2 += opts.width[colIndex + o] + opts.padding[colIndex + o];
        if (opts.hasBorder) {
          maxLength2 += opts.padding[colIndex + o] + 1;
        }
      }
    }
    const { current: current2, next } = this.renderCellValue(cell, maxLength2);
    row[colIndex].setValue(next.getValue());
    if (opts.hasBorder) {
      result2 += " ".repeat(opts.padding[colIndex]);
    }
    result2 += current2;
    if (opts.hasBorder || colIndex < opts.columns - 1) {
      result2 += " ".repeat(opts.padding[colIndex]);
    }
    return result2;
  }
  /**
   * Render specified length of cell. Returns the rendered value and a new cell
   * with the rest value.
   * @param cell      Cell to render.
   * @param maxLength Max length of content to render.
   */
  renderCellValue(cell, maxLength2) {
    const length = Math.min(
      maxLength2,
      strLength(cell.toString())
    );
    let words = consumeWords(length, cell.toString());
    const breakWord = strLength(words) > length;
    if (breakWord) {
      words = words.slice(0, length);
    }
    const next = cell.toString().slice(words.length + (breakWord ? 0 : 1));
    const fillLength = maxLength2 - strLength(words);
    const align = cell.getAlign();
    let current2;
    if (fillLength === 0) {
      current2 = words;
    } else if (align === "left") {
      current2 = words + " ".repeat(fillLength);
    } else if (align === "center") {
      current2 = " ".repeat(Math.floor(fillLength / 2)) + words + " ".repeat(Math.ceil(fillLength / 2));
    } else if (align === "right") {
      current2 = " ".repeat(fillLength) + words;
    } else {
      throw new Error("Unknown direction: " + align);
    }
    return {
      current: current2,
      next: cell.clone(next)
    };
  }
  /**
   * Render border row.
   * @param prevRow Previous row.
   * @param nextRow Next row.
   * @param rowSpan Current row span.
   * @param opts    Render options.
   */
  renderBorderRow(prevRow, nextRow, rowSpan, opts) {
    let result2 = "";
    let colSpan = 1;
    for (let colIndex = 0; colIndex < opts.columns; colIndex++) {
      if (rowSpan[colIndex] > 1) {
        if (!nextRow) {
          throw new Error("invalid layout");
        }
        if (colSpan > 1) {
          colSpan--;
          continue;
        }
      }
      result2 += this.renderBorderCell(
        colIndex,
        prevRow,
        nextRow,
        rowSpan,
        opts
      );
      colSpan = nextRow?.[colIndex].getColSpan() ?? 1;
    }
    return result2.length ? " ".repeat(this.options.indent) + result2 + "\n" : "";
  }
  /**
   * Render border cell.
   * @param colIndex  Current index.
   * @param prevRow   Previous row.
   * @param nextRow   Next row.
   * @param rowSpan   Current row span.
   * @param opts      Render options.
   */
  renderBorderCell(colIndex, prevRow, nextRow, rowSpan, opts) {
    const a1 = prevRow?.[colIndex - 1];
    const a2 = nextRow?.[colIndex - 1];
    const b1 = prevRow?.[colIndex];
    const b2 = nextRow?.[colIndex];
    const a1Border = !!a1?.getBorder();
    const a2Border = !!a2?.getBorder();
    const b1Border = !!b1?.getBorder();
    const b2Border = !!b2?.getBorder();
    const hasColSpan = (cell) => (cell?.getColSpan() ?? 1) > 1;
    const hasRowSpan = (cell) => (cell?.getRowSpan() ?? 1) > 1;
    let result2 = "";
    if (colIndex === 0) {
      if (rowSpan[colIndex] > 1) {
        if (b1Border) {
          result2 += this.options.chars.left;
        } else {
          result2 += " ";
        }
      } else if (b1Border && b2Border) {
        result2 += this.options.chars.leftMid;
      } else if (b1Border) {
        result2 += this.options.chars.bottomLeft;
      } else if (b2Border) {
        result2 += this.options.chars.topLeft;
      } else {
        result2 += " ";
      }
    } else if (colIndex < opts.columns) {
      if (a1Border && b2Border || b1Border && a2Border) {
        const a1ColSpan = hasColSpan(a1);
        const a2ColSpan = hasColSpan(a2);
        const b1ColSpan = hasColSpan(b1);
        const b2ColSpan = hasColSpan(b2);
        const a1RowSpan = hasRowSpan(a1);
        const a2RowSpan = hasRowSpan(a2);
        const b1RowSpan = hasRowSpan(b1);
        const b2RowSpan = hasRowSpan(b2);
        const hasAllBorder = a1Border && b2Border && b1Border && a2Border;
        const hasAllRowSpan = a1RowSpan && b1RowSpan && a2RowSpan && b2RowSpan;
        const hasAllColSpan = a1ColSpan && b1ColSpan && a2ColSpan && b2ColSpan;
        if (hasAllRowSpan && hasAllBorder) {
          result2 += this.options.chars.middle;
        } else if (hasAllColSpan && hasAllBorder && a1 === b1 && a2 === b2) {
          result2 += this.options.chars.mid;
        } else if (a1ColSpan && b1ColSpan && a1 === b1) {
          result2 += this.options.chars.topMid;
        } else if (a2ColSpan && b2ColSpan && a2 === b2) {
          result2 += this.options.chars.bottomMid;
        } else if (a1RowSpan && a2RowSpan && a1 === a2) {
          result2 += this.options.chars.leftMid;
        } else if (b1RowSpan && b2RowSpan && b1 === b2) {
          result2 += this.options.chars.rightMid;
        } else {
          result2 += this.options.chars.midMid;
        }
      } else if (a1Border && b1Border) {
        if (hasColSpan(a1) && hasColSpan(b1) && a1 === b1) {
          result2 += this.options.chars.bottom;
        } else {
          result2 += this.options.chars.bottomMid;
        }
      } else if (b1Border && b2Border) {
        if (rowSpan[colIndex] > 1) {
          result2 += this.options.chars.left;
        } else {
          result2 += this.options.chars.leftMid;
        }
      } else if (b2Border && a2Border) {
        if (hasColSpan(a2) && hasColSpan(b2) && a2 === b2) {
          result2 += this.options.chars.top;
        } else {
          result2 += this.options.chars.topMid;
        }
      } else if (a1Border && a2Border) {
        if (hasRowSpan(a1) && a1 === a2) {
          result2 += this.options.chars.right;
        } else {
          result2 += this.options.chars.rightMid;
        }
      } else if (a1Border) {
        result2 += this.options.chars.bottomRight;
      } else if (b1Border) {
        result2 += this.options.chars.bottomLeft;
      } else if (a2Border) {
        result2 += this.options.chars.topRight;
      } else if (b2Border) {
        result2 += this.options.chars.topLeft;
      } else {
        result2 += " ";
      }
    }
    const length = opts.padding[colIndex] + opts.width[colIndex] + opts.padding[colIndex];
    if (rowSpan[colIndex] > 1 && nextRow) {
      result2 += this.renderCell(
        colIndex,
        nextRow,
        opts,
        true
      );
      if (nextRow[colIndex] === nextRow[nextRow.length - 1]) {
        if (b1Border) {
          result2 += this.options.chars.right;
        } else {
          result2 += " ";
        }
        return result2;
      }
    } else if (b1Border && b2Border) {
      result2 += this.options.chars.mid.repeat(length);
    } else if (b1Border) {
      result2 += this.options.chars.bottom.repeat(length);
    } else if (b2Border) {
      result2 += this.options.chars.top.repeat(length);
    } else {
      result2 += " ".repeat(length);
    }
    if (colIndex === opts.columns - 1) {
      if (b1Border && b2Border) {
        result2 += this.options.chars.rightMid;
      } else if (b1Border) {
        result2 += this.options.chars.bottomRight;
      } else if (b2Border) {
        result2 += this.options.chars.topRight;
      } else {
        result2 += " ";
      }
    }
    return result2;
  }
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/table/table.ts
var Table = class _Table extends Array {
  static _chars = { ...border };
  options = {
    indent: 0,
    border: false,
    maxColWidth: Infinity,
    minColWidth: 0,
    padding: 1,
    chars: { ..._Table._chars },
    columns: []
  };
  headerRow;
  /**
   * Create a new table. If rows is a table, all rows and options of the table
   * will be copied to the new table.
   *
   * @param rows An array of rows or a table instance.
   */
  static from(rows) {
    const table = new this(...rows);
    if (rows instanceof _Table) {
      table.options = { ...rows.options };
      table.headerRow = rows.headerRow ? Row.from(rows.headerRow) : void 0;
    }
    return table;
  }
  /**
   * Create a new table from an array of json objects. An object represents a
   * row and each property a column.
   *
   * @param rows Array of objects.
   */
  static fromJson(rows) {
    return new this().fromJson(rows);
  }
  /**
   * Set global default border characters.
   *
   * @param chars Border options.
   */
  static chars(chars) {
    Object.assign(this._chars, chars);
    return this;
  }
  /**
   * Write table or rows to stdout.
   *
   * @param rows Table or rows.
   */
  static render(rows) {
    _Table.from(rows).render();
  }
  /**
   * Read data from an array of json objects. An object represents a
   * row and each property a column.
   *
   * @param rows Array of objects.
   */
  fromJson(rows) {
    this.header(Object.keys(rows[0]));
    this.body(rows.map((row) => Object.values(row)));
    return this;
  }
  /**
   * Set column options.
   *
   * @param columns An array of columns or column options.
   */
  columns(columns) {
    this.options.columns = columns.map(
      (column) => column instanceof Column ? column : Column.from(column)
    );
    return this;
  }
  /**
   * Set column options by index.
   *
   @param index   The column index.
   @param column  Column or column options.
   */
  column(index, column) {
    if (column instanceof Column) {
      this.options.columns[index] = column;
    } else if (this.options.columns[index]) {
      this.options.columns[index].options(column);
    } else {
      this.options.columns[index] = Column.from(column);
    }
    return this;
  }
  /**
   * Set table header.
   *
   * @param header Header row or cells.
   */
  header(header) {
    this.headerRow = header instanceof Row ? header : Row.from(header);
    return this;
  }
  /**
   * Set table body.
   *
   * @param rows Array of rows.
   */
  body(rows) {
    this.length = 0;
    this.push(...rows);
    return this;
  }
  /** Clone table recursively with header and options. */
  clone() {
    const table = new _Table(
      ...this.map(
        (row) => row instanceof Row ? row.clone() : Row.from(row).clone()
      )
    );
    table.options = { ...this.options };
    table.headerRow = this.headerRow?.clone();
    return table;
  }
  /** Generate table string. */
  toString() {
    return new TableLayout(this, this.options).toString();
  }
  /** Write table to stdout. */
  render() {
    console.log(this.toString());
    return this;
  }
  /**
   * Set max column width.
   *
   * @param width     Max column width.
   * @param override  Override existing value.
   */
  maxColWidth(width, override = true) {
    if (override || typeof this.options.maxColWidth === "undefined") {
      this.options.maxColWidth = width;
    }
    return this;
  }
  /**
   * Set min column width.
   *
   * @param width     Min column width.
   * @param override  Override existing value.
   */
  minColWidth(width, override = true) {
    if (override || typeof this.options.minColWidth === "undefined") {
      this.options.minColWidth = width;
    }
    return this;
  }
  /**
   * Set table indentation.
   *
   * @param width     Indent width.
   * @param override  Override existing value.
   */
  indent(width, override = true) {
    if (override || typeof this.options.indent === "undefined") {
      this.options.indent = width;
    }
    return this;
  }
  /**
   * Set cell padding.
   *
   * @param padding   Cell padding.
   * @param override  Override existing value.
   */
  padding(padding, override = true) {
    if (override || typeof this.options.padding === "undefined") {
      this.options.padding = padding;
    }
    return this;
  }
  /**
   * Enable/disable cell border.
   *
   * @param enable    Enable/disable cell border.
   * @param override  Override existing value.
   */
  border(enable = true, override = true) {
    if (override || typeof this.options.border === "undefined") {
      this.options.border = enable;
    }
    return this;
  }
  /**
   * Align table content.
   *
   * @param direction Align direction.
   * @param override  Override existing value.
   */
  align(direction, override = true) {
    if (override || typeof this.options.align === "undefined") {
      this.options.align = direction;
    }
    return this;
  }
  /**
   * Set border characters.
   *
   * @param chars Border options.
   */
  chars(chars) {
    Object.assign(this.options.chars, chars);
    return this;
  }
  /** Get table header. */
  getHeader() {
    return this.headerRow;
  }
  /** Get table body. */
  getBody() {
    return [...this];
  }
  /** Get max column width. */
  getMaxColWidth() {
    return this.options.maxColWidth;
  }
  /** Get min column width. */
  getMinColWidth() {
    return this.options.minColWidth;
  }
  /** Get table indentation. */
  getIndent() {
    return this.options.indent;
  }
  /** Get cell padding. */
  getPadding() {
    return this.options.padding;
  }
  /** Check if table has border. */
  getBorder() {
    return this.options.border === true;
  }
  /** Check if header row has border. */
  hasHeaderBorder() {
    const hasBorder = this.headerRow?.hasBorder();
    return hasBorder === true || this.getBorder() && hasBorder !== false;
  }
  /** Check if table bordy has border. */
  hasBodyBorder() {
    return this.getBorder() || this.options.columns.some((column) => column.getBorder()) || this.some(
      (row) => row instanceof Row ? row.hasBorder() : row.some((cell) => cell instanceof Cell ? cell.getBorder() : false)
    );
  }
  /** Check if table header or body has border. */
  hasBorder() {
    return this.hasHeaderBorder() || this.hasBodyBorder();
  }
  /** Get table alignment. */
  getAlign() {
    return this.options.align ?? "left";
  }
  /** Get columns. */
  getColumns() {
    return this.options.columns;
  }
  /** Get column by column index. */
  getColumn(index) {
    return this.options.columns[index] ??= new Column();
  }
};

// https://deno.land/x/cliffy@v1.0.0-rc.3/command/help/_help_generator.ts
var HelpGenerator = class _HelpGenerator {
  constructor(cmd, options = {}) {
    this.cmd = cmd;
    this.options = {
      types: false,
      hints: true,
      colors: true,
      long: false,
      ...options
    };
  }
  indent = 2;
  options;
  /** Generate help text for given command. */
  static generate(cmd, options) {
    return new _HelpGenerator(cmd, options).generate();
  }
  generate() {
    const areColorsEnabled = getColorEnabled();
    setColorEnabled(this.options.colors);
    const result2 = this.generateHeader() + this.generateMeta() + this.generateDescription() + this.generateOptions() + this.generateCommands() + this.generateEnvironmentVariables() + this.generateExamples();
    setColorEnabled(areColorsEnabled);
    return result2;
  }
  generateHeader() {
    const usage = this.cmd.getUsage();
    const rows = [
      [
        bold("Usage:"),
        brightMagenta(
          this.cmd.getPath() + (usage ? " " + highlightArguments(usage, this.options.types) : "")
        )
      ]
    ];
    const version = this.cmd.getVersion();
    if (version) {
      rows.push([bold("Version:"), yellow(`${this.cmd.getVersion()}`)]);
    }
    return "\n" + Table.from(rows).padding(1).toString() + "\n";
  }
  generateMeta() {
    const meta = Object.entries(this.cmd.getMeta());
    if (!meta.length) {
      return "";
    }
    const rows = [];
    for (const [name, value] of meta) {
      rows.push([bold(`${name}: `) + value]);
    }
    return "\n" + Table.from(rows).padding(1).toString() + "\n";
  }
  generateDescription() {
    if (!this.cmd.getDescription()) {
      return "";
    }
    return this.label("Description") + Table.from([
      [dedent(this.cmd.getDescription())]
    ]).indent(this.indent).maxColWidth(140).padding(1).toString() + "\n";
  }
  generateOptions() {
    const options = this.cmd.getOptions(false);
    if (!options.length) {
      return "";
    }
    let groups = [];
    const hasGroups = options.some((option) => option.groupName);
    if (hasGroups) {
      for (const option of options) {
        let group = groups.find((group2) => group2.name === option.groupName);
        if (!group) {
          group = {
            name: option.groupName,
            options: []
          };
          groups.push(group);
        }
        group.options.push(option);
      }
    } else {
      groups = [{
        name: "Options",
        options
      }];
    }
    let result2 = "";
    for (const group of groups) {
      result2 += this.generateOptionGroup(group);
    }
    return result2;
  }
  generateOptionGroup(group) {
    if (!group.options.length) {
      return "";
    }
    const hasTypeDefinitions = !!group.options.find(
      (option) => !!option.typeDefinition
    );
    if (hasTypeDefinitions) {
      return this.label(group.name ?? "Options") + Table.from([
        ...group.options.map((option) => [
          option.flags.map((flag) => brightBlue(flag)).join(", "),
          highlightArguments(
            option.typeDefinition || "",
            this.options.types
          ),
          red(bold("-")),
          getDescription(option.description, !this.options.long),
          this.generateHints(option)
        ])
      ]).padding([2, 2, 1, 2]).indent(this.indent).maxColWidth([60, 60, 1, 80, 60]).toString() + "\n";
    }
    return this.label(group.name ?? "Options") + Table.from([
      ...group.options.map((option) => [
        option.flags.map((flag) => brightBlue(flag)).join(", "),
        red(bold("-")),
        getDescription(option.description, !this.options.long),
        this.generateHints(option)
      ])
    ]).indent(this.indent).maxColWidth([60, 1, 80, 60]).padding([2, 1, 2]).toString() + "\n";
  }
  generateCommands() {
    const commands = this.cmd.getCommands(false);
    if (!commands.length) {
      return "";
    }
    const hasTypeDefinitions = !!commands.find(
      (command2) => !!command2.getArgsDefinition()
    );
    if (hasTypeDefinitions) {
      return this.label("Commands") + Table.from([
        ...commands.map((command2) => [
          [command2.getName(), ...command2.getAliases()].map(
            (name) => brightBlue(name)
          ).join(", "),
          highlightArguments(
            command2.getArgsDefinition() || "",
            this.options.types
          ),
          red(bold("-")),
          command2.getShortDescription()
        ])
      ]).indent(this.indent).maxColWidth([60, 60, 1, 80]).padding([2, 2, 1, 2]).toString() + "\n";
    }
    return this.label("Commands") + Table.from([
      ...commands.map((command2) => [
        [command2.getName(), ...command2.getAliases()].map(
          (name) => brightBlue(name)
        ).join(", "),
        red(bold("-")),
        command2.getShortDescription()
      ])
    ]).maxColWidth([60, 1, 80]).padding([2, 1, 2]).indent(this.indent).toString() + "\n";
  }
  generateEnvironmentVariables() {
    const envVars = this.cmd.getEnvVars(false);
    if (!envVars.length) {
      return "";
    }
    return this.label("Environment variables") + Table.from([
      ...envVars.map((envVar) => [
        envVar.names.map((name) => brightBlue(name)).join(", "),
        highlightArgumentDetails(
          envVar.details,
          this.options.types
        ),
        red(bold("-")),
        this.options.long ? dedent(envVar.description) : envVar.description.trim().split("\n", 1)[0],
        envVar.required ? `(${yellow(`required`)})` : ""
      ])
    ]).padding([2, 2, 1, 2]).indent(this.indent).maxColWidth([60, 60, 1, 80, 10]).toString() + "\n";
  }
  generateExamples() {
    const examples = this.cmd.getExamples();
    if (!examples.length) {
      return "";
    }
    return this.label("Examples") + Table.from(examples.map((example) => [
      dim(bold(`${capitalize(example.name)}:`)),
      dedent(example.description)
    ])).padding(1).indent(this.indent).maxColWidth(150).toString() + "\n";
  }
  generateHints(option) {
    if (!this.options.hints) {
      return "";
    }
    const hints = [];
    option.required && hints.push(yellow(`required`));
    if (typeof option.default !== "undefined") {
      const defaultValue = getDefaultValue(option);
      if (typeof defaultValue !== "undefined") {
        hints.push(
          bold(`Default: `) + inspect(defaultValue, this.options.colors)
        );
      }
    }
    option.depends?.length && hints.push(
      yellow(bold(`Depends: `)) + italic(option.depends.map(getFlag).join(", "))
    );
    option.conflicts?.length && hints.push(
      red(bold(`Conflicts: `)) + italic(option.conflicts.map(getFlag).join(", "))
    );
    const type = this.cmd.getType(option.args[0]?.type)?.handler;
    if (type instanceof Type) {
      const possibleValues = type.values?.(this.cmd, this.cmd.getParent());
      if (possibleValues?.length) {
        hints.push(
          bold(`Values: `) + possibleValues.map(
            (value) => inspect(value, this.options.colors)
          ).join(", ")
        );
      }
    }
    if (hints.length) {
      return `(${hints.join(", ")})`;
    }
    return "";
  }
  label(label) {
    return "\n" + bold(`${label}:`) + "\n\n";
  }
};
function capitalize(string2) {
  return string2?.charAt(0).toUpperCase() + string2.slice(1);
}
function inspect(value, colors) {
  return Deno.inspect(
    value,
    // deno < 1.4.3 doesn't support the colors property.
    { depth: 1, colors, trailingComma: false }
  );
}
function highlightArguments(argsDefinition, types = true) {
  if (!argsDefinition) {
    return "";
  }
  return parseArgumentsDefinition(argsDefinition, false, true).map(
    (arg) => typeof arg === "string" ? arg : highlightArgumentDetails(arg, types)
  ).join(" ");
}
function highlightArgumentDetails(arg, types = true) {
  let str2 = "";
  str2 += yellow(arg.optional ? "[" : "<");
  let name = "";
  name += arg.name;
  if (arg.variadic) {
    name += "...";
  }
  name = brightMagenta(name);
  str2 += name;
  if (types) {
    str2 += yellow(":");
    str2 += red(arg.type);
    if (arg.list) {
      str2 += green("[]");
    }
  }
  str2 += yellow(arg.optional ? "]" : ">");
  return str2;
}

// https://deno.land/x/cliffy@v1.0.0-rc.3/command/upgrade/_check_version.ts
async function checkVersion(cmd) {
  const mainCommand = cmd.getMainCommand();
  const upgradeCommand = mainCommand.getCommand("upgrade");
  if (!isUpgradeCommand(upgradeCommand)) {
    return;
  }
  const latestVersion = await upgradeCommand.getLatestVersion();
  const currentVersion = mainCommand.getVersion();
  if (currentVersion === latestVersion) {
    return;
  }
  const versionHelpText = `(New version available: ${latestVersion}. Run '${mainCommand.getName()} upgrade' to upgrade to the latest version!)`;
  mainCommand.version(`${currentVersion}  ${bold(yellow(versionHelpText))}`);
}
function isUpgradeCommand(command2) {
  return command2 instanceof Command && "getLatestVersion" in command2;
}

// https://deno.land/x/cliffy@v1.0.0-rc.3/command/command.ts
var Command = class _Command {
  types = /* @__PURE__ */ new Map();
  rawArgs = [];
  literalArgs = [];
  _name = "COMMAND";
  _parent;
  _globalParent;
  ver;
  desc = "";
  _usage;
  actionHandler;
  globalActionHandler;
  options = [];
  commands = /* @__PURE__ */ new Map();
  examples = [];
  envVars = [];
  aliases = [];
  completions = /* @__PURE__ */ new Map();
  cmd = this;
  argsDefinition;
  isExecutable = false;
  throwOnError = false;
  _allowEmpty = false;
  _stopEarly = false;
  defaultCommand;
  _useRawArgs = false;
  args = [];
  isHidden = false;
  isGlobal = false;
  hasDefaults = false;
  _versionOptions;
  _helpOptions;
  _versionOption;
  _helpOption;
  _help;
  _shouldExit;
  _meta = {};
  _groupName = null;
  _noGlobals = false;
  errorHandler;
  versionOption(flags, desc, opts) {
    this._versionOptions = flags === false ? flags : {
      flags,
      desc,
      opts: typeof opts === "function" ? { action: opts } : opts
    };
    return this;
  }
  helpOption(flags, desc, opts) {
    this._helpOptions = flags === false ? flags : {
      flags,
      desc,
      opts: typeof opts === "function" ? { action: opts } : opts
    };
    return this;
  }
  /**
   * Add new sub-command.
   * @param nameAndArguments  Command definition. E.g: `my-command <input-file:string> <output-file:string>`
   * @param cmdOrDescription  The description of the new child command.
   * @param override          Override existing child command.
   */
  command(nameAndArguments, cmdOrDescription, override) {
    this.reset();
    const result2 = splitArguments(nameAndArguments);
    const name = result2.flags.shift();
    const aliases = result2.flags;
    if (!name) {
      throw new MissingCommandNameError();
    }
    if (this.getBaseCommand(name, true)) {
      if (!override) {
        throw new DuplicateCommandNameError(name);
      }
      this.removeCommand(name);
    }
    let description;
    let cmd;
    if (typeof cmdOrDescription === "string") {
      description = cmdOrDescription;
    }
    if (cmdOrDescription instanceof _Command) {
      cmd = cmdOrDescription.reset();
    } else {
      cmd = new _Command();
    }
    cmd._name = name;
    cmd._parent = this;
    if (description) {
      cmd.description(description);
    }
    if (result2.typeDefinition) {
      cmd.arguments(result2.typeDefinition);
    }
    aliases.forEach((alias) => cmd.alias(alias));
    this.commands.set(name, cmd);
    this.select(name);
    return this;
  }
  /**
   * Add new command alias.
   *
   * @param alias Tha name of the alias.
   */
  alias(alias) {
    if (this.cmd._name === alias || this.cmd.aliases.includes(alias)) {
      throw new DuplicateCommandAliasError(alias);
    }
    this.cmd.aliases.push(alias);
    return this;
  }
  /** Reset internal command reference to main command. */
  reset() {
    this._groupName = null;
    this.cmd = this;
    return this;
  }
  /**
   * Set internal command pointer to child command with given name.
   * @param name The name of the command to select.
   */
  select(name) {
    const cmd = this.getBaseCommand(name, true);
    if (!cmd) {
      throw new CommandNotFoundError(name, this.getBaseCommands(true));
    }
    this.cmd = cmd;
    return this;
  }
  /*****************************************************************************
   **** SUB HANDLER ************************************************************
   *****************************************************************************/
  /** Set command name. Used in auto generated help and shell completions */
  name(name) {
    this.cmd._name = name;
    return this;
  }
  /**
   * Set command version.
   *
   * @param version Semantic version string string or method that returns the version string.
   */
  version(version) {
    if (typeof version === "string") {
      this.cmd.ver = () => version;
    } else if (typeof version === "function") {
      this.cmd.ver = version;
    }
    return this;
  }
  /**
   * Add meta data. Will be displayed in the auto generated help and in the
   * output of the long version.
   *
   * @param name  The name/label of the metadata.
   * @param value The value of the metadata.
   */
  meta(name, value) {
    this.cmd._meta[name] = value;
    return this;
  }
  getMeta(name) {
    return typeof name === "undefined" ? this._meta : this._meta[name];
  }
  /**
   * Set command help.
   *
   * @param help Help string, method, or config for generator that returns the help string.
   */
  help(help) {
    if (typeof help === "string") {
      this.cmd._help = () => help;
    } else if (typeof help === "function") {
      this.cmd._help = help;
    } else {
      this.cmd._help = (cmd, options) => HelpGenerator.generate(cmd, { ...help, ...options });
    }
    return this;
  }
  /**
   * Set the long command description.
   *
   * @param description The command description.
   */
  description(description) {
    this.cmd.desc = description;
    return this;
  }
  /**
   * Set the command usage. Defaults to arguments.
   *
   * @param usage The command usage.
   */
  usage(usage) {
    this.cmd._usage = usage;
    return this;
  }
  /** Hide command from help, completions, etc. */
  hidden() {
    this.cmd.isHidden = true;
    return this;
  }
  /** Make command globally available. */
  global() {
    this.cmd.isGlobal = true;
    return this;
  }
  /** Make command executable. */
  executable() {
    this.cmd.isExecutable = true;
    return this;
  }
  /**
   * Set command arguments:
   *
   *   <requiredArg:string> [optionalArg: number] [...restArgs:string]
   */
  arguments(args) {
    this.cmd.argsDefinition = args;
    return this;
  }
  /**
   * Set command callback method.
   *
   * @param fn Command action handler.
   */
  action(fn) {
    this.cmd.actionHandler = fn;
    return this;
  }
  /**
   * Set command callback method.
   *
   * @param fn Command action handler.
   */
  globalAction(fn) {
    this.cmd.globalActionHandler = fn;
    return this;
  }
  /**
   * Don't throw an error if the command was called without arguments.
   *
   * @param allowEmpty Enable/disable allow empty.
   */
  allowEmpty(allowEmpty) {
    this.cmd._allowEmpty = allowEmpty !== false;
    return this;
  }
  /**
   * Enable stop early. If enabled, all arguments starting from the first non
   * option argument will be passed as arguments with type string to the command
   * action handler.
   *
   * For example:
   *     `command --debug-level warning server --port 80`
   *
   * Will result in:
   *     - options: `{ debugLevel: 'warning' }`
   *     - args: `['server', '--port', '80']`
   *
   * @param stopEarly Enable/disable stop early.
   */
  stopEarly(stopEarly = true) {
    this.cmd._stopEarly = stopEarly;
    return this;
  }
  /**
   * Disable parsing arguments. If enabled the raw arguments will be passed to
   * the action handler. This has no effect for parent or child commands. Only
   * for the command on which this method was called.
   *
   * @param useRawArgs Enable/disable raw arguments.
   */
  useRawArgs(useRawArgs = true) {
    this.cmd._useRawArgs = useRawArgs;
    return this;
  }
  /**
   * Set default command. The default command is executed when the program
   * was called without any argument and if no action handler is registered.
   *
   * @param name Name of the default command.
   */
  default(name) {
    this.cmd.defaultCommand = name;
    return this;
  }
  globalType(name, handler, options) {
    return this.type(name, handler, { ...options, global: true });
  }
  /**
   * Register custom type.
   *
   * @param name    The name of the type.
   * @param handler The callback method to parse the type.
   * @param options Type options.
   */
  type(name, handler, options) {
    if (this.cmd.types.get(name) && !options?.override) {
      throw new DuplicateTypeError(name);
    }
    this.cmd.types.set(name, {
      ...options,
      name,
      handler
    });
    if (handler instanceof Type && (typeof handler.complete !== "undefined" || typeof handler.values !== "undefined")) {
      const completeHandler = (cmd, parent) => handler.complete?.(cmd, parent) || [];
      this.complete(name, completeHandler, options);
    }
    return this;
  }
  /**
   * Register global complete handler.
   *
   * @param name      The name of the completion.
   * @param complete  The callback method to complete the type.
   * @param options   Complete options.
   */
  globalComplete(name, complete, options) {
    return this.complete(name, complete, { ...options, global: true });
  }
  complete(name, complete, options) {
    if (this.cmd.completions.has(name) && !options?.override) {
      throw new DuplicateCompletionError(name);
    }
    this.cmd.completions.set(name, {
      name,
      complete,
      ...options
    });
    return this;
  }
  /**
   * Throw validation errors instead of calling `Deno.exit()` to handle
   * validation errors manually.
   *
   * A validation error is thrown when the command is wrongly used by the user.
   * For example: If the user passes some invalid options or arguments to the
   * command.
   *
   * This has no effect for parent commands. Only for the command on which this
   * method was called and all child commands.
   *
   * **Example:**
   *
   * ```ts
   * import { Command, ValidationError } from "./mod.ts";
   *
   * const cmd = new Command();
   * // ...
   *
   * try {
   *   cmd.parse();
   * } catch(error) {
   *   if (error instanceof ValidationError) {
   *     cmd.showHelp();
   *     Deno.exit(1);
   *   }
   *   throw error;
   * }
   * ```
   *
   * @see ValidationError
   */
  throwErrors() {
    this.cmd.throwOnError = true;
    return this;
  }
  /**
   * Set custom error handler.
   *
   * @param handler Error handler callback function.
   */
  error(handler) {
    this.cmd.errorHandler = handler;
    return this;
  }
  /** Get error handler callback function. */
  getErrorHandler() {
    return this.errorHandler ?? this._parent?.errorHandler;
  }
  /**
   * Same as `.throwErrors()` but also prevents calling `Deno.exit` after
   * printing help or version with the --help and --version option.
   */
  noExit() {
    this.cmd._shouldExit = false;
    this.throwErrors();
    return this;
  }
  /**
   * Disable inheriting global commands, options and environment variables from
   * parent commands.
   */
  noGlobals() {
    this.cmd._noGlobals = true;
    return this;
  }
  /** Check whether the command should throw errors or exit. */
  shouldThrowErrors() {
    return this.throwOnError || !!this._parent?.shouldThrowErrors();
  }
  /** Check whether the command should exit after printing help or version. */
  shouldExit() {
    return this._shouldExit ?? this._parent?.shouldExit() ?? true;
  }
  /**
   * Enable grouping of options and set the name of the group.
   * All option which are added after calling the `.group()` method will be
   * grouped in the help output. If the `.group()` method can be use multiple
   * times to create more groups.
   *
   * @param name The name of the option group.
   */
  group(name) {
    this.cmd._groupName = name;
    return this;
  }
  /**
   * Register a global option.
   *
   * @param flags Flags string e.g: -h, --help, --manual <requiredArg:string> [optionalArg:number] [...restArgs:string]
   * @param desc Flag description.
   * @param opts Flag options or custom handler for processing flag value.
   */
  globalOption(flags, desc, opts) {
    if (typeof opts === "function") {
      return this.option(
        flags,
        desc,
        { value: opts, global: true }
      );
    }
    return this.option(
      flags,
      desc,
      { ...opts, global: true }
    );
  }
  option(flags, desc, opts) {
    if (typeof opts === "function") {
      opts = { value: opts };
    }
    const result2 = splitArguments(flags);
    const args = result2.typeDefinition ? parseArgumentsDefinition(result2.typeDefinition) : [];
    const option = {
      ...opts,
      name: "",
      description: desc,
      args,
      flags: result2.flags,
      equalsSign: result2.equalsSign,
      typeDefinition: result2.typeDefinition,
      groupName: this._groupName ?? void 0
    };
    if (option.separator) {
      for (const arg of args) {
        if (arg.list) {
          arg.separator = option.separator;
        }
      }
    }
    for (const part of option.flags) {
      const arg = part.trim();
      const isLong = /^--/.test(arg);
      const name = isLong ? arg.slice(2) : arg.slice(1);
      if (this.cmd.getBaseOption(name, true)) {
        if (opts?.override) {
          this.removeOption(name);
        } else {
          throw new DuplicateOptionNameError(name, this.getPath());
        }
      }
      if (!option.name && isLong) {
        option.name = name;
      } else if (!option.aliases) {
        option.aliases = [name];
      } else {
        option.aliases.push(name);
      }
    }
    if (option.prepend) {
      this.cmd.options.unshift(option);
    } else {
      this.cmd.options.push(option);
    }
    return this;
  }
  /**
   * Register command example.
   *
   * @param name          Name of the example.
   * @param description   The content of the example.
   */
  example(name, description) {
    if (this.cmd.hasExample(name)) {
      throw new DuplicateExampleError(name);
    }
    this.cmd.examples.push({ name, description });
    return this;
  }
  /**
   * @param flags Flags string e.g: -h, --help, --manual <requiredArg:string> [optionalArg:number] [...restArgs:string]
   * @param desc Flag description.
   * @param opts Flag options or custom handler for processing flag value.
   */
  /**
   * Register a global environment variable.
   *
   * @param name        Name of the environment variable.
   * @param description The description of the environment variable.
   * @param options     Environment variable options.
   */
  globalEnv(name, description, options) {
    return this.env(
      name,
      description,
      { ...options, global: true }
    );
  }
  env(name, description, options) {
    const result2 = splitArguments(name);
    if (!result2.typeDefinition) {
      result2.typeDefinition = "<value:boolean>";
    }
    if (result2.flags.some((envName) => this.cmd.getBaseEnvVar(envName, true))) {
      throw new DuplicateEnvVarError(name);
    }
    const details = parseArgumentsDefinition(
      result2.typeDefinition
    );
    if (details.length > 1) {
      throw new TooManyEnvVarValuesError(name);
    } else if (details.length && details[0].optional) {
      throw new UnexpectedOptionalEnvVarValueError(name);
    } else if (details.length && details[0].variadic) {
      throw new UnexpectedVariadicEnvVarValueError(name);
    }
    this.cmd.envVars.push({
      name: result2.flags[0],
      names: result2.flags,
      description,
      type: details[0].type,
      details: details.shift(),
      ...options
    });
    return this;
  }
  /*****************************************************************************
   **** MAIN HANDLER ***********************************************************
   *****************************************************************************/
  /**
   * Parse command line arguments and execute matched command.
   *
   * @param args Command line args to parse. Ex: `cmd.parse( Deno.args )`
   */
  parse(args = Deno.args) {
    const ctx = {
      unknown: args.slice(),
      flags: {},
      env: {},
      literal: [],
      stopEarly: false,
      stopOnUnknown: false,
      defaults: {},
      actions: []
    };
    return this.parseCommand(ctx);
  }
  async parseCommand(ctx) {
    try {
      this.reset();
      this.registerDefaults();
      this.rawArgs = ctx.unknown.slice();
      if (this.isExecutable) {
        await this.executeExecutable(ctx.unknown);
        return { options: {}, args: [], cmd: this, literal: [] };
      } else if (this._useRawArgs) {
        await this.parseEnvVars(ctx, this.envVars);
        return await this.execute(ctx.env, ctx.unknown);
      }
      let preParseGlobals = false;
      let subCommand;
      if (ctx.unknown.length > 0) {
        subCommand = this.getSubCommand(ctx);
        if (!subCommand) {
          const optionName = ctx.unknown[0].replace(/^-+/, "");
          const option = this.getOption(optionName, true);
          if (option?.global) {
            preParseGlobals = true;
            await this.parseGlobalOptionsAndEnvVars(ctx);
          }
        }
      }
      if (subCommand || ctx.unknown.length > 0) {
        subCommand ??= this.getSubCommand(ctx);
        if (subCommand) {
          subCommand._globalParent = this;
          return subCommand.parseCommand(ctx);
        }
      }
      await this.parseOptionsAndEnvVars(ctx, preParseGlobals);
      const options = { ...ctx.env, ...ctx.flags };
      const args = this.parseArguments(ctx, options);
      this.literalArgs = ctx.literal;
      if (ctx.actions.length) {
        await Promise.all(
          ctx.actions.map((action) => action.call(this, options, ...args))
        );
      }
      if (ctx.standalone) {
        return {
          options,
          args,
          cmd: this,
          literal: this.literalArgs
        };
      }
      return await this.execute(options, args);
    } catch (error) {
      this.handleError(error);
    }
  }
  getSubCommand(ctx) {
    const subCommand = this.getCommand(ctx.unknown[0], true);
    if (subCommand) {
      ctx.unknown.shift();
    }
    return subCommand;
  }
  async parseGlobalOptionsAndEnvVars(ctx) {
    const isHelpOption = this.getHelpOption()?.flags.includes(ctx.unknown[0]);
    const envVars = [
      ...this.envVars.filter((envVar) => envVar.global),
      ...this.getGlobalEnvVars(true)
    ];
    await this.parseEnvVars(ctx, envVars, !isHelpOption);
    const options = [
      ...this.options.filter((option) => option.global),
      ...this.getGlobalOptions(true)
    ];
    this.parseOptions(ctx, options, {
      stopEarly: true,
      stopOnUnknown: true,
      dotted: false
    });
  }
  async parseOptionsAndEnvVars(ctx, preParseGlobals) {
    const helpOption = this.getHelpOption();
    const isVersionOption = this._versionOption?.flags.includes(ctx.unknown[0]);
    const isHelpOption = helpOption && ctx.flags?.[helpOption.name] === true;
    const envVars = preParseGlobals ? this.envVars.filter((envVar) => !envVar.global) : this.getEnvVars(true);
    await this.parseEnvVars(
      ctx,
      envVars,
      !isHelpOption && !isVersionOption
    );
    const options = this.getOptions(true);
    this.parseOptions(ctx, options);
  }
  /** Register default options like `--version` and `--help`. */
  registerDefaults() {
    if (this.hasDefaults || this.getParent()) {
      return this;
    }
    this.hasDefaults = true;
    this.reset();
    !this.types.has("string") && this.type("string", new StringType(), { global: true });
    !this.types.has("number") && this.type("number", new NumberType(), { global: true });
    !this.types.has("integer") && this.type("integer", new IntegerType(), { global: true });
    !this.types.has("boolean") && this.type("boolean", new BooleanType(), { global: true });
    !this.types.has("file") && this.type("file", new FileType(), { global: true });
    if (!this._help) {
      this.help({});
    }
    if (this._versionOptions !== false && (this._versionOptions || this.ver)) {
      this.option(
        this._versionOptions?.flags || "-V, --version",
        this._versionOptions?.desc || "Show the version number for this program.",
        {
          standalone: true,
          prepend: true,
          action: async function() {
            const long = this.getRawArgs().includes(
              `--${this._versionOption?.name}`
            );
            if (long) {
              await checkVersion(this);
              this.showLongVersion();
            } else {
              this.showVersion();
            }
            this.exit();
          },
          ...this._versionOptions?.opts ?? {}
        }
      );
      this._versionOption = this.options[0];
    }
    if (this._helpOptions !== false) {
      this.option(
        this._helpOptions?.flags || "-h, --help",
        this._helpOptions?.desc || "Show this help.",
        {
          standalone: true,
          global: true,
          prepend: true,
          action: async function() {
            const long = this.getRawArgs().includes(
              `--${this.getHelpOption()?.name}`
            );
            await checkVersion(this);
            this.showHelp({ long });
            this.exit();
          },
          ...this._helpOptions?.opts ?? {}
        }
      );
      this._helpOption = this.options[0];
    }
    return this;
  }
  /**
   * Execute command.
   * @param options A map of options.
   * @param args Command arguments.
   */
  async execute(options, args) {
    if (this.defaultCommand) {
      const cmd = this.getCommand(this.defaultCommand, true);
      if (!cmd) {
        throw new DefaultCommandNotFoundError(
          this.defaultCommand,
          this.getCommands()
        );
      }
      cmd._globalParent = this;
      return cmd.execute(options, args);
    }
    await this.executeGlobalAction(options, args);
    if (this.actionHandler) {
      await this.actionHandler(options, ...args);
    }
    return {
      options,
      args,
      cmd: this,
      literal: this.literalArgs
    };
  }
  async executeGlobalAction(options, args) {
    if (!this._noGlobals) {
      await this._parent?.executeGlobalAction(options, args);
    }
    await this.globalActionHandler?.(options, ...args);
  }
  /**
   * Execute external sub-command.
   * @param args Raw command line arguments.
   */
  async executeExecutable(args) {
    const command2 = this.getPath().replace(/\s+/g, "-");
    await Deno.permissions.request({ name: "run", command: command2 });
    try {
      const cmd = new Deno.Command(command2, {
        args
      });
      const output2 = await cmd.output();
      if (!output2.success) {
        Deno.exit(output2.code);
      }
    } catch (error) {
      if (error instanceof Deno.errors.NotFound) {
        throw new CommandExecutableNotFoundError(command2);
      }
      throw error;
    }
  }
  /** Parse raw command line arguments. */
  parseOptions(ctx, options, {
    stopEarly = this._stopEarly,
    stopOnUnknown = false,
    dotted = true
  } = {}) {
    parseFlags(ctx, {
      stopEarly,
      stopOnUnknown,
      dotted,
      allowEmpty: this._allowEmpty,
      flags: options,
      ignoreDefaults: ctx.env,
      parse: (type) => this.parseType(type),
      option: (option) => {
        if (option.action) {
          ctx.actions.push(option.action);
        }
      }
    });
  }
  /** Parse argument type. */
  parseType(type) {
    const typeSettings = this.getType(type.type);
    if (!typeSettings) {
      throw new UnknownTypeError(
        type.type,
        this.getTypes().map((type2) => type2.name)
      );
    }
    return typeSettings.handler instanceof Type ? typeSettings.handler.parse(type) : typeSettings.handler(type);
  }
  /**
   * Read and validate environment variables.
   * @param ctx Parse context.
   * @param envVars env vars defined by the command.
   * @param validate when true, throws an error if a required env var is missing.
   */
  async parseEnvVars(ctx, envVars, validate = true) {
    for (const envVar of envVars) {
      const env3 = await this.findEnvVar(envVar.names);
      if (env3) {
        const parseType = (value) => {
          return this.parseType({
            label: "Environment variable",
            type: envVar.type,
            name: env3.name,
            value
          });
        };
        const propertyName = underscoreToCamelCase(
          envVar.prefix ? envVar.names[0].replace(new RegExp(`^${envVar.prefix}`), "") : envVar.names[0]
        );
        if (envVar.details.list) {
          ctx.env[propertyName] = env3.value.split(envVar.details.separator ?? ",").map(parseType);
        } else {
          ctx.env[propertyName] = parseType(env3.value);
        }
        if (envVar.value && typeof ctx.env[propertyName] !== "undefined") {
          ctx.env[propertyName] = envVar.value(ctx.env[propertyName]);
        }
      } else if (envVar.required && validate) {
        throw new MissingRequiredEnvVarError(envVar);
      }
    }
  }
  async findEnvVar(names) {
    for (const name of names) {
      const status = await Deno.permissions.query({
        name: "env",
        variable: name
      });
      if (status.state === "granted") {
        const value = Deno.env.get(name);
        if (value) {
          return { name, value };
        }
      }
    }
    return void 0;
  }
  /**
   * Parse command-line arguments.
   * @param ctx     Parse context.
   * @param options Parsed command line options.
   */
  parseArguments(ctx, options) {
    const params = [];
    const args = ctx.unknown.slice();
    if (!this.hasArguments()) {
      if (args.length) {
        if (this.hasCommands(true)) {
          if (this.hasCommand(args[0], true)) {
            throw new TooManyArgumentsError(args);
          } else {
            throw new UnknownCommandError(args[0], this.getCommands());
          }
        } else {
          throw new NoArgumentsAllowedError(this.getPath());
        }
      }
    } else {
      if (!args.length) {
        const required = this.getArguments().filter((expectedArg) => !expectedArg.optional).map((expectedArg) => expectedArg.name);
        if (required.length) {
          const optionNames = Object.keys(options);
          const hasStandaloneOption = !!optionNames.find(
            (name) => this.getOption(name, true)?.standalone
          );
          if (!hasStandaloneOption) {
            throw new MissingArgumentsError(required);
          }
        }
      } else {
        for (const expectedArg of this.getArguments()) {
          if (!args.length) {
            if (expectedArg.optional) {
              break;
            }
            throw new MissingArgumentError(expectedArg.name);
          }
          let arg;
          const parseArgValue = (value) => {
            return expectedArg.list ? value.split(",").map((value2) => parseArgType(value2)) : parseArgType(value);
          };
          const parseArgType = (value) => {
            return this.parseType({
              label: "Argument",
              type: expectedArg.type,
              name: expectedArg.name,
              value
            });
          };
          if (expectedArg.variadic) {
            arg = args.splice(0, args.length).map(
              (value) => parseArgValue(value)
            );
          } else {
            arg = parseArgValue(args.shift());
          }
          if (expectedArg.variadic && Array.isArray(arg)) {
            params.push(...arg);
          } else if (typeof arg !== "undefined") {
            params.push(arg);
          }
        }
        if (args.length) {
          throw new TooManyArgumentsError(args);
        }
      }
    }
    return params;
  }
  handleError(error) {
    this.throw(
      error instanceof ValidationError ? new ValidationError2(error.message) : error instanceof Error ? error : new Error(`[non-error-thrown] ${error}`)
    );
  }
  /**
   * Handle error. If `throwErrors` is enabled the error will be thrown,
   * otherwise a formatted error message will be printed and `Deno.exit(1)`
   * will be called. This will also trigger registered error handlers.
   *
   * @param error The error to handle.
   */
  throw(error) {
    if (error instanceof ValidationError2) {
      error.cmd = this;
    }
    this.getErrorHandler()?.(error, this);
    if (this.shouldThrowErrors() || !(error instanceof ValidationError2)) {
      throw error;
    }
    this.showHelp();
    console.error(red(`  ${bold("error")}: ${error.message}
`));
    Deno.exit(error instanceof ValidationError2 ? error.exitCode : 1);
  }
  /*****************************************************************************
   **** GETTER *****************************************************************
   *****************************************************************************/
  /** Get command name. */
  getName() {
    return this._name;
  }
  /** Get parent command. */
  getParent() {
    return this._parent;
  }
  /**
   * Get parent command from global executed command.
   * Be sure, to call this method only inside an action handler. Unless this or any child command was executed,
   * this method returns always undefined.
   */
  getGlobalParent() {
    return this._globalParent;
  }
  /** Get main command. */
  getMainCommand() {
    return this._parent?.getMainCommand() ?? this;
  }
  /** Get command name aliases. */
  getAliases() {
    return this.aliases;
  }
  /**
   * Get full command path.
   *
   * @param name Override the main command name.
   */
  getPath(name) {
    return this._parent ? this._parent.getPath(name) + " " + this._name : name || this._name;
  }
  /** Get arguments definition. E.g: <input-file:string> <output-file:string> */
  getArgsDefinition() {
    return this.argsDefinition;
  }
  /**
   * Get argument by name.
   *
   * @param name Name of the argument.
   */
  getArgument(name) {
    return this.getArguments().find((arg) => arg.name === name);
  }
  /** Get arguments. */
  getArguments() {
    if (!this.args.length && this.argsDefinition) {
      this.args = parseArgumentsDefinition(this.argsDefinition);
    }
    return this.args;
  }
  /** Check if command has arguments. */
  hasArguments() {
    return !!this.argsDefinition;
  }
  /** Get command version. */
  getVersion() {
    return this.getVersionHandler()?.call(this, this);
  }
  /** Get help handler method. */
  getVersionHandler() {
    return this.ver ?? this._parent?.getVersionHandler();
  }
  /** Get command description. */
  getDescription() {
    return typeof this.desc === "function" ? this.desc = this.desc() : this.desc;
  }
  /** Get auto generated command usage. */
  getUsage() {
    return this._usage ?? [this.getArgsDefinition(), this.getRequiredOptionsDefinition()].join(" ").trim();
  }
  getRequiredOptionsDefinition() {
    return this.getOptions().filter((option) => option.required).map(
      (option) => [findFlag(option.flags), option.typeDefinition].filter((v) => v).join(" ").trim()
    ).join(" ");
  }
  /** Get short command description. This is the first line of the description. */
  getShortDescription() {
    return getDescription(this.getDescription(), true);
  }
  /** Get original command-line arguments. */
  getRawArgs() {
    return this.rawArgs;
  }
  /** Get all arguments defined after the double dash. */
  getLiteralArgs() {
    return this.literalArgs;
  }
  /** Output generated help without exiting. */
  showVersion() {
    console.log(this.getVersion());
  }
  /** Returns command name, version and meta data. */
  getLongVersion() {
    return `${bold(this.getMainCommand().getName())} ${brightBlue(this.getVersion() ?? "")}` + Object.entries(this.getMeta()).map(
      ([k, v]) => `
${bold(k)} ${brightBlue(v)}`
    ).join("");
  }
  /** Outputs command name, version and meta data. */
  showLongVersion() {
    console.log(this.getLongVersion());
  }
  /** Output generated help without exiting. */
  showHelp(options) {
    console.log(this.getHelp(options));
  }
  /** Get generated help. */
  getHelp(options) {
    this.registerDefaults();
    return this.getHelpHandler().call(this, this, options ?? {});
  }
  /** Get help handler method. */
  getHelpHandler() {
    return this._help ?? this._parent?.getHelpHandler();
  }
  exit(code2 = 0) {
    if (this.shouldExit()) {
      Deno.exit(code2);
    }
  }
  /*****************************************************************************
   **** Options GETTER *********************************************************
   *****************************************************************************/
  /**
   * Checks whether the command has options or not.
   *
   * @param hidden Include hidden options.
   */
  hasOptions(hidden) {
    return this.getOptions(hidden).length > 0;
  }
  /**
   * Get options.
   *
   * @param hidden Include hidden options.
   */
  getOptions(hidden) {
    return this.getGlobalOptions(hidden).concat(this.getBaseOptions(hidden));
  }
  /**
   * Get base options.
   *
   * @param hidden Include hidden options.
   */
  getBaseOptions(hidden) {
    if (!this.options.length) {
      return [];
    }
    return hidden ? this.options.slice(0) : this.options.filter((opt) => !opt.hidden);
  }
  /**
   * Get global options.
   *
   * @param hidden Include hidden options.
   */
  getGlobalOptions(hidden) {
    const helpOption = this.getHelpOption();
    const getGlobals = (cmd, noGlobals, options = [], names = []) => {
      if (cmd.options.length) {
        for (const option of cmd.options) {
          if (option.global && !this.options.find((opt) => opt.name === option.name) && names.indexOf(option.name) === -1 && (hidden || !option.hidden)) {
            if (noGlobals && option !== helpOption) {
              continue;
            }
            names.push(option.name);
            options.push(option);
          }
        }
      }
      return cmd._parent ? getGlobals(
        cmd._parent,
        noGlobals || cmd._noGlobals,
        options,
        names
      ) : options;
    };
    return this._parent ? getGlobals(this._parent, this._noGlobals) : [];
  }
  /**
   * Checks whether the command has an option with given name or not.
   *
   * @param name Name of the option. Must be in param-case.
   * @param hidden Include hidden options.
   */
  hasOption(name, hidden) {
    return !!this.getOption(name, hidden);
  }
  /**
   * Get option by name.
   *
   * @param name Name of the option. Must be in param-case.
   * @param hidden Include hidden options.
   */
  getOption(name, hidden) {
    return this.getBaseOption(name, hidden) ?? this.getGlobalOption(name, hidden);
  }
  /**
   * Get base option by name.
   *
   * @param name Name of the option. Must be in param-case.
   * @param hidden Include hidden options.
   */
  getBaseOption(name, hidden) {
    const option = this.options.find(
      (option2) => option2.name === name || option2.aliases?.includes(name)
    );
    return option && (hidden || !option.hidden) ? option : void 0;
  }
  /**
   * Get global option from parent commands by name.
   *
   * @param name Name of the option. Must be in param-case.
   * @param hidden Include hidden options.
   */
  getGlobalOption(name, hidden) {
    const helpOption = this.getHelpOption();
    const getGlobalOption = (parent, noGlobals) => {
      const option = parent.getBaseOption(
        name,
        hidden
      );
      if (!option?.global) {
        return parent._parent && getGlobalOption(
          parent._parent,
          noGlobals || parent._noGlobals
        );
      }
      if (noGlobals && option !== helpOption) {
        return;
      }
      return option;
    };
    return this._parent && getGlobalOption(
      this._parent,
      this._noGlobals
    );
  }
  /**
   * Remove option by name.
   *
   * @param name Name of the option. Must be in param-case.
   */
  removeOption(name) {
    const index = this.options.findIndex((option) => option.name === name);
    if (index === -1) {
      return;
    }
    return this.options.splice(index, 1)[0];
  }
  /**
   * Checks whether the command has sub-commands or not.
   *
   * @param hidden Include hidden commands.
   */
  hasCommands(hidden) {
    return this.getCommands(hidden).length > 0;
  }
  /**
   * Get commands.
   *
   * @param hidden Include hidden commands.
   */
  getCommands(hidden) {
    return this.getGlobalCommands(hidden).concat(this.getBaseCommands(hidden));
  }
  /**
   * Get base commands.
   *
   * @param hidden Include hidden commands.
   */
  getBaseCommands(hidden) {
    const commands = Array.from(this.commands.values());
    return hidden ? commands : commands.filter((cmd) => !cmd.isHidden);
  }
  /**
   * Get global commands.
   *
   * @param hidden Include hidden commands.
   */
  getGlobalCommands(hidden) {
    const getCommands = (command2, noGlobals, commands = [], names = []) => {
      if (command2.commands.size) {
        for (const [_, cmd] of command2.commands) {
          if (cmd.isGlobal && this !== cmd && !this.commands.has(cmd._name) && names.indexOf(cmd._name) === -1 && (hidden || !cmd.isHidden)) {
            if (noGlobals && cmd?.getName() !== "help") {
              continue;
            }
            names.push(cmd._name);
            commands.push(cmd);
          }
        }
      }
      return command2._parent ? getCommands(
        command2._parent,
        noGlobals || command2._noGlobals,
        commands,
        names
      ) : commands;
    };
    return this._parent ? getCommands(this._parent, this._noGlobals) : [];
  }
  /**
   * Checks whether a child command exists by given name or alias.
   *
   * @param name Name or alias of the command.
   * @param hidden Include hidden commands.
   */
  hasCommand(name, hidden) {
    return !!this.getCommand(name, hidden);
  }
  /**
   * Get command by name or alias.
   *
   * @param name Name or alias of the command.
   * @param hidden Include hidden commands.
   */
  getCommand(name, hidden) {
    return this.getBaseCommand(name, hidden) ?? this.getGlobalCommand(name, hidden);
  }
  /**
   * Get base command by name or alias.
   *
   * @param name Name or alias of the command.
   * @param hidden Include hidden commands.
   */
  getBaseCommand(name, hidden) {
    for (const cmd of this.commands.values()) {
      if (cmd._name === name || cmd.aliases.includes(name)) {
        return cmd && (hidden || !cmd.isHidden) ? cmd : void 0;
      }
    }
  }
  /**
   * Get global command by name or alias.
   *
   * @param name Name or alias of the command.
   * @param hidden Include hidden commands.
   */
  getGlobalCommand(name, hidden) {
    const getGlobalCommand = (parent, noGlobals) => {
      const cmd = parent.getBaseCommand(name, hidden);
      if (!cmd?.isGlobal) {
        return parent._parent && getGlobalCommand(parent._parent, noGlobals || parent._noGlobals);
      }
      if (noGlobals && cmd.getName() !== "help") {
        return;
      }
      return cmd;
    };
    return this._parent && getGlobalCommand(this._parent, this._noGlobals);
  }
  /**
   * Remove sub-command by name or alias.
   *
   * @param name Name or alias of the command.
   */
  removeCommand(name) {
    const command2 = this.getBaseCommand(name, true);
    if (command2) {
      this.commands.delete(command2._name);
    }
    return command2;
  }
  /** Get types. */
  getTypes() {
    return this.getGlobalTypes().concat(this.getBaseTypes());
  }
  /** Get base types. */
  getBaseTypes() {
    return Array.from(this.types.values());
  }
  /** Get global types. */
  getGlobalTypes() {
    const getTypes = (cmd, types = [], names = []) => {
      if (cmd) {
        if (cmd.types.size) {
          cmd.types.forEach((type) => {
            if (type.global && !this.types.has(type.name) && names.indexOf(type.name) === -1) {
              names.push(type.name);
              types.push(type);
            }
          });
        }
        return getTypes(cmd._parent, types, names);
      }
      return types;
    };
    return getTypes(this._parent);
  }
  /**
   * Get type by name.
   *
   * @param name Name of the type.
   */
  getType(name) {
    return this.getBaseType(name) ?? this.getGlobalType(name);
  }
  /**
   * Get base type by name.
   *
   * @param name Name of the type.
   */
  getBaseType(name) {
    return this.types.get(name);
  }
  /**
   * Get global type by name.
   *
   * @param name Name of the type.
   */
  getGlobalType(name) {
    if (!this._parent) {
      return;
    }
    const cmd = this._parent.getBaseType(name);
    if (!cmd?.global) {
      return this._parent.getGlobalType(name);
    }
    return cmd;
  }
  /** Get completions. */
  getCompletions() {
    return this.getGlobalCompletions().concat(this.getBaseCompletions());
  }
  /** Get base completions. */
  getBaseCompletions() {
    return Array.from(this.completions.values());
  }
  /** Get global completions. */
  getGlobalCompletions() {
    const getCompletions = (cmd, completions = [], names = []) => {
      if (cmd) {
        if (cmd.completions.size) {
          cmd.completions.forEach((completion) => {
            if (completion.global && !this.completions.has(completion.name) && names.indexOf(completion.name) === -1) {
              names.push(completion.name);
              completions.push(completion);
            }
          });
        }
        return getCompletions(cmd._parent, completions, names);
      }
      return completions;
    };
    return getCompletions(this._parent);
  }
  /**
   * Get completion by name.
   *
   * @param name Name of the completion.
   */
  getCompletion(name) {
    return this.getBaseCompletion(name) ?? this.getGlobalCompletion(name);
  }
  /**
   * Get base completion by name.
   *
   * @param name Name of the completion.
   */
  getBaseCompletion(name) {
    return this.completions.get(name);
  }
  /**
   * Get global completions by name.
   *
   * @param name Name of the completion.
   */
  getGlobalCompletion(name) {
    if (!this._parent) {
      return;
    }
    const completion = this._parent.getBaseCompletion(
      name
    );
    if (!completion?.global) {
      return this._parent.getGlobalCompletion(name);
    }
    return completion;
  }
  /**
   * Checks whether the command has environment variables or not.
   *
   * @param hidden Include hidden environment variable.
   */
  hasEnvVars(hidden) {
    return this.getEnvVars(hidden).length > 0;
  }
  /**
   * Get environment variables.
   *
   * @param hidden Include hidden environment variable.
   */
  getEnvVars(hidden) {
    return this.getGlobalEnvVars(hidden).concat(this.getBaseEnvVars(hidden));
  }
  /**
   * Get base environment variables.
   *
   * @param hidden Include hidden environment variable.
   */
  getBaseEnvVars(hidden) {
    if (!this.envVars.length) {
      return [];
    }
    return hidden ? this.envVars.slice(0) : this.envVars.filter((env3) => !env3.hidden);
  }
  /**
   * Get global environment variables.
   *
   * @param hidden Include hidden environment variable.
   */
  getGlobalEnvVars(hidden) {
    if (this._noGlobals) {
      return [];
    }
    const getEnvVars = (cmd, envVars = [], names = []) => {
      if (cmd) {
        if (cmd.envVars.length) {
          cmd.envVars.forEach((envVar) => {
            if (envVar.global && !this.envVars.find((env3) => env3.names[0] === envVar.names[0]) && names.indexOf(envVar.names[0]) === -1 && (hidden || !envVar.hidden)) {
              names.push(envVar.names[0]);
              envVars.push(envVar);
            }
          });
        }
        return getEnvVars(cmd._parent, envVars, names);
      }
      return envVars;
    };
    return getEnvVars(this._parent);
  }
  /**
   * Checks whether the command has an environment variable with given name or not.
   *
   * @param name Name of the environment variable.
   * @param hidden Include hidden environment variable.
   */
  hasEnvVar(name, hidden) {
    return !!this.getEnvVar(name, hidden);
  }
  /**
   * Get environment variable by name.
   *
   * @param name Name of the environment variable.
   * @param hidden Include hidden environment variable.
   */
  getEnvVar(name, hidden) {
    return this.getBaseEnvVar(name, hidden) ?? this.getGlobalEnvVar(name, hidden);
  }
  /**
   * Get base environment variable by name.
   *
   * @param name Name of the environment variable.
   * @param hidden Include hidden environment variable.
   */
  getBaseEnvVar(name, hidden) {
    const envVar = this.envVars.find(
      (env3) => env3.names.indexOf(name) !== -1
    );
    return envVar && (hidden || !envVar.hidden) ? envVar : void 0;
  }
  /**
   * Get global environment variable by name.
   *
   * @param name Name of the environment variable.
   * @param hidden Include hidden environment variable.
   */
  getGlobalEnvVar(name, hidden) {
    if (!this._parent || this._noGlobals) {
      return;
    }
    const envVar = this._parent.getBaseEnvVar(
      name,
      hidden
    );
    if (!envVar?.global) {
      return this._parent.getGlobalEnvVar(name, hidden);
    }
    return envVar;
  }
  /** Checks whether the command has examples or not. */
  hasExamples() {
    return this.examples.length > 0;
  }
  /** Get all examples. */
  getExamples() {
    return this.examples;
  }
  /** Checks whether the command has an example with given name or not. */
  hasExample(name) {
    return !!this.getExample(name);
  }
  /** Get example with given name. */
  getExample(name) {
    return this.examples.find((example) => example.name === name);
  }
  getHelpOption() {
    return this._helpOption ?? this._parent?.getHelpOption();
  }
};
function findFlag(flags) {
  for (const flag of flags) {
    if (flag.startsWith("--")) {
      return flag;
    }
  }
  return flags[0];
}

// https://deno.land/x/good@1.5.1.0/value.js
var typedArrayClasses = [
  Uint16Array,
  Uint32Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Int32Array,
  Int8Array,
  Float32Array,
  Float64Array,
  globalThis.BigInt64Array,
  globalThis.BigUint64Array
].filter((each2) => each2);
var copyableClasses = /* @__PURE__ */ new Set([RegExp, Date, URL, ...typedArrayClasses, globalThis.ArrayBuffer, globalThis.DataView]);
var IteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
var ArrayIterator = Object.getPrototypeOf([][Symbol.iterator]);
var MapIterator = Object.getPrototypeOf((/* @__PURE__ */ new Map())[Symbol.iterator]);
var SetIterator = Object.getPrototypeOf((/* @__PURE__ */ new Set())[Symbol.iterator]);
var AsyncFunction = class {
};
var GeneratorFunction = class {
};
var AsyncGeneratorFunction = class {
};
var SyncGenerator = class {
};
var AsyncGenerator = class {
};
try {
  AsyncFunction = eval("(async function(){}).constructor");
  GeneratorFunction = eval("(function*(){}).constructor");
  AsyncGeneratorFunction = eval("(async function*(){}).constructor");
  SyncGenerator = eval("((function*(){})()).constructor");
  AsyncGenerator = eval("((async function*(){})()).constructor");
} catch (error) {
}
var isPrimitive = (value) => !(value instanceof Object);
var isPureObject = (value) => value instanceof Object && Object.getPrototypeOf(value).constructor == Object;
var isPracticallyPrimitive = (value) => isPrimitive(value) || value instanceof Date || value instanceof RegExp || value instanceof URL;
var isBuiltInIterator = (value) => IteratorPrototype.isPrototypeOf(value);
var isGeneratorType = (value) => {
  if (value instanceof Object) {
    if (isBuiltInIterator(value)) {
      return true;
    }
    const constructor = value.constructor;
    return constructor == SyncGenerator || constructor == AsyncGenerator;
  }
  return false;
};
var isAsyncIterable = function(value) {
  return value && typeof value[Symbol.asyncIterator] === "function";
};
var isSyncIterable = function(value) {
  return value && typeof value[Symbol.iterator] === "function";
};
var isIterableObjectOrContainer = function(value) {
  return value instanceof Object && (typeof value[Symbol.iterator] == "function" || typeof value[Symbol.asyncIterator] === "function");
};
var isTechnicallyIterable = function(value) {
  return value instanceof Object || typeof value == "string";
};
var isSyncIterableObjectOrContainer = function(value) {
  return value instanceof Object && typeof value[Symbol.iterator] == "function";
};
var deepCopySymbol = Symbol.for("deepCopy");
var clonedFromSymbol = Symbol();
var getThis = Symbol();
Object.getPrototypeOf(function() {
})[getThis] = function() {
  return this;
};
function deepCopyInner(value, valueChain = [], originalToCopyMap = /* @__PURE__ */ new Map()) {
  valueChain.push(value);
  if (value == null) {
    return value;
  }
  if (!(value instanceof Object)) {
    return value;
  }
  if (originalToCopyMap.has(value)) {
    return originalToCopyMap.get(value);
  }
  if (value[deepCopySymbol] instanceof Function) {
    const clonedValue = value[deepCopySymbol](originalToCopyMap);
    originalToCopyMap.set(value, clonedValue);
    return clonedValue;
  }
  if (isGeneratorType(value)) {
    throw Error(`Sadly built-in generators cannot be deep copied.
And I found a generator along this path:
${valueChain.reverse().map((each2) => `${each2},
`)}`);
  }
  let object, theThis, thisCopy;
  if (value instanceof Date) {
    object = new Date(value.getTime());
  } else if (value instanceof RegExp) {
    object = new RegExp(value);
  } else if (value instanceof URL) {
    object = new URL(value);
  } else if (value instanceof Function) {
    theThis = value[getThis]();
    object = value.bind(theThis);
  } else if (copyableClasses.has(value.constructor)) {
    object = new value.constructor(value);
  } else if (value instanceof Array) {
    object = [];
  } else if (value instanceof Set) {
    object = /* @__PURE__ */ new Set();
  } else if (value instanceof Map) {
    object = /* @__PURE__ */ new Map();
  }
  originalToCopyMap.set(value, object);
  if (object instanceof Function) {
    thisCopy = deepCopyInner(theThis, valueChain, originalToCopyMap);
    object = object.bind(thisCopy);
  }
  const output2 = object;
  try {
    output2.constructor = value.constructor;
  } catch (error) {
  }
  Object.setPrototypeOf(output2, Object.getPrototypeOf(value));
  const propertyDefinitions = {};
  for (const [key, description] of Object.entries(Object.getOwnPropertyDescriptors(value))) {
    const { value: value2, get, set: set2, ...options } = description;
    const getIsFunc = get instanceof Function;
    const setIsFunc = set2 instanceof Function;
    if (getIsFunc || setIsFunc) {
      propertyDefinitions[key] = {
        ...options,
        get: get ? function(...args) {
          return get.apply(output2, args);
        } : void 0,
        set: set2 ? function(...args) {
          return set2.apply(output2, args);
        } : void 0
      };
    } else {
      if (key == "length" && output2 instanceof Array) {
        continue;
      }
      propertyDefinitions[key] = {
        ...options,
        value: deepCopyInner(value2, valueChain, originalToCopyMap)
      };
    }
  }
  Object.defineProperties(output2, propertyDefinitions);
  return output2;
}
var deepCopy = (value) => deepCopyInner(value);
var shallowSortObject = (obj) => {
  return Object.keys(obj).sort().reduce(
    (newObj, key) => {
      newObj[key] = obj[key];
      return newObj;
    },
    {}
  );
};
var deepSortObject = (obj, seen = /* @__PURE__ */ new Map()) => {
  if (!(obj instanceof Object)) {
    return obj;
  } else if (seen.has(obj)) {
    return seen.get(obj);
  } else {
    if (obj instanceof Array) {
      const sortedChildren = [];
      seen.set(obj, sortedChildren);
      for (const each2 of obj) {
        sortedChildren.push(deepSortObject(each2, seen));
      }
      return sortedChildren;
    } else {
      const sorted = {};
      seen.set(obj, sorted);
      for (const eachKey of Object.keys(obj).sort()) {
        sorted[eachKey] = deepSortObject(obj[eachKey], seen);
      }
      return sorted;
    }
  }
};
var stableStringify = (value, ...args) => {
  return JSON.stringify(deepSortObject(value), ...args);
};
var allKeys = function(obj) {
  let keys = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    keys = keys.concat(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return keys;
};
var ownKeyDescriptions = Object.getOwnPropertyDescriptors;
var allKeyDescriptions = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};

// https://deno.land/x/good@1.5.1.0/async.js
function deferredPromise() {
  let methods;
  let state = "pending";
  const promise = new Promise((resolve15, reject) => {
    methods = {
      async resolve(value) {
        await value;
        state = "fulfilled";
        resolve15(value);
      },
      reject(reason) {
        state = "rejected";
        reject(reason);
      }
    };
  });
  Object.defineProperty(promise, "state", {
    get: () => state
  });
  return Object.assign(promise, methods);
}
var objectPrototype = Object.getPrototypeOf({});

// https://deno.land/x/good@1.5.1.0/iterable.js
var emptyIterator = /* @__PURE__ */ function* () {
}();
var makeIterable = (object) => {
  if (object == null) {
    return emptyIterator;
  }
  if (object[Symbol.iterator] instanceof Function || object[Symbol.asyncIterator] instanceof Function) {
    return object;
  }
  if (Object.getPrototypeOf(object).constructor == Object) {
    return Object.entries(object);
  }
  return emptyIterator;
};
var Stop = Symbol("iterationStop");
var iter = (object) => {
  const iterable = makeIterable(object);
  if (iterable[Symbol.asyncIterator]) {
    return iterable[Symbol.asyncIterator]();
  } else {
    return iterable[Symbol.iterator]();
  }
};
async function asyncIteratorToList(asyncIterator) {
  const results = [];
  for await (const each2 of asyncIterator) {
    results.push(each2);
  }
  return results;
}
var zip = function* (...iterables) {
  iterables = iterables.map((each2) => iter(each2));
  while (true) {
    const nexts = iterables.map((each2) => each2.next());
    if (nexts.every((each2) => each2.done)) {
      break;
    }
    yield nexts.map((each2) => each2.value);
  }
};
var ERROR_WHILE_MAPPING_MESSAGE = "Threw while mapping.";
function concurrentlyTransform({ iterator, transformFunction, poolLimit = null, awaitAll = false }) {
  poolLimit = poolLimit || concurrentlyTransform.defaultPoolLimit;
  const res = new TransformStream({
    async transform(p, controller) {
      try {
        const s = await p;
        controller.enqueue(s);
      } catch (e) {
        if (e instanceof AggregateError && e.message == ERROR_WHILE_MAPPING_MESSAGE) {
          controller.error(e);
        }
      }
    }
  });
  const mainPromise = (async () => {
    const writer = res.writable.getWriter();
    const executing = [];
    try {
      let index = 0;
      for await (const item of iterator) {
        const p = Promise.resolve().then(() => transformFunction(item, index));
        index++;
        writer.write(p);
        const e = p.then(() => executing.splice(executing.indexOf(e), 1));
        executing.push(e);
        if (executing.length >= poolLimit) {
          await Promise.race(executing);
        }
      }
      await Promise.all(executing);
      writer.close();
    } catch {
      const errors = [];
      for (const result2 of await Promise.allSettled(executing)) {
        if (result2.status == "rejected") {
          errors.push(result2.reason);
        }
      }
      writer.write(Promise.reject(
        new AggregateError(errors, ERROR_WHILE_MAPPING_MESSAGE)
      )).catch(() => {
      });
    }
  })();
  const asyncIterator = res.readable[Symbol.asyncIterator]();
  if (!awaitAll) {
    return asyncIterator;
  } else {
    return mainPromise.then(() => asyncIteratorToList(asyncIterator));
  }
}
concurrentlyTransform.defaultPoolLimit = 40;

// https://deno.land/x/good@1.5.1.0/array.js
var zip2 = function(...iterables) {
  return [...zip(...iterables)];
};
var NamedArray = class extends Array {
  toJSON() {
    return { ...this };
  }
  toString() {
    return { ...this };
  }
  [Symbol.for("customInspect")]() {
    return { ...this };
  }
  [Symbol.for("Deno.customInspect")]() {
    return { ...this };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return { ...this };
  }
};

// https://deno.land/x/quickr@0.6.56/main/operating_system.js
var cache2 = {};
var stdoutRun = async (args) => {
  const process = Deno.run({ cmd: args, stdout: "piped", stderr: "piped" });
  const output2 = await process.output();
  return new TextDecoder().decode(output2).replace(/\n$/, "");
};
var OperatingSystem = {
  commonChecks: {
    isMac: Deno.build.os == "darwin",
    isWindows: Deno.build.os == "windows",
    isLinux: Deno.build.os == "linux",
    get isWsl() {
      if (cache2.isWsl != null) {
        return cache2.isWsl;
      }
      if (!(OperatingSystem.commonChecks.isMac || OperatingSystem.commonChecks.isWindows)) {
        if (Deno.env.get("WSLENV")) {
          return cache2.isWsl = true;
        }
        try {
          const { isFile } = Deno.lstatSync("/mnt/c");
          return cache2.isWsl = true;
        } catch (error) {
        }
      }
      return cache2.isWsl = false;
    }
  },
  commonName: {
    "darwin": "MacOS",
    "windows": "Windows",
    "linux": "Linux"
  }[Deno.build.os],
  kernel: {
    commonName: Deno.build.os
  },
  architecture: Deno.build.architecture,
  get versionArray() {
    return new Promise(async (resolve15, reject) => {
      let versionArray = [];
      if (OperatingSystem.commonChecks.isWindows) {
        try {
          const windowsVersionString = await stdoutRun(["pwsh", "-Command", `[System.Environment]::OSVersion.Version`]);
          versionArray = windowsVersionString.replace(/^[\w\W]*?(\d+\.\d+\.\d+)[\w\W]*/, "$1").split(".").map((each2) => each2 - 0);
        } catch (error) {
          console.warn(`unable to get version string for Windows: ${error.message}`);
        }
      } else if (OperatingSystem.commonChecks.isMac) {
        try {
          const macVersionString = await stdoutRun(["/usr/bin/sw_vers", "-productVersion"]);
          versionArray = macVersionString.replace(/^[\w\W]*?(\d+\.\d+(\.\d+)?)[\w\W]*/, "$1").split(".").map((each2) => each2 - 0);
        } catch (error) {
          console.warn(`unable to get version string for MacOS: ${error.message}`);
        }
      } else {
        try {
          const outputString = await stdoutRun(["uname", "-r"]);
          versionArray = outputString.replace(/^[\w\W]*?((\d+\.)+\d+)[\w\W]*/, "$1").split(".").map((each2) => each2 - 0);
        } catch (error) {
          console.warn(`unable to get version string for Linux: ${error.message}`);
        }
      }
    });
  },
  get username() {
    if (!cache2.username) {
      if (Deno.build.os != "windows") {
        cache2.username = Deno.env.get("USER");
      } else {
        cache2.username = Deno.env.get("USERNAME");
      }
    }
    return cache2.username;
  },
  get home() {
    if (!cache2.home) {
      if (Deno.build.os != "windows") {
        cache2.home = Deno.env.get("HOME");
      } else {
        cache2.home = Deno.env.get("HOMEPATH");
      }
    }
    return cache2.home;
  },
  async idForUsername(username) {
    if (OperatingSystem.commonChecks.isMac) {
      if (!cache2.macOsUserToUid) {
        const userListString = await stdoutRun(["dscl", ".", "-list", "/Users", "UniqueID"]);
        const userList = userListString.split(/\n/);
        const userNamesAndIds = userList.map((each2) => {
          const match = each2.match(/(.+?)(-?\d+)$/, "$1");
          if (match) {
            const username2 = match[1].trim();
            const uid = match[2];
            return [username2, uid];
          }
        }).filter((each2) => each2);
        const idsAndUsernames = userNamesAndIds.map(([username2, id]) => [id, username2]);
        cache2.macOsUserToUid = Object.fromEntries(userNamesAndIds);
        cache2.macOsUidToUser = Object.fromEntries(idsAndUsernames);
      }
      return cache2.macOsUserToUid[username];
    } else if (OperatingSystem.commonChecks.isWindows) {
      return await stdoutRun(["pwsh", "-Command", `Get-ADUser -Identity '${username.replace(/'/, "''")}' | select SID`]);
    } else if (OperatingSystem.commonChecks.isLinux) {
      return await stdoutRun(["id", "-u", OperatingSystem.username]);
    }
  }
};

// https://deno.land/x/good@1.3.0.4/value.js
var typedArrayClasses2 = [
  Uint16Array,
  Uint32Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Int32Array,
  Int8Array,
  Float32Array,
  Float64Array,
  globalThis.BigInt64Array,
  globalThis.BigUint64Array
].filter((each2) => each2);
var copyableClasses2 = /* @__PURE__ */ new Set([RegExp, Date, URL, ...typedArrayClasses2, globalThis.ArrayBuffer, globalThis.DataView]);
var IteratorPrototype2 = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
var ArrayIterator2 = Object.getPrototypeOf([][Symbol.iterator]);
var MapIterator2 = Object.getPrototypeOf((/* @__PURE__ */ new Map())[Symbol.iterator]);
var SetIterator2 = Object.getPrototypeOf((/* @__PURE__ */ new Set())[Symbol.iterator]);
var AsyncFunction2 = class {
};
var GeneratorFunction2 = class {
};
var AsyncGeneratorFunction2 = class {
};
var SyncGenerator2 = class {
};
var AsyncGenerator2 = class {
};
try {
  AsyncFunction2 = eval("(async function(){}).constructor");
  GeneratorFunction2 = eval("(function*(){}).constructor");
  AsyncGeneratorFunction2 = eval("(async function*(){}).constructor");
  SyncGenerator2 = eval("((function*(){})()).constructor");
  AsyncGenerator2 = eval("((async function*(){})()).constructor");
} catch (error) {
}
var isPrimitive2 = (value) => !(value instanceof Object);
var isPureObject2 = (value) => value instanceof Object && Object.getPrototypeOf(value).constructor == Object;
var isPracticallyPrimitive2 = (value) => isPrimitive2(value) || value instanceof Date || value instanceof RegExp || value instanceof URL;
var isBuiltInIterator2 = (value) => IteratorPrototype2.isPrototypeOf(value);
var isGeneratorType2 = (value) => {
  if (value instanceof Object) {
    if (isBuiltInIterator2(value)) {
      return true;
    }
    const constructor = value.constructor;
    return constructor == SyncGenerator2 || constructor == AsyncGenerator2;
  }
  return false;
};
var isAsyncIterable2 = function(value) {
  return value && typeof value[Symbol.asyncIterator] === "function";
};
var isSyncIterable2 = function(value) {
  return value && typeof value[Symbol.iterator] === "function";
};
var isTechnicallyIterable2 = function(value) {
  return value instanceof Object || typeof value == "string";
};
var isSyncIterableObjectOrContainer2 = function(value) {
  return value instanceof Object && typeof value[Symbol.iterator] == "function";
};
var deepCopySymbol2 = Symbol.for("deepCopy");
var clonedFromSymbol2 = Symbol();
var getThis2 = Symbol();
Object.getPrototypeOf(function() {
})[getThis2] = function() {
  return this;
};
function deepCopyInner2(value, valueChain = [], originalToCopyMap = /* @__PURE__ */ new Map()) {
  valueChain.push(value);
  if (value == null) {
    return value;
  }
  if (!(value instanceof Object)) {
    return value;
  }
  if (originalToCopyMap.has(value)) {
    return originalToCopyMap.get(value);
  }
  if (value[deepCopySymbol2] instanceof Function) {
    const clonedValue = value[deepCopySymbol2](originalToCopyMap);
    originalToCopyMap.set(value, clonedValue);
    return clonedValue;
  }
  if (isGeneratorType2(value)) {
    throw Error(`Sadly built-in generators cannot be deep copied.
And I found a generator along this path:
${valueChain.reverse().map((each2) => `${each2},
`)}`);
  }
  let object, theThis, thisCopy;
  if (value instanceof Date) {
    object = new Date(value.getTime());
  } else if (value instanceof RegExp) {
    object = new RegExp(value);
  } else if (value instanceof URL) {
    object = new URL(value);
  } else if (value instanceof Function) {
    theThis = value[getThis2]();
    object = value.bind(theThis);
  } else if (copyableClasses2.has(value.constructor)) {
    object = new value.constructor(value);
  } else if (value instanceof Array) {
    object = [];
  } else if (value instanceof Set) {
    object = /* @__PURE__ */ new Set();
  } else if (value instanceof Map) {
    object = /* @__PURE__ */ new Map();
  }
  originalToCopyMap.set(value, object);
  if (object instanceof Function) {
    thisCopy = deepCopyInner2(theThis, valueChain, originalToCopyMap);
    object = object.bind(thisCopy);
  }
  const output2 = object;
  try {
    output2.constructor = value.constructor;
  } catch (error) {
  }
  Object.setPrototypeOf(output2, Object.getPrototypeOf(value));
  const propertyDefinitions = {};
  for (const [key, description] of Object.entries(Object.getOwnPropertyDescriptors(value))) {
    const { value: value2, get, set: set2, ...options } = description;
    const getIsFunc = get instanceof Function;
    const setIsFunc = set2 instanceof Function;
    if (getIsFunc || setIsFunc) {
      propertyDefinitions[key] = {
        ...options,
        get: get ? function(...args) {
          return get.apply(output2, args);
        } : void 0,
        set: set2 ? function(...args) {
          return set2.apply(output2, args);
        } : void 0
      };
    } else {
      if (key == "length" && output2 instanceof Array) {
        continue;
      }
      propertyDefinitions[key] = {
        ...options,
        value: deepCopyInner2(value2, valueChain, originalToCopyMap)
      };
    }
  }
  Object.defineProperties(output2, propertyDefinitions);
  return output2;
}
var deepCopy2 = (value) => deepCopyInner2(value);
var shallowSortObject2 = (obj) => {
  return Object.keys(obj).sort().reduce(
    (newObj, key) => {
      newObj[key] = obj[key];
      return newObj;
    },
    {}
  );
};
var deepSortObject2 = (obj, seen = /* @__PURE__ */ new Map()) => {
  if (!(obj instanceof Object)) {
    return obj;
  } else if (seen.has(obj)) {
    return seen.get(obj);
  } else {
    if (obj instanceof Array) {
      const sortedChildren = [];
      seen.set(obj, sortedChildren);
      for (const each2 of obj) {
        sortedChildren.push(deepSortObject2(each2, seen));
      }
      return sortedChildren;
    } else {
      const sorted = {};
      seen.set(obj, sorted);
      for (const eachKey of Object.keys(obj).sort()) {
        sorted[eachKey] = deepSortObject2(obj[eachKey], seen);
      }
      return sorted;
    }
  }
};
var stableStringify2 = (value, ...args) => {
  return JSON.stringify(deepSortObject2(value), ...args);
};
var allKeys2 = function(obj) {
  let keys = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    keys = keys.concat(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return keys;
};
var ownKeyDescriptions2 = Object.getOwnPropertyDescriptors;
var allKeyDescriptions2 = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};

// https://deno.land/x/good@1.3.0.4/iterable.js
var emptyIterator2 = /* @__PURE__ */ function* () {
}();
var makeIterable2 = (object) => {
  if (object == null) {
    return emptyIterator2;
  }
  if (object[Symbol.iterator] instanceof Function || object[Symbol.asyncIterator] instanceof Function) {
    return object;
  }
  if (Object.getPrototypeOf(object).constructor == Object) {
    return Object.entries(object);
  }
  return emptyIterator2;
};
var iter2 = (object) => {
  const iterable = makeIterable2(object);
  if (iterable[Symbol.asyncIterator]) {
    return iterable[Symbol.asyncIterator]();
  } else {
    return iterable[Symbol.iterator]();
  }
};
var Stop2 = Symbol("iterationStop");
var zip3 = function* (...iterables) {
  iterables = iterables.map((each2) => iter2(each2));
  while (true) {
    const nexts = iterables.map((each2) => each2.next());
    if (nexts.every((each2) => each2.done)) {
      break;
    }
    yield nexts.map((each2) => each2.value);
  }
};
async function asyncIteratorToList2(asyncIterator) {
  const results = [];
  for await (const each2 of asyncIterator) {
    results.push(each2);
  }
  return results;
}
var ERROR_WHILE_MAPPING_MESSAGE2 = "Threw while mapping.";
function concurrentlyTransform2({ iterator, transformFunction, poolLimit = null, awaitAll = false }) {
  poolLimit = poolLimit || concurrentlyTransform2.defaultPoolLimit;
  const res = new TransformStream({
    async transform(p, controller) {
      try {
        const s = await p;
        controller.enqueue(s);
      } catch (e) {
        if (e instanceof AggregateError && e.message == ERROR_WHILE_MAPPING_MESSAGE2) {
          controller.error(e);
        }
      }
    }
  });
  const mainPromise = (async () => {
    const writer = res.writable.getWriter();
    const executing = [];
    try {
      let index = 0;
      for await (const item of iterator) {
        const p = Promise.resolve().then(() => transformFunction(item, index));
        index++;
        writer.write(p);
        const e = p.then(() => executing.splice(executing.indexOf(e), 1));
        executing.push(e);
        if (executing.length >= poolLimit) {
          await Promise.race(executing);
        }
      }
      await Promise.all(executing);
      writer.close();
    } catch {
      const errors = [];
      for (const result2 of await Promise.allSettled(executing)) {
        if (result2.status == "rejected") {
          errors.push(result2.reason);
        }
      }
      writer.write(Promise.reject(
        new AggregateError(errors, ERROR_WHILE_MAPPING_MESSAGE2)
      )).catch(() => {
      });
    }
  })();
  const asyncIterator = res.readable[Symbol.asyncIterator]();
  if (!awaitAll) {
    return asyncIterator;
  } else {
    return mainPromise.then(() => asyncIteratorToList2(asyncIterator));
  }
}
concurrentlyTransform2.defaultPoolLimit = 40;

// https://deno.land/x/good@1.3.0.4/string.js
var indent2 = ({ string: string2, by = "    ", noLead = false }) => (noLead ? "" : by) + string2.replace(/\n/g, "\n" + by);
var toString = (value) => {
  if (typeof value == "symbol") {
    return toRepresentation(value);
  } else if (!(value instanceof Object)) {
    return value != null ? value.toString() : `${value}`;
  } else {
    return toRepresentation(value);
  }
};
var reprSymbol = Symbol.for("representation");
var denoInspectSymbol = Symbol.for("Deno.customInspect");
var toRepresentation = (item) => {
  const alreadySeen = /* @__PURE__ */ new Set();
  const recursionWrapper = (item2) => {
    if (item2 instanceof Object) {
      if (alreadySeen.has(item2)) {
        return `[Self Reference]`;
      } else {
        alreadySeen.add(item2);
      }
    }
    let output2;
    if (item2 === void 0) {
      output2 = "undefined";
    } else if (item2 === null) {
      output2 = "null";
    } else if (typeof item2 == "string") {
      output2 = JSON.stringify(item2);
    } else if (typeof item2 == "symbol") {
      if (!item2.description) {
        output2 = "Symbol()";
      } else {
        const globalVersion = Symbol.for(item2.description);
        if (globalVersion == item2) {
          output2 = `Symbol.for(${JSON.stringify(item2.description)})`;
        } else {
          output2 = `Symbol(${JSON.stringify(item2.description)})`;
        }
      }
    } else if (item2 instanceof Date) {
      output2 = `new Date(${item2.getTime()})`;
    } else if (item2 instanceof Array) {
      output2 = `[${item2.map((each2) => recursionWrapper(each2)).join(",")}]`;
    } else if (item2 instanceof Set) {
      output2 = `new Set(${[...item2].map((each2) => recursionWrapper(each2)).join(",")})`;
    } else if (item2 instanceof Object && item2.constructor == Object) {
      output2 = pureObjectRepr(item2);
    } else if (item2 instanceof Map) {
      let string2 = "new Map(";
      for (const [key, value] of item2.entries()) {
        const stringKey = recursionWrapper(key);
        const stringValue = recursionWrapper(value);
        if (!stringKey.match(/\n/g)) {
          string2 += `
  [${stringKey}, ${indent2({ string: stringValue, by: "  ", noLead: true })}],`;
        } else {
          string2 += `
  [${indent2({ string: stringKey, by: "  ", noLead: true })},
  ${indent2({ string: stringValue, by: "    ", noLead: true })}],`;
        }
      }
      string2 += "\n)";
      output2 = string2;
    } else {
      if (item2[reprSymbol] instanceof Function) {
        try {
          output2 = item2[reprSymbol]();
          return output2;
        } catch (error) {
        }
      }
      if (item2[denoInspectSymbol] instanceof Function) {
        try {
          output2 = item2[denoInspectSymbol]();
          return output2;
        } catch (error) {
        }
      }
      try {
        output2 = item2.toString();
        if (output2 !== "[object Object]") {
          return output2;
        }
      } catch (error) {
      }
      try {
        if (item2.constructor instanceof Function && item2.prototype && typeof item2.name == "string") {
          output2 = `class ${item2.name} { /*...*/ }`;
          return output2;
        }
      } catch (error) {
      }
      try {
        if (item2.constructor instanceof Function && typeof item2.constructor.name == "string") {
          output2 = `new ${item2.constructor.name}(${pureObjectRepr(item2)})`;
          return output2;
        }
      } catch (error) {
      }
      return pureObjectRepr(item2);
    }
    return output2;
  };
  const pureObjectRepr = (item2) => {
    let string2 = "{";
    for (const [key, value] of Object.entries(item2)) {
      const stringKey = recursionWrapper(key);
      const stringValue = recursionWrapper(value);
      string2 += `
  ${stringKey}: ${indent2({ string: stringValue, by: "  ", noLead: true })},`;
    }
    string2 += "\n}";
    return string2;
  };
  return recursionWrapper(item);
};
function escapeRegexMatch(string2) {
  return string2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
var regexpProxy = Symbol("regexpProxy");
var realExec = RegExp.prototype.exec;
RegExp.prototype.exec = function(...args) {
  if (this[regexpProxy]) {
    return realExec.apply(this[regexpProxy], args);
  }
  return realExec.apply(this, args);
};
var proxyRegExp;
var regexProxyOptions = Object.freeze({
  get(original, key) {
    if (typeof key == "string" && key.match(/^[igymu]+$/)) {
      return proxyRegExp(original, key);
    }
    if (key == regexpProxy) {
      return original;
    }
    return original[key];
  },
  set(original, key, value) {
    original[key] = value;
    return true;
  }
});
proxyRegExp = (parent, flags) => {
  const regex3 = new RegExp(parent, flags);
  const output2 = new Proxy(regex3, regexProxyOptions);
  Object.setPrototypeOf(output2, Object.getPrototypeOf(regex3));
  return output2;
};
function regexWithStripWarning(shouldStrip) {
  return (strings, ...values) => {
    let newRegexString = "";
    for (const [string2, value] of zip3(strings, values)) {
      newRegexString += string2;
      if (value instanceof RegExp) {
        if (!shouldStrip && (value.ignoreCase || value.sticky || value.multiline || value.unicode)) {
          console.warn(`Warning: flags inside of regex:
    The RegExp trigging this warning is: ${value}
    When calling the regex interpolater (e.g. regex\`something\${stuff}\`)
    one of the \${} values (the one above) was a RegExp with a flag enabled
    e.g. /stuff/i  <- i = ignoreCase flag enabled
    When the /stuff/i gets interpolated, its going to loose its flags
    (thats what I'm warning you about)
    
    To disable/ignore this warning do:
        regex.stripFlags\`something\${/stuff/i}\`
    If you want to add flags to the output of regex\`something\${stuff}\` do:
        regex\`something\${stuff}\`.i   // ignoreCase
        regex\`something\${stuff}\`.ig  // ignoreCase and global
        regex\`something\${stuff}\`.gi  // functionally equivlent
`);
        }
        const regexContent = `${value}`.slice(1).replace(/\/.*$/, "");
        newRegexString += `(?:${regexContent})`;
      } else if (value != null) {
        newRegexString += escapeRegexMatch(toString(value));
      }
    }
    return proxyRegExp(newRegexString, "");
  };
}
var regex = regexWithStripWarning(false);
regex.stripFlags = regexWithStripWarning(true);
var textDecoder = new TextDecoder("utf-8");
var textEncoder = new TextEncoder("utf-8");
var utf8BytesToString = textDecoder.decode.bind(textDecoder);
var stringToUtf8Bytes = textEncoder.encode.bind(textEncoder);

// https://deno.land/x/quickr@0.6.56/main/console.js
var realConsole = globalThis.console;
var isBrowserContext = typeof document != "undefined" && typeof window != "undefined";
var env = null;
var originalThing = realConsole;
var symbolForConsoleLog = Symbol.for("console.log");
var proxySymbol = Symbol.for("Proxy");
var thisProxySymbol = Symbol("thisProxy");
globalThis.console = new Proxy(originalThing, {
  defineProperty: Reflect.defineProperty,
  getPrototypeOf: Reflect.getPrototypeOf,
  // Object.keys
  ownKeys(...args) {
    return Reflect.ownKeys(...args);
  },
  // function call (original value needs to be a function)
  apply(original, context, ...args) {
    console.log(args);
  },
  // new operator (original value needs to be a class)
  construct(...args) {
  },
  get(original, key, ...args) {
    if (key == proxySymbol || key == thisProxySymbol) {
      return true;
    }
    if (key == "log") {
      return (...args2) => {
        realConsole.log(
          ...args2.map((each2) => {
            if (each2 instanceof Object && each2[symbolForConsoleLog] instanceof Function) {
              return each2[symbolForConsoleLog]();
            }
            return each2;
          })
        );
      };
    }
    return Reflect.get(original, key, ...args);
  },
  set(original, key, ...args) {
    if (key == proxySymbol || key == thisProxySymbol) {
      return;
    }
    return Reflect.set(original, key, ...args);
  }
});
var codeToEscapeString = (code2) => `\x1B[${code2}m`;
var ansiRegexPattern = /[\u001B\u009B][[\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\d\/#&.:=?%@~_]+)*|[a-zA-Z\d]+(?:;[-a-zA-Z\d\/#&.:=?%@~_]*)*)?\u0007)|(?:(?:\d{1,4}(?:;\d{0,4})*)?[\dA-PR-TZcf-nq-uy=><~]))/g;
function clearAnsiStylesFrom(string2) {
  return `${string2}`.replace(ansiRegexPattern, "");
}
var styleStrings = {
  reset: codeToEscapeString(0),
  bold: codeToEscapeString(1),
  dim: codeToEscapeString(2),
  italic: codeToEscapeString(3),
  underline: codeToEscapeString(4),
  slowBlink: codeToEscapeString(5),
  // not widely supported
  fastBlink: codeToEscapeString(6),
  // not widely supported
  inverse: codeToEscapeString(7),
  strikethrough: codeToEscapeString(9),
  primary: codeToEscapeString(11),
  // forground colors
  black: codeToEscapeString(30),
  red: codeToEscapeString(31),
  green: codeToEscapeString(32),
  yellow: codeToEscapeString(33),
  blue: codeToEscapeString(34),
  magenta: codeToEscapeString(35),
  cyan: codeToEscapeString(36),
  white: codeToEscapeString(37),
  lightBlack: codeToEscapeString(90),
  lightRed: codeToEscapeString(91),
  lightGreen: codeToEscapeString(92),
  lightYellow: codeToEscapeString(93),
  lightBlue: codeToEscapeString(94),
  lightMagenta: codeToEscapeString(95),
  lightCyan: codeToEscapeString(96),
  lightWhite: codeToEscapeString(97),
  // background
  blackBackground: codeToEscapeString(40),
  redBackground: codeToEscapeString(41),
  greenBackground: codeToEscapeString(42),
  yellowBackground: codeToEscapeString(43),
  blueBackground: codeToEscapeString(44),
  magentaBackground: codeToEscapeString(45),
  cyanBackground: codeToEscapeString(46),
  whiteBackground: codeToEscapeString(47),
  lightBlackBackground: codeToEscapeString(100),
  lightRedBackground: codeToEscapeString(101),
  lightGreenBackground: codeToEscapeString(102),
  lightYellowBackground: codeToEscapeString(103),
  lightBlueBackground: codeToEscapeString(104),
  lightMagentaBackground: codeToEscapeString(105),
  lightCyanBackground: codeToEscapeString(106),
  lightWhiteBackground: codeToEscapeString(107)
};
Object.assign(styleStrings, {
  gray: styleStrings.lightBlack,
  grey: styleStrings.lightBlack,
  lightGray: styleStrings.white,
  // lightWhite is "true" white
  lightGrey: styleStrings.white,
  // lightWhite is "true" white
  grayBackground: styleStrings.lightBlackBackground,
  greyBackground: styleStrings.lightBlackBackground,
  lightGrayBackground: styleStrings.whiteBackground,
  lightGreyBackground: styleStrings.whiteBackground
});
var styleObjectSymbol = Symbol("consoleStyle");
var styleObject = (rootStyleString) => {
  const createStyleAccumulator = (styleString) => {
    const styleAccumulator = (strings, ...values) => {
      const objectToStyledString = (interpolatedValue, styles) => {
        let singleCombinedString2 = "";
        if (interpolatedValue instanceof Object && interpolatedValue[styleObjectSymbol] instanceof Function) {
          singleCombinedString2 += interpolatedValue[styleObjectSymbol]();
        } else {
          singleCombinedString2 += toString(interpolatedValue);
        }
        singleCombinedString2 += styleStrings.reset + styleAccumulator.styles.join("");
        return singleCombinedString2;
      };
      let singleCombinedString = "";
      if (!(strings instanceof Array) || strings.length < 1 || !strings.every((each2) => typeof each2 == "string")) {
        for (const each2 of [strings, ...values]) {
          singleCombinedString += objectToStyledString(each2);
        }
      } else {
        for (const index in values) {
          singleCombinedString += strings[index];
          singleCombinedString += objectToStyledString(values[index]);
        }
        const lastString = strings.slice(-1)[0];
        singleCombinedString += lastString;
      }
      styleAccumulator.sequence.push(singleCombinedString);
      return styleAccumulator;
    };
    styleAccumulator[styleObjectSymbol] = true;
    styleAccumulator.styles = [styleString];
    styleAccumulator.sequence = [styleString];
    styleAccumulator.toString = () => styleAccumulator.sequence.join("") + styleStrings.reset;
    styleAccumulator[Deno.customInspect] = () => styleAccumulator.sequence.join("") + styleStrings.reset;
    styleAccumulator[symbolForConsoleLog] = () => {
      const asString3 = styleAccumulator.toString();
      if (Console.reliableColorSupport.includesAnsi) {
        return asString3;
      } else {
        return clearAnsiStylesFrom(asString3);
      }
    };
    return Object.defineProperties(styleAccumulator, Object.fromEntries(Object.entries(styleStrings).map(
      ([key, value]) => [
        key,
        {
          get() {
            styleAccumulator.styles.push(value);
            styleAccumulator.sequence.push(value);
            return styleAccumulator;
          }
        }
      ]
    )));
  };
  const topLevelStyleAccumulator = (strings, ...values) => createStyleAccumulator(rootStyleString)(strings, ...values);
  topLevelStyleAccumulator[styleObjectSymbol] = true;
  topLevelStyleAccumulator.toString = () => rootStyleString;
  topLevelStyleAccumulator[symbolForConsoleLog] = () => {
    const asString3 = topLevelStyleAccumulator.toString();
    if (Console.reliableColorSupport.includesAnsi) {
      return asString3;
    } else {
      return clearAnsiStylesFrom(asString3);
    }
  };
  return Object.defineProperties(topLevelStyleAccumulator, Object.fromEntries(Object.entries(styleStrings).map(
    ([eachStyleName, eachStyleString]) => [
      eachStyleName,
      {
        get() {
          const styleAccumulator = createStyleAccumulator(rootStyleString);
          styleAccumulator.styles.push(eachStyleString);
          styleAccumulator.sequence.push(eachStyleString);
          return styleAccumulator;
        }
      }
    ]
  )));
};
var bold2 = styleObject(styleStrings.bold);
var reset2 = styleObject(styleStrings.reset);
var dim2 = styleObject(styleStrings.dim);
var italic2 = styleObject(styleStrings.italic);
var underline2 = styleObject(styleStrings.underline);
var inverse = styleObject(styleStrings.inverse);
var strikethrough = styleObject(styleStrings.strikethrough);
var black = styleObject(styleStrings.black);
var white = styleObject(styleStrings.white);
var red2 = styleObject(styleStrings.red);
var green2 = styleObject(styleStrings.green);
var blue = styleObject(styleStrings.blue);
var yellow2 = styleObject(styleStrings.yellow);
var cyan2 = styleObject(styleStrings.cyan);
var magenta = styleObject(styleStrings.magenta);
var lightBlack = styleObject(styleStrings.lightBlack);
var lightWhite = styleObject(styleStrings.lightWhite);
var lightRed = styleObject(styleStrings.lightRed);
var lightGreen = styleObject(styleStrings.lightGreen);
var lightBlue = styleObject(styleStrings.lightBlue);
var lightYellow = styleObject(styleStrings.lightYellow);
var lightMagenta = styleObject(styleStrings.lightMagenta);
var lightCyan = styleObject(styleStrings.lightCyan);
var blackBackground = styleObject(styleStrings.blackBackground);
var whiteBackground = styleObject(styleStrings.whiteBackground);
var redBackground = styleObject(styleStrings.redBackground);
var greenBackground = styleObject(styleStrings.greenBackground);
var blueBackground = styleObject(styleStrings.blueBackground);
var yellowBackground = styleObject(styleStrings.yellowBackground);
var magentaBackground = styleObject(styleStrings.magentaBackground);
var cyanBackground = styleObject(styleStrings.cyanBackground);
var lightBlackBackground = styleObject(styleStrings.lightBlackBackground);
var lightRedBackground = styleObject(styleStrings.lightRedBackground);
var lightGreenBackground = styleObject(styleStrings.lightGreenBackground);
var lightYellowBackground = styleObject(styleStrings.lightYellowBackground);
var lightBlueBackground = styleObject(styleStrings.lightBlueBackground);
var lightMagentaBackground = styleObject(styleStrings.lightMagentaBackground);
var lightCyanBackground = styleObject(styleStrings.lightCyanBackground);
var lightWhiteBackground = styleObject(styleStrings.lightWhiteBackground);
var gray = styleObject(styleStrings.gray);
var grey = styleObject(styleStrings.grey);
var lightGray = styleObject(styleStrings.lightGray);
var lightGrey = styleObject(styleStrings.lightGrey);
var grayBackground = styleObject(styleStrings.grayBackground);
var greyBackground = styleObject(styleStrings.greyBackground);
var lightGrayBackground = styleObject(styleStrings.lightGrayBackground);
var lightGreyBackground = styleObject(styleStrings.lightGreyBackground);
var colorSupportCache = {
  includesAnsi: null,
  includes256: null,
  includes16m: null
};
var Console = {
  // TODO: add signal handler
  // Deno.addSignalListener("SIGINT", (...args)=>{
  //     console.debug(`args is:`,args)
  // })
  log(...args) {
    if (args.length == 0) {
      console.log();
    }
    let [arg1, ...others] = args.map((each2) => {
      if (each2 instanceof Object && each2[symbolForConsoleLog] instanceof Function) {
        return each2[symbolForConsoleLog]();
      }
      return each2;
    });
    if (typeof arg1 == "string") {
      arg1 = arg1.replace("%", "%%");
    }
    if (!isBrowserContext) {
      if (!Console.reliableColorSupport.includesAnsi) {
        arg1 = clearAnsiStylesFrom(arg1);
        others = others.map((each2) => {
          if (typeof each2 == "string") {
            return clearAnsiStylesFrom(each2);
          } else {
            return each2;
          }
        });
      }
      realConsole.log(arg1, ...others);
    } else {
      if (args[0][symbolForConsoleLog] && typeof args[0].styleString == "string") {
        realConsole.log(`%c${arg1}${others.map((each2) => `${each2}`).join("")}`, args[0].styleString);
      } else {
        realConsole.log(arg1, ...others);
      }
    }
    return Console;
  },
  get env() {
    return env = env || new Proxy(
      Deno.env.toObject(),
      {
        // Object.keys
        ownKeys(target) {
          return Object.keys(Deno.env.toObject());
        },
        has(original, key) {
          if (typeof key === "symbol") {
            return false;
          } else {
            return Deno.env.get(key) !== void 0;
          }
        },
        get(original, key) {
          if (typeof key === "symbol") {
            return original[key];
          } else {
            return Deno.env.get(key);
          }
        },
        set(original, key, value) {
          original[key] = value;
          if (typeof key !== "symbol") {
            Deno.env.set(key, value);
          }
          return true;
        },
        deleteProperty(original, key) {
          if (typeof key === "symbol") {
            return void 0;
          } else {
            return Deno.env.delete(key);
          }
        }
      }
    );
  },
  disableColorIfNonIteractive: true,
  askFor: {
    // in the future once Deno.setRaw is stable, add a askFor.password using: https://github.com/caspervonb/deno-prompts
    line(question) {
      return prompt(question);
    },
    confirmation(question) {
      console.log(question);
      prompt("[use CTRL+C to quit, or press enter to continue]");
    },
    positiveIntegerOrZero(question) {
      while (1) {
        console.log(question);
        const answer = prompt(question);
        const asNumber = answer - 0;
        const isRealNumber = asNumber !== asNumber && asNumber * 2 !== asNumber;
        const isInteger2 = Math.round(asNumber) === asNumber;
        const isNonNegative = asNumber >= 0;
        if (isRealNumber && isInteger2 && isNonNegative) {
          return asNumber;
        } else {
          if (!isRealNumber) {
            console.log(`I don't think ${answer} is a real number, please try again`);
          }
          if (!isInteger2) {
            console.log(`I don't think ${answer} is an integer, please try again`);
          }
          if (!isNonNegative) {
            console.log(`I don't think ${answer} is \u2265 0, please try again`);
          }
        }
      }
    },
    yesNo(question) {
      while (true) {
        let answer = prompt(question);
        const match = `${answer}`.match(/^ *(y|yes|n|no) *\n?$/i);
        if (match) {
          if (match[1][0] == "y" || match[1][0] == "Y") {
            return true;
          } else {
            return false;
          }
        } else {
          console.log("[ please respond with y/n, yes/no, or use CTRL+C to cancel ]");
        }
      }
    },
    oneOf(keyValues, question = "Please type one of the names from the list above") {
      if (keyValues instanceof Array) {
        keyValues = Object.fromEntries(keyValues.map((each2, index) => [index, each2]));
      }
      const keys = Object.keys(keyValues);
      if (keys.length == 0) {
        console.warn(`Tried to perform Console.askFor.oneOf(object) but the object was empty`);
        return void 0;
      }
      const longest2 = Math.max(keys.map((each2) => each2.length));
      while (true) {
        for (const [key, value] of Object.entries(keyValues)) {
          const valueAsString = indent2({ string: `${value}
`, by: " ".repeat(longest2 + 2), noLead: true });
          console.log(``, `${key}: ${valueAsString}`);
        }
        let answer = prompt(question);
        if (keys.includes(answer)) {
          return keyValues[answer];
        } else {
          console.log("\n\n[ please pick one of the listed names, or use CTRL+C to cancel ]");
        }
      }
    }
  },
  get paths() {
    const spliter = OperatingSystem.commonChecks.isWindows ? ";" : ":";
    return Deno.env.get("PATH").split(spliter);
  },
  get reliableColorSupport() {
    if (colorSupportCache.includesAnsi != null) {
      return colorSupportCache;
    }
    let terminalSupport;
    if (!Deno.isatty(0)) {
      terminalSupport = {
        includesAnsi: false,
        includes256: false,
        includes16m: false
      };
    } else if ("NO_COLOR" in Console.env) {
      terminalSupport = {
        includesAnsi: false,
        includes256: false,
        includes16m: false
      };
    } else {
      if (OperatingSystem.commonChecks.isWindows || OperatingSystem.commonChecks.isWsl) {
        if (Deno.env.get("WT_SESSION")) {
          terminalSupport = {
            includesAnsi: true,
            includes256: true,
            includes16m: true
          };
        } else {
          terminalSupport = {
            includesAnsi: false,
            includes256: false,
            includes16m: false
          };
        }
      } else {
        if ("TERM_PROGRAM" in Console.env) {
          const version = Number.parseInt((Console.env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          if (Console.env.TERM_PROGRAM == "iTerm.app") {
            if (version >= 3) {
              terminalSupport = {
                includesAnsi: true,
                includes256: true,
                includes16m: true
              };
            } else {
              terminalSupport = {
                includesAnsi: true,
                includes256: true,
                includes16m: false
              };
            }
          } else if (Console.env.TERM_PROGRAM == "Apple_Terminal") {
            terminalSupport = {
              includesAnsi: true,
              includes256: true,
              includes16m: false
            };
          }
        }
        if (Console.env.TERM === "dumb") {
          terminalSupport = {
            includesAnsi: false,
            includes256: false,
            includes16m: false
          };
        } else if ("CI" in Console.env) {
          terminalSupport = {
            includesAnsi: ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE", "DRONE"].some((sign) => sign in Console.env) || Console.env.CI_NAME === "codeship",
            includes256: false,
            includes16m: false
          };
        } else if (Console.env.COLORTERM === "truecolor") {
          terminalSupport = {
            includesAnsi: true,
            includes256: true,
            includes16m: true
          };
        } else if (/-256(color)?$/i.test(Console.env.TERM)) {
          terminalSupport = {
            includesAnsi: true,
            includes256: true,
            includes16m: false
          };
        } else if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Console.env.TERM)) {
          terminalSupport = {
            includesAnsi: true,
            includes256: false,
            includes16m: false
          };
        } else if ("COLORTERM" in Console.env) {
          terminalSupport = {
            includesAnsi: true,
            includes256: false,
            includes16m: false
          };
        } else {
          terminalSupport = {
            includesAnsi: false,
            includes256: false,
            includes16m: false
          };
        }
      }
    }
    colorSupportCache.includesAnsi = terminalSupport.includesAnsi;
    colorSupportCache.includes256 = terminalSupport.includes256;
    colorSupportCache.includes16m = terminalSupport.includes16m;
    return colorSupportCache;
  }
};

// https://deno.land/x/ensure@v1.1.0/src/compare.ts
function isOutdated(minimumVersion, actualVersion) {
  const minimumVersionArr = minimumVersion.split(".");
  const actualVersionArr = actualVersion.split(".");
  versionCategoryEnumeration:
    for (let i2 = 0; i2 < minimumVersionArr.length; ++i2) {
      const minimumVersionCategoryNum = parseInt(minimumVersionArr[i2]);
      const actualVersionCategoryNum = parseInt(actualVersionArr[i2]);
      if (minimumVersionCategoryNum > actualVersionCategoryNum) {
        return true;
      } else if (minimumVersionCategoryNum === actualVersionCategoryNum) {
        continue versionCategoryEnumeration;
      } else {
        break versionCategoryEnumeration;
      }
    }
  return false;
}

// https://deno.land/x/ensure@v1.1.0/src/main.ts
var warn = (type, current2, expected) => `Your ${type} version is ${current2}, but at least version ${expected} is required. Please update to a later version of Deno. Thankies!`;
function ensure(ensureOptions) {
  const { deno: currentDeno, v8: currentV8, typescript: currentTypescript } = Deno.version;
  const {
    denoVersion: expectedDeno,
    v8Version: expectedV8,
    typescriptVersion: expectedTypescript
  } = ensureOptions;
  let atLeastOneOutdated = false;
  const ensureCategories = [
    ["Deno", currentDeno, expectedDeno],
    ["V8", currentV8, expectedV8],
    ["Typescript", currentTypescript, expectedTypescript]
  ];
  for (const [categoryName, currentVersion, expectedVersion] of ensureCategories) {
    if (!expectedVersion)
      continue;
    const isCategoryOutdated = isOutdated(expectedVersion, currentVersion);
    if (isCategoryOutdated) {
      console.info(warn(categoryName, currentVersion, expectedVersion));
      atLeastOneOutdated = true;
    }
  }
  if (atLeastOneOutdated) {
    Deno.exit(1);
  }
}

// https://deno.land/std@0.128.0/_util/os.ts
var osType = (() => {
  const { Deno: Deno4 } = globalThis;
  if (typeof Deno4?.build?.os === "string") {
    return Deno4.build.os;
  }
  const { navigator } = globalThis;
  if (navigator?.appVersion?.includes?.("Win") ?? false) {
    return "windows";
  }
  return "linux";
})();
var isWindows = osType === "windows";

// https://deno.land/std@0.128.0/path/win32.ts
var win32_exports = {};
__export(win32_exports, {
  basename: () => basename,
  delimiter: () => delimiter,
  dirname: () => dirname,
  extname: () => extname,
  format: () => format,
  fromFileUrl: () => fromFileUrl,
  isAbsolute: () => isAbsolute,
  join: () => join,
  normalize: () => normalize,
  parse: () => parse,
  relative: () => relative,
  resolve: () => resolve,
  sep: () => sep,
  toFileUrl: () => toFileUrl,
  toNamespacedPath: () => toNamespacedPath
});

// https://deno.land/std@0.128.0/path/_constants.ts
var CHAR_UPPERCASE_A = 65;
var CHAR_LOWERCASE_A = 97;
var CHAR_UPPERCASE_Z = 90;
var CHAR_LOWERCASE_Z = 122;
var CHAR_DOT = 46;
var CHAR_FORWARD_SLASH = 47;
var CHAR_BACKWARD_SLASH = 92;
var CHAR_COLON = 58;
var CHAR_QUESTION_MARK = 63;

// https://deno.land/std@0.128.0/path/_util.ts
function assertPath(path10) {
  if (typeof path10 !== "string") {
    throw new TypeError(
      `Path must be a string. Received ${JSON.stringify(path10)}`
    );
  }
}
function isPosixPathSeparator(code2) {
  return code2 === CHAR_FORWARD_SLASH;
}
function isPathSeparator(code2) {
  return isPosixPathSeparator(code2) || code2 === CHAR_BACKWARD_SLASH;
}
function isWindowsDeviceRoot(code2) {
  return code2 >= CHAR_LOWERCASE_A && code2 <= CHAR_LOWERCASE_Z || code2 >= CHAR_UPPERCASE_A && code2 <= CHAR_UPPERCASE_Z;
}
function normalizeString(path10, allowAboveRoot, separator, isPathSeparator6) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code2;
  for (let i2 = 0, len = path10.length; i2 <= len; ++i2) {
    if (i2 < len)
      code2 = path10.charCodeAt(i2);
    else if (isPathSeparator6(code2))
      break;
    else
      code2 = CHAR_FORWARD_SLASH;
    if (isPathSeparator6(code2)) {
      if (lastSlash === i2 - 1 || dots === 1) {
      } else if (lastSlash !== i2 - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf(separator);
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
            }
            lastSlash = i2;
            dots = 0;
            continue;
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i2;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += `${separator}..`;
          else
            res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += separator + path10.slice(lastSlash + 1, i2);
        else
          res = path10.slice(lastSlash + 1, i2);
        lastSegmentLength = i2 - lastSlash - 1;
      }
      lastSlash = i2;
      dots = 0;
    } else if (code2 === CHAR_DOT && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
function _format(sep15, pathObject) {
  const dir = pathObject.dir || pathObject.root;
  const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
  if (!dir)
    return base;
  if (dir === pathObject.root)
    return dir + base;
  return dir + sep15 + base;
}
var WHITESPACE_ENCODINGS = {
  "	": "%09",
  "\n": "%0A",
  "\v": "%0B",
  "\f": "%0C",
  "\r": "%0D",
  " ": "%20"
};
function encodeWhitespace(string2) {
  return string2.replaceAll(/[\s]/g, (c) => {
    return WHITESPACE_ENCODINGS[c] ?? c;
  });
}

// https://deno.land/std@0.128.0/_util/assert.ts
var DenoStdInternalError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "DenoStdInternalError";
  }
};
function assert2(expr, msg = "") {
  if (!expr) {
    throw new DenoStdInternalError(msg);
  }
}

// https://deno.land/std@0.128.0/path/win32.ts
var sep = "\\";
var delimiter = ";";
function resolve(...pathSegments) {
  let resolvedDevice = "";
  let resolvedTail = "";
  let resolvedAbsolute = false;
  for (let i2 = pathSegments.length - 1; i2 >= -1; i2--) {
    let path10;
    const { Deno: Deno4 } = globalThis;
    if (i2 >= 0) {
      path10 = pathSegments[i2];
    } else if (!resolvedDevice) {
      if (typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a drive-letter-less path without a CWD.");
      }
      path10 = Deno4.cwd();
    } else {
      if (typeof Deno4?.env?.get !== "function" || typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path10 = Deno4.cwd();
      if (path10 === void 0 || path10.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
        path10 = `${resolvedDevice}\\`;
      }
    }
    assertPath(path10);
    const len = path10.length;
    if (len === 0)
      continue;
    let rootEnd = 0;
    let device = "";
    let isAbsolute15 = false;
    const code2 = path10.charCodeAt(0);
    if (len > 1) {
      if (isPathSeparator(code2)) {
        isAbsolute15 = true;
        if (isPathSeparator(path10.charCodeAt(1))) {
          let j = 2;
          let last = j;
          for (; j < len; ++j) {
            if (isPathSeparator(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            const firstPart = path10.slice(last, j);
            last = j;
            for (; j < len; ++j) {
              if (!isPathSeparator(path10.charCodeAt(j)))
                break;
            }
            if (j < len && j !== last) {
              last = j;
              for (; j < len; ++j) {
                if (isPathSeparator(path10.charCodeAt(j)))
                  break;
              }
              if (j === len) {
                device = `\\\\${firstPart}\\${path10.slice(last)}`;
                rootEnd = j;
              } else if (j !== last) {
                device = `\\\\${firstPart}\\${path10.slice(last, j)}`;
                rootEnd = j;
              }
            }
          }
        } else {
          rootEnd = 1;
        }
      } else if (isWindowsDeviceRoot(code2)) {
        if (path10.charCodeAt(1) === CHAR_COLON) {
          device = path10.slice(0, 2);
          rootEnd = 2;
          if (len > 2) {
            if (isPathSeparator(path10.charCodeAt(2))) {
              isAbsolute15 = true;
              rootEnd = 3;
            }
          }
        }
      }
    } else if (isPathSeparator(code2)) {
      rootEnd = 1;
      isAbsolute15 = true;
    }
    if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      continue;
    }
    if (resolvedDevice.length === 0 && device.length > 0) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = `${path10.slice(rootEnd)}\\${resolvedTail}`;
      resolvedAbsolute = isAbsolute15;
    }
    if (resolvedAbsolute && resolvedDevice.length > 0)
      break;
  }
  resolvedTail = normalizeString(
    resolvedTail,
    !resolvedAbsolute,
    "\\",
    isPathSeparator
  );
  return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize(path10) {
  assertPath(path10);
  const len = path10.length;
  if (len === 0)
    return ".";
  let rootEnd = 0;
  let device;
  let isAbsolute15 = false;
  const code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator(code2)) {
      isAbsolute15 = true;
      if (isPathSeparator(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          const firstPart = path10.slice(last, j);
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              return `\\\\${firstPart}\\${path10.slice(last)}\\`;
            } else if (j !== last) {
              device = `\\\\${firstPart}\\${path10.slice(last, j)}`;
              rootEnd = j;
            }
          }
        }
      } else {
        rootEnd = 1;
      }
    } else if (isWindowsDeviceRoot(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON) {
        device = path10.slice(0, 2);
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator(path10.charCodeAt(2))) {
            isAbsolute15 = true;
            rootEnd = 3;
          }
        }
      }
    }
  } else if (isPathSeparator(code2)) {
    return "\\";
  }
  let tail;
  if (rootEnd < len) {
    tail = normalizeString(
      path10.slice(rootEnd),
      !isAbsolute15,
      "\\",
      isPathSeparator
    );
  } else {
    tail = "";
  }
  if (tail.length === 0 && !isAbsolute15)
    tail = ".";
  if (tail.length > 0 && isPathSeparator(path10.charCodeAt(len - 1))) {
    tail += "\\";
  }
  if (device === void 0) {
    if (isAbsolute15) {
      if (tail.length > 0)
        return `\\${tail}`;
      else
        return "\\";
    } else if (tail.length > 0) {
      return tail;
    } else {
      return "";
    }
  } else if (isAbsolute15) {
    if (tail.length > 0)
      return `${device}\\${tail}`;
    else
      return `${device}\\`;
  } else if (tail.length > 0) {
    return device + tail;
  } else {
    return device;
  }
}
function isAbsolute(path10) {
  assertPath(path10);
  const len = path10.length;
  if (len === 0)
    return false;
  const code2 = path10.charCodeAt(0);
  if (isPathSeparator(code2)) {
    return true;
  } else if (isWindowsDeviceRoot(code2)) {
    if (len > 2 && path10.charCodeAt(1) === CHAR_COLON) {
      if (isPathSeparator(path10.charCodeAt(2)))
        return true;
    }
  }
  return false;
}
function join(...paths) {
  const pathsCount = paths.length;
  if (pathsCount === 0)
    return ".";
  let joined;
  let firstPart = null;
  for (let i2 = 0; i2 < pathsCount; ++i2) {
    const path10 = paths[i2];
    assertPath(path10);
    if (path10.length > 0) {
      if (joined === void 0)
        joined = firstPart = path10;
      else
        joined += `\\${path10}`;
    }
  }
  if (joined === void 0)
    return ".";
  let needsReplace = true;
  let slashCount = 0;
  assert2(firstPart != null);
  if (isPathSeparator(firstPart.charCodeAt(0))) {
    ++slashCount;
    const firstLen = firstPart.length;
    if (firstLen > 1) {
      if (isPathSeparator(firstPart.charCodeAt(1))) {
        ++slashCount;
        if (firstLen > 2) {
          if (isPathSeparator(firstPart.charCodeAt(2)))
            ++slashCount;
          else {
            needsReplace = false;
          }
        }
      }
    }
  }
  if (needsReplace) {
    for (; slashCount < joined.length; ++slashCount) {
      if (!isPathSeparator(joined.charCodeAt(slashCount)))
        break;
    }
    if (slashCount >= 2)
      joined = `\\${joined.slice(slashCount)}`;
  }
  return normalize(joined);
}
function relative(from, to) {
  assertPath(from);
  assertPath(to);
  if (from === to)
    return "";
  const fromOrig = resolve(from);
  const toOrig = resolve(to);
  if (fromOrig === toOrig)
    return "";
  from = fromOrig.toLowerCase();
  to = toOrig.toLowerCase();
  if (from === to)
    return "";
  let fromStart = 0;
  let fromEnd = from.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH)
      break;
  }
  for (; fromEnd - 1 > fromStart; --fromEnd) {
    if (from.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH)
      break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 0;
  let toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH)
      break;
  }
  for (; toEnd - 1 > toStart; --toEnd) {
    if (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH)
      break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i2 = 0;
  for (; i2 <= length; ++i2) {
    if (i2 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i2) === CHAR_BACKWARD_SLASH) {
          return toOrig.slice(toStart + i2 + 1);
        } else if (i2 === 2) {
          return toOrig.slice(toStart + i2);
        }
      }
      if (fromLen > length) {
        if (from.charCodeAt(fromStart + i2) === CHAR_BACKWARD_SLASH) {
          lastCommonSep = i2;
        } else if (i2 === 2) {
          lastCommonSep = 3;
        }
      }
      break;
    }
    const fromCode = from.charCodeAt(fromStart + i2);
    const toCode = to.charCodeAt(toStart + i2);
    if (fromCode !== toCode)
      break;
    else if (fromCode === CHAR_BACKWARD_SLASH)
      lastCommonSep = i2;
  }
  if (i2 !== length && lastCommonSep === -1) {
    return toOrig;
  }
  let out = "";
  if (lastCommonSep === -1)
    lastCommonSep = 0;
  for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
    if (i2 === fromEnd || from.charCodeAt(i2) === CHAR_BACKWARD_SLASH) {
      if (out.length === 0)
        out += "..";
      else
        out += "\\..";
    }
  }
  if (out.length > 0) {
    return out + toOrig.slice(toStart + lastCommonSep, toEnd);
  } else {
    toStart += lastCommonSep;
    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH)
      ++toStart;
    return toOrig.slice(toStart, toEnd);
  }
}
function toNamespacedPath(path10) {
  if (typeof path10 !== "string")
    return path10;
  if (path10.length === 0)
    return "";
  const resolvedPath = resolve(path10);
  if (resolvedPath.length >= 3) {
    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {
      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {
        const code2 = resolvedPath.charCodeAt(2);
        if (code2 !== CHAR_QUESTION_MARK && code2 !== CHAR_DOT) {
          return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
        }
      }
    } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {
      if (resolvedPath.charCodeAt(1) === CHAR_COLON && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {
        return `\\\\?\\${resolvedPath}`;
      }
    }
  }
  return path10;
}
function dirname(path10) {
  assertPath(path10);
  const len = path10.length;
  if (len === 0)
    return ".";
  let rootEnd = -1;
  let end = -1;
  let matchedSlash = true;
  let offset = 0;
  const code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator(code2)) {
      rootEnd = offset = 1;
      if (isPathSeparator(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              return path10;
            }
            if (j !== last) {
              rootEnd = offset = j + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON) {
        rootEnd = offset = 2;
        if (len > 2) {
          if (isPathSeparator(path10.charCodeAt(2)))
            rootEnd = offset = 3;
        }
      }
    }
  } else if (isPathSeparator(code2)) {
    return path10;
  }
  for (let i2 = len - 1; i2 >= offset; --i2) {
    if (isPathSeparator(path10.charCodeAt(i2))) {
      if (!matchedSlash) {
        end = i2;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1) {
    if (rootEnd === -1)
      return ".";
    else
      end = rootEnd;
  }
  return path10.slice(0, end);
}
function basename(path10, ext = "") {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath(path10);
  let start = 0;
  let end = -1;
  let matchedSlash = true;
  let i2;
  if (path10.length >= 2) {
    const drive = path10.charCodeAt(0);
    if (isWindowsDeviceRoot(drive)) {
      if (path10.charCodeAt(1) === CHAR_COLON)
        start = 2;
    }
  }
  if (ext !== void 0 && ext.length > 0 && ext.length <= path10.length) {
    if (ext.length === path10.length && ext === path10)
      return "";
    let extIdx = ext.length - 1;
    let firstNonSlashEnd = -1;
    for (i2 = path10.length - 1; i2 >= start; --i2) {
      const code2 = path10.charCodeAt(i2);
      if (isPathSeparator(code2)) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd === -1) {
          matchedSlash = false;
          firstNonSlashEnd = i2 + 1;
        }
        if (extIdx >= 0) {
          if (code2 === ext.charCodeAt(extIdx)) {
            if (--extIdx === -1) {
              end = i2;
            }
          } else {
            extIdx = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end)
      end = firstNonSlashEnd;
    else if (end === -1)
      end = path10.length;
    return path10.slice(start, end);
  } else {
    for (i2 = path10.length - 1; i2 >= start; --i2) {
      if (isPathSeparator(path10.charCodeAt(i2))) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
    }
    if (end === -1)
      return "";
    return path10.slice(start, end);
  }
}
function extname(path10) {
  assertPath(path10);
  let start = 0;
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  if (path10.length >= 2 && path10.charCodeAt(1) === CHAR_COLON && isWindowsDeviceRoot(path10.charCodeAt(0))) {
    start = startPart = 2;
  }
  for (let i2 = path10.length - 1; i2 >= start; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (isPathSeparator(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path10.slice(startDot, end);
}
function format(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format("\\", pathObject);
}
function parse(path10) {
  assertPath(path10);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  const len = path10.length;
  if (len === 0)
    return ret;
  let rootEnd = 0;
  let code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator(code2)) {
      rootEnd = 1;
      if (isPathSeparator(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              rootEnd = j;
            } else if (j !== last) {
              rootEnd = j + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON) {
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator(path10.charCodeAt(2))) {
            if (len === 3) {
              ret.root = ret.dir = path10;
              return ret;
            }
            rootEnd = 3;
          }
        } else {
          ret.root = ret.dir = path10;
          return ret;
        }
      }
    }
  } else if (isPathSeparator(code2)) {
    ret.root = ret.dir = path10;
    return ret;
  }
  if (rootEnd > 0)
    ret.root = path10.slice(0, rootEnd);
  let startDot = -1;
  let startPart = rootEnd;
  let end = -1;
  let matchedSlash = true;
  let i2 = path10.length - 1;
  let preDotState = 0;
  for (; i2 >= rootEnd; --i2) {
    code2 = path10.charCodeAt(i2);
    if (isPathSeparator(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      ret.base = ret.name = path10.slice(startPart, end);
    }
  } else {
    ret.name = path10.slice(startPart, startDot);
    ret.base = path10.slice(startPart, end);
    ret.ext = path10.slice(startDot, end);
  }
  if (startPart > 0 && startPart !== rootEnd) {
    ret.dir = path10.slice(0, startPart - 1);
  } else
    ret.dir = ret.root;
  return ret;
}
function fromFileUrl(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  let path10 = decodeURIComponent(
    url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  ).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
  if (url.hostname != "") {
    path10 = `\\\\${url.hostname}${path10}`;
  }
  return path10;
}
function toFileUrl(path10) {
  if (!isAbsolute(path10)) {
    throw new TypeError("Must be an absolute path.");
  }
  const [, hostname, pathname] = path10.match(
    /^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/
  );
  const url = new URL("file:///");
  url.pathname = encodeWhitespace(pathname.replace(/%/g, "%25"));
  if (hostname != null && hostname != "localhost") {
    url.hostname = hostname;
    if (!url.hostname) {
      throw new TypeError("Invalid hostname.");
    }
  }
  return url;
}

// https://deno.land/std@0.128.0/path/posix.ts
var posix_exports = {};
__export(posix_exports, {
  basename: () => basename2,
  delimiter: () => delimiter2,
  dirname: () => dirname2,
  extname: () => extname2,
  format: () => format2,
  fromFileUrl: () => fromFileUrl2,
  isAbsolute: () => isAbsolute2,
  join: () => join2,
  normalize: () => normalize2,
  parse: () => parse2,
  relative: () => relative2,
  resolve: () => resolve2,
  sep: () => sep2,
  toFileUrl: () => toFileUrl2,
  toNamespacedPath: () => toNamespacedPath2
});
var sep2 = "/";
var delimiter2 = ":";
function resolve2(...pathSegments) {
  let resolvedPath = "";
  let resolvedAbsolute = false;
  for (let i2 = pathSegments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
    let path10;
    if (i2 >= 0)
      path10 = pathSegments[i2];
    else {
      const { Deno: Deno4 } = globalThis;
      if (typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path10 = Deno4.cwd();
    }
    assertPath(path10);
    if (path10.length === 0) {
      continue;
    }
    resolvedPath = `${path10}/${resolvedPath}`;
    resolvedAbsolute = path10.charCodeAt(0) === CHAR_FORWARD_SLASH;
  }
  resolvedPath = normalizeString(
    resolvedPath,
    !resolvedAbsolute,
    "/",
    isPosixPathSeparator
  );
  if (resolvedAbsolute) {
    if (resolvedPath.length > 0)
      return `/${resolvedPath}`;
    else
      return "/";
  } else if (resolvedPath.length > 0)
    return resolvedPath;
  else
    return ".";
}
function normalize2(path10) {
  assertPath(path10);
  if (path10.length === 0)
    return ".";
  const isAbsolute15 = path10.charCodeAt(0) === CHAR_FORWARD_SLASH;
  const trailingSeparator = path10.charCodeAt(path10.length - 1) === CHAR_FORWARD_SLASH;
  path10 = normalizeString(path10, !isAbsolute15, "/", isPosixPathSeparator);
  if (path10.length === 0 && !isAbsolute15)
    path10 = ".";
  if (path10.length > 0 && trailingSeparator)
    path10 += "/";
  if (isAbsolute15)
    return `/${path10}`;
  return path10;
}
function isAbsolute2(path10) {
  assertPath(path10);
  return path10.length > 0 && path10.charCodeAt(0) === CHAR_FORWARD_SLASH;
}
function join2(...paths) {
  if (paths.length === 0)
    return ".";
  let joined;
  for (let i2 = 0, len = paths.length; i2 < len; ++i2) {
    const path10 = paths[i2];
    assertPath(path10);
    if (path10.length > 0) {
      if (!joined)
        joined = path10;
      else
        joined += `/${path10}`;
    }
  }
  if (!joined)
    return ".";
  return normalize2(joined);
}
function relative2(from, to) {
  assertPath(from);
  assertPath(to);
  if (from === to)
    return "";
  from = resolve2(from);
  to = resolve2(to);
  if (from === to)
    return "";
  let fromStart = 1;
  const fromEnd = from.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH)
      break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 1;
  const toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH)
      break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i2 = 0;
  for (; i2 <= length; ++i2) {
    if (i2 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i2) === CHAR_FORWARD_SLASH) {
          return to.slice(toStart + i2 + 1);
        } else if (i2 === 0) {
          return to.slice(toStart + i2);
        }
      } else if (fromLen > length) {
        if (from.charCodeAt(fromStart + i2) === CHAR_FORWARD_SLASH) {
          lastCommonSep = i2;
        } else if (i2 === 0) {
          lastCommonSep = 0;
        }
      }
      break;
    }
    const fromCode = from.charCodeAt(fromStart + i2);
    const toCode = to.charCodeAt(toStart + i2);
    if (fromCode !== toCode)
      break;
    else if (fromCode === CHAR_FORWARD_SLASH)
      lastCommonSep = i2;
  }
  let out = "";
  for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
    if (i2 === fromEnd || from.charCodeAt(i2) === CHAR_FORWARD_SLASH) {
      if (out.length === 0)
        out += "..";
      else
        out += "/..";
    }
  }
  if (out.length > 0)
    return out + to.slice(toStart + lastCommonSep);
  else {
    toStart += lastCommonSep;
    if (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH)
      ++toStart;
    return to.slice(toStart);
  }
}
function toNamespacedPath2(path10) {
  return path10;
}
function dirname2(path10) {
  assertPath(path10);
  if (path10.length === 0)
    return ".";
  const hasRoot = path10.charCodeAt(0) === CHAR_FORWARD_SLASH;
  let end = -1;
  let matchedSlash = true;
  for (let i2 = path10.length - 1; i2 >= 1; --i2) {
    if (path10.charCodeAt(i2) === CHAR_FORWARD_SLASH) {
      if (!matchedSlash) {
        end = i2;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1)
    return hasRoot ? "/" : ".";
  if (hasRoot && end === 1)
    return "//";
  return path10.slice(0, end);
}
function basename2(path10, ext = "") {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath(path10);
  let start = 0;
  let end = -1;
  let matchedSlash = true;
  let i2;
  if (ext !== void 0 && ext.length > 0 && ext.length <= path10.length) {
    if (ext.length === path10.length && ext === path10)
      return "";
    let extIdx = ext.length - 1;
    let firstNonSlashEnd = -1;
    for (i2 = path10.length - 1; i2 >= 0; --i2) {
      const code2 = path10.charCodeAt(i2);
      if (code2 === CHAR_FORWARD_SLASH) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd === -1) {
          matchedSlash = false;
          firstNonSlashEnd = i2 + 1;
        }
        if (extIdx >= 0) {
          if (code2 === ext.charCodeAt(extIdx)) {
            if (--extIdx === -1) {
              end = i2;
            }
          } else {
            extIdx = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end)
      end = firstNonSlashEnd;
    else if (end === -1)
      end = path10.length;
    return path10.slice(start, end);
  } else {
    for (i2 = path10.length - 1; i2 >= 0; --i2) {
      if (path10.charCodeAt(i2) === CHAR_FORWARD_SLASH) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
    }
    if (end === -1)
      return "";
    return path10.slice(start, end);
  }
}
function extname2(path10) {
  assertPath(path10);
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  for (let i2 = path10.length - 1; i2 >= 0; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (code2 === CHAR_FORWARD_SLASH) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path10.slice(startDot, end);
}
function format2(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format("/", pathObject);
}
function parse2(path10) {
  assertPath(path10);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  if (path10.length === 0)
    return ret;
  const isAbsolute15 = path10.charCodeAt(0) === CHAR_FORWARD_SLASH;
  let start;
  if (isAbsolute15) {
    ret.root = "/";
    start = 1;
  } else {
    start = 0;
  }
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let i2 = path10.length - 1;
  let preDotState = 0;
  for (; i2 >= start; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (code2 === CHAR_FORWARD_SLASH) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      if (startPart === 0 && isAbsolute15) {
        ret.base = ret.name = path10.slice(1, end);
      } else {
        ret.base = ret.name = path10.slice(startPart, end);
      }
    }
  } else {
    if (startPart === 0 && isAbsolute15) {
      ret.name = path10.slice(1, startDot);
      ret.base = path10.slice(1, end);
    } else {
      ret.name = path10.slice(startPart, startDot);
      ret.base = path10.slice(startPart, end);
    }
    ret.ext = path10.slice(startDot, end);
  }
  if (startPart > 0)
    ret.dir = path10.slice(0, startPart - 1);
  else if (isAbsolute15)
    ret.dir = "/";
  return ret;
}
function fromFileUrl2(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  return decodeURIComponent(
    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  );
}
function toFileUrl2(path10) {
  if (!isAbsolute2(path10)) {
    throw new TypeError("Must be an absolute path.");
  }
  const url = new URL("file:///");
  url.pathname = encodeWhitespace(
    path10.replace(/%/g, "%25").replace(/\\/g, "%5C")
  );
  return url;
}

// https://deno.land/std@0.128.0/path/glob.ts
var path = isWindows ? win32_exports : posix_exports;
var { join: join3, normalize: normalize3 } = path;

// https://deno.land/std@0.128.0/path/mod.ts
var path2 = isWindows ? win32_exports : posix_exports;
var {
  basename: basename3,
  delimiter: delimiter3,
  dirname: dirname3,
  extname: extname3,
  format: format3,
  fromFileUrl: fromFileUrl3,
  isAbsolute: isAbsolute3,
  join: join4,
  normalize: normalize4,
  parse: parse3,
  relative: relative3,
  resolve: resolve3,
  sep: sep3,
  toFileUrl: toFileUrl3,
  toNamespacedPath: toNamespacedPath3
} = path2;

// https://deno.land/std@0.133.0/_util/os.ts
var osType2 = (() => {
  const { Deno: Deno4 } = globalThis;
  if (typeof Deno4?.build?.os === "string") {
    return Deno4.build.os;
  }
  const { navigator } = globalThis;
  if (navigator?.appVersion?.includes?.("Win") ?? false) {
    return "windows";
  }
  return "linux";
})();
var isWindows2 = osType2 === "windows";

// https://deno.land/std@0.133.0/path/win32.ts
var win32_exports2 = {};
__export(win32_exports2, {
  basename: () => basename4,
  delimiter: () => delimiter4,
  dirname: () => dirname4,
  extname: () => extname4,
  format: () => format4,
  fromFileUrl: () => fromFileUrl4,
  isAbsolute: () => isAbsolute4,
  join: () => join5,
  normalize: () => normalize5,
  parse: () => parse4,
  relative: () => relative4,
  resolve: () => resolve4,
  sep: () => sep4,
  toFileUrl: () => toFileUrl4,
  toNamespacedPath: () => toNamespacedPath4
});

// https://deno.land/std@0.133.0/path/_constants.ts
var CHAR_UPPERCASE_A2 = 65;
var CHAR_LOWERCASE_A2 = 97;
var CHAR_UPPERCASE_Z2 = 90;
var CHAR_LOWERCASE_Z2 = 122;
var CHAR_DOT2 = 46;
var CHAR_FORWARD_SLASH2 = 47;
var CHAR_BACKWARD_SLASH2 = 92;
var CHAR_COLON2 = 58;
var CHAR_QUESTION_MARK2 = 63;

// https://deno.land/std@0.133.0/path/_util.ts
function assertPath2(path10) {
  if (typeof path10 !== "string") {
    throw new TypeError(
      `Path must be a string. Received ${JSON.stringify(path10)}`
    );
  }
}
function isPosixPathSeparator2(code2) {
  return code2 === CHAR_FORWARD_SLASH2;
}
function isPathSeparator2(code2) {
  return isPosixPathSeparator2(code2) || code2 === CHAR_BACKWARD_SLASH2;
}
function isWindowsDeviceRoot2(code2) {
  return code2 >= CHAR_LOWERCASE_A2 && code2 <= CHAR_LOWERCASE_Z2 || code2 >= CHAR_UPPERCASE_A2 && code2 <= CHAR_UPPERCASE_Z2;
}
function normalizeString2(path10, allowAboveRoot, separator, isPathSeparator6) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code2;
  for (let i2 = 0, len = path10.length; i2 <= len; ++i2) {
    if (i2 < len)
      code2 = path10.charCodeAt(i2);
    else if (isPathSeparator6(code2))
      break;
    else
      code2 = CHAR_FORWARD_SLASH2;
    if (isPathSeparator6(code2)) {
      if (lastSlash === i2 - 1 || dots === 1) {
      } else if (lastSlash !== i2 - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT2 || res.charCodeAt(res.length - 2) !== CHAR_DOT2) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf(separator);
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
            }
            lastSlash = i2;
            dots = 0;
            continue;
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i2;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += `${separator}..`;
          else
            res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += separator + path10.slice(lastSlash + 1, i2);
        else
          res = path10.slice(lastSlash + 1, i2);
        lastSegmentLength = i2 - lastSlash - 1;
      }
      lastSlash = i2;
      dots = 0;
    } else if (code2 === CHAR_DOT2 && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
function _format2(sep15, pathObject) {
  const dir = pathObject.dir || pathObject.root;
  const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
  if (!dir)
    return base;
  if (dir === pathObject.root)
    return dir + base;
  return dir + sep15 + base;
}
var WHITESPACE_ENCODINGS2 = {
  "	": "%09",
  "\n": "%0A",
  "\v": "%0B",
  "\f": "%0C",
  "\r": "%0D",
  " ": "%20"
};
function encodeWhitespace2(string2) {
  return string2.replaceAll(/[\s]/g, (c) => {
    return WHITESPACE_ENCODINGS2[c] ?? c;
  });
}

// https://deno.land/std@0.133.0/_util/assert.ts
var DenoStdInternalError2 = class extends Error {
  constructor(message) {
    super(message);
    this.name = "DenoStdInternalError";
  }
};
function assert3(expr, msg = "") {
  if (!expr) {
    throw new DenoStdInternalError2(msg);
  }
}

// https://deno.land/std@0.133.0/path/win32.ts
var sep4 = "\\";
var delimiter4 = ";";
function resolve4(...pathSegments) {
  let resolvedDevice = "";
  let resolvedTail = "";
  let resolvedAbsolute = false;
  for (let i2 = pathSegments.length - 1; i2 >= -1; i2--) {
    let path10;
    const { Deno: Deno4 } = globalThis;
    if (i2 >= 0) {
      path10 = pathSegments[i2];
    } else if (!resolvedDevice) {
      if (typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a drive-letter-less path without a CWD.");
      }
      path10 = Deno4.cwd();
    } else {
      if (typeof Deno4?.env?.get !== "function" || typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path10 = Deno4.cwd();
      if (path10 === void 0 || path10.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
        path10 = `${resolvedDevice}\\`;
      }
    }
    assertPath2(path10);
    const len = path10.length;
    if (len === 0)
      continue;
    let rootEnd = 0;
    let device = "";
    let isAbsolute15 = false;
    const code2 = path10.charCodeAt(0);
    if (len > 1) {
      if (isPathSeparator2(code2)) {
        isAbsolute15 = true;
        if (isPathSeparator2(path10.charCodeAt(1))) {
          let j = 2;
          let last = j;
          for (; j < len; ++j) {
            if (isPathSeparator2(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            const firstPart = path10.slice(last, j);
            last = j;
            for (; j < len; ++j) {
              if (!isPathSeparator2(path10.charCodeAt(j)))
                break;
            }
            if (j < len && j !== last) {
              last = j;
              for (; j < len; ++j) {
                if (isPathSeparator2(path10.charCodeAt(j)))
                  break;
              }
              if (j === len) {
                device = `\\\\${firstPart}\\${path10.slice(last)}`;
                rootEnd = j;
              } else if (j !== last) {
                device = `\\\\${firstPart}\\${path10.slice(last, j)}`;
                rootEnd = j;
              }
            }
          }
        } else {
          rootEnd = 1;
        }
      } else if (isWindowsDeviceRoot2(code2)) {
        if (path10.charCodeAt(1) === CHAR_COLON2) {
          device = path10.slice(0, 2);
          rootEnd = 2;
          if (len > 2) {
            if (isPathSeparator2(path10.charCodeAt(2))) {
              isAbsolute15 = true;
              rootEnd = 3;
            }
          }
        }
      }
    } else if (isPathSeparator2(code2)) {
      rootEnd = 1;
      isAbsolute15 = true;
    }
    if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      continue;
    }
    if (resolvedDevice.length === 0 && device.length > 0) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = `${path10.slice(rootEnd)}\\${resolvedTail}`;
      resolvedAbsolute = isAbsolute15;
    }
    if (resolvedAbsolute && resolvedDevice.length > 0)
      break;
  }
  resolvedTail = normalizeString2(
    resolvedTail,
    !resolvedAbsolute,
    "\\",
    isPathSeparator2
  );
  return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize5(path10) {
  assertPath2(path10);
  const len = path10.length;
  if (len === 0)
    return ".";
  let rootEnd = 0;
  let device;
  let isAbsolute15 = false;
  const code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator2(code2)) {
      isAbsolute15 = true;
      if (isPathSeparator2(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator2(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          const firstPart = path10.slice(last, j);
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator2(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator2(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              return `\\\\${firstPart}\\${path10.slice(last)}\\`;
            } else if (j !== last) {
              device = `\\\\${firstPart}\\${path10.slice(last, j)}`;
              rootEnd = j;
            }
          }
        }
      } else {
        rootEnd = 1;
      }
    } else if (isWindowsDeviceRoot2(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON2) {
        device = path10.slice(0, 2);
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator2(path10.charCodeAt(2))) {
            isAbsolute15 = true;
            rootEnd = 3;
          }
        }
      }
    }
  } else if (isPathSeparator2(code2)) {
    return "\\";
  }
  let tail;
  if (rootEnd < len) {
    tail = normalizeString2(
      path10.slice(rootEnd),
      !isAbsolute15,
      "\\",
      isPathSeparator2
    );
  } else {
    tail = "";
  }
  if (tail.length === 0 && !isAbsolute15)
    tail = ".";
  if (tail.length > 0 && isPathSeparator2(path10.charCodeAt(len - 1))) {
    tail += "\\";
  }
  if (device === void 0) {
    if (isAbsolute15) {
      if (tail.length > 0)
        return `\\${tail}`;
      else
        return "\\";
    } else if (tail.length > 0) {
      return tail;
    } else {
      return "";
    }
  } else if (isAbsolute15) {
    if (tail.length > 0)
      return `${device}\\${tail}`;
    else
      return `${device}\\`;
  } else if (tail.length > 0) {
    return device + tail;
  } else {
    return device;
  }
}
function isAbsolute4(path10) {
  assertPath2(path10);
  const len = path10.length;
  if (len === 0)
    return false;
  const code2 = path10.charCodeAt(0);
  if (isPathSeparator2(code2)) {
    return true;
  } else if (isWindowsDeviceRoot2(code2)) {
    if (len > 2 && path10.charCodeAt(1) === CHAR_COLON2) {
      if (isPathSeparator2(path10.charCodeAt(2)))
        return true;
    }
  }
  return false;
}
function join5(...paths) {
  const pathsCount = paths.length;
  if (pathsCount === 0)
    return ".";
  let joined;
  let firstPart = null;
  for (let i2 = 0; i2 < pathsCount; ++i2) {
    const path10 = paths[i2];
    assertPath2(path10);
    if (path10.length > 0) {
      if (joined === void 0)
        joined = firstPart = path10;
      else
        joined += `\\${path10}`;
    }
  }
  if (joined === void 0)
    return ".";
  let needsReplace = true;
  let slashCount = 0;
  assert3(firstPart != null);
  if (isPathSeparator2(firstPart.charCodeAt(0))) {
    ++slashCount;
    const firstLen = firstPart.length;
    if (firstLen > 1) {
      if (isPathSeparator2(firstPart.charCodeAt(1))) {
        ++slashCount;
        if (firstLen > 2) {
          if (isPathSeparator2(firstPart.charCodeAt(2)))
            ++slashCount;
          else {
            needsReplace = false;
          }
        }
      }
    }
  }
  if (needsReplace) {
    for (; slashCount < joined.length; ++slashCount) {
      if (!isPathSeparator2(joined.charCodeAt(slashCount)))
        break;
    }
    if (slashCount >= 2)
      joined = `\\${joined.slice(slashCount)}`;
  }
  return normalize5(joined);
}
function relative4(from, to) {
  assertPath2(from);
  assertPath2(to);
  if (from === to)
    return "";
  const fromOrig = resolve4(from);
  const toOrig = resolve4(to);
  if (fromOrig === toOrig)
    return "";
  from = fromOrig.toLowerCase();
  to = toOrig.toLowerCase();
  if (from === to)
    return "";
  let fromStart = 0;
  let fromEnd = from.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH2)
      break;
  }
  for (; fromEnd - 1 > fromStart; --fromEnd) {
    if (from.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH2)
      break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 0;
  let toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH2)
      break;
  }
  for (; toEnd - 1 > toStart; --toEnd) {
    if (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH2)
      break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i2 = 0;
  for (; i2 <= length; ++i2) {
    if (i2 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i2) === CHAR_BACKWARD_SLASH2) {
          return toOrig.slice(toStart + i2 + 1);
        } else if (i2 === 2) {
          return toOrig.slice(toStart + i2);
        }
      }
      if (fromLen > length) {
        if (from.charCodeAt(fromStart + i2) === CHAR_BACKWARD_SLASH2) {
          lastCommonSep = i2;
        } else if (i2 === 2) {
          lastCommonSep = 3;
        }
      }
      break;
    }
    const fromCode = from.charCodeAt(fromStart + i2);
    const toCode = to.charCodeAt(toStart + i2);
    if (fromCode !== toCode)
      break;
    else if (fromCode === CHAR_BACKWARD_SLASH2)
      lastCommonSep = i2;
  }
  if (i2 !== length && lastCommonSep === -1) {
    return toOrig;
  }
  let out = "";
  if (lastCommonSep === -1)
    lastCommonSep = 0;
  for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
    if (i2 === fromEnd || from.charCodeAt(i2) === CHAR_BACKWARD_SLASH2) {
      if (out.length === 0)
        out += "..";
      else
        out += "\\..";
    }
  }
  if (out.length > 0) {
    return out + toOrig.slice(toStart + lastCommonSep, toEnd);
  } else {
    toStart += lastCommonSep;
    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH2)
      ++toStart;
    return toOrig.slice(toStart, toEnd);
  }
}
function toNamespacedPath4(path10) {
  if (typeof path10 !== "string")
    return path10;
  if (path10.length === 0)
    return "";
  const resolvedPath = resolve4(path10);
  if (resolvedPath.length >= 3) {
    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH2) {
      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH2) {
        const code2 = resolvedPath.charCodeAt(2);
        if (code2 !== CHAR_QUESTION_MARK2 && code2 !== CHAR_DOT2) {
          return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
        }
      }
    } else if (isWindowsDeviceRoot2(resolvedPath.charCodeAt(0))) {
      if (resolvedPath.charCodeAt(1) === CHAR_COLON2 && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH2) {
        return `\\\\?\\${resolvedPath}`;
      }
    }
  }
  return path10;
}
function dirname4(path10) {
  assertPath2(path10);
  const len = path10.length;
  if (len === 0)
    return ".";
  let rootEnd = -1;
  let end = -1;
  let matchedSlash = true;
  let offset = 0;
  const code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator2(code2)) {
      rootEnd = offset = 1;
      if (isPathSeparator2(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator2(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator2(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator2(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              return path10;
            }
            if (j !== last) {
              rootEnd = offset = j + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot2(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON2) {
        rootEnd = offset = 2;
        if (len > 2) {
          if (isPathSeparator2(path10.charCodeAt(2)))
            rootEnd = offset = 3;
        }
      }
    }
  } else if (isPathSeparator2(code2)) {
    return path10;
  }
  for (let i2 = len - 1; i2 >= offset; --i2) {
    if (isPathSeparator2(path10.charCodeAt(i2))) {
      if (!matchedSlash) {
        end = i2;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1) {
    if (rootEnd === -1)
      return ".";
    else
      end = rootEnd;
  }
  return path10.slice(0, end);
}
function basename4(path10, ext = "") {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath2(path10);
  let start = 0;
  let end = -1;
  let matchedSlash = true;
  let i2;
  if (path10.length >= 2) {
    const drive = path10.charCodeAt(0);
    if (isWindowsDeviceRoot2(drive)) {
      if (path10.charCodeAt(1) === CHAR_COLON2)
        start = 2;
    }
  }
  if (ext !== void 0 && ext.length > 0 && ext.length <= path10.length) {
    if (ext.length === path10.length && ext === path10)
      return "";
    let extIdx = ext.length - 1;
    let firstNonSlashEnd = -1;
    for (i2 = path10.length - 1; i2 >= start; --i2) {
      const code2 = path10.charCodeAt(i2);
      if (isPathSeparator2(code2)) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd === -1) {
          matchedSlash = false;
          firstNonSlashEnd = i2 + 1;
        }
        if (extIdx >= 0) {
          if (code2 === ext.charCodeAt(extIdx)) {
            if (--extIdx === -1) {
              end = i2;
            }
          } else {
            extIdx = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end)
      end = firstNonSlashEnd;
    else if (end === -1)
      end = path10.length;
    return path10.slice(start, end);
  } else {
    for (i2 = path10.length - 1; i2 >= start; --i2) {
      if (isPathSeparator2(path10.charCodeAt(i2))) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
    }
    if (end === -1)
      return "";
    return path10.slice(start, end);
  }
}
function extname4(path10) {
  assertPath2(path10);
  let start = 0;
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  if (path10.length >= 2 && path10.charCodeAt(1) === CHAR_COLON2 && isWindowsDeviceRoot2(path10.charCodeAt(0))) {
    start = startPart = 2;
  }
  for (let i2 = path10.length - 1; i2 >= start; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (isPathSeparator2(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT2) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path10.slice(startDot, end);
}
function format4(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format2("\\", pathObject);
}
function parse4(path10) {
  assertPath2(path10);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  const len = path10.length;
  if (len === 0)
    return ret;
  let rootEnd = 0;
  let code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator2(code2)) {
      rootEnd = 1;
      if (isPathSeparator2(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator2(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator2(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator2(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              rootEnd = j;
            } else if (j !== last) {
              rootEnd = j + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot2(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON2) {
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator2(path10.charCodeAt(2))) {
            if (len === 3) {
              ret.root = ret.dir = path10;
              return ret;
            }
            rootEnd = 3;
          }
        } else {
          ret.root = ret.dir = path10;
          return ret;
        }
      }
    }
  } else if (isPathSeparator2(code2)) {
    ret.root = ret.dir = path10;
    return ret;
  }
  if (rootEnd > 0)
    ret.root = path10.slice(0, rootEnd);
  let startDot = -1;
  let startPart = rootEnd;
  let end = -1;
  let matchedSlash = true;
  let i2 = path10.length - 1;
  let preDotState = 0;
  for (; i2 >= rootEnd; --i2) {
    code2 = path10.charCodeAt(i2);
    if (isPathSeparator2(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT2) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      ret.base = ret.name = path10.slice(startPart, end);
    }
  } else {
    ret.name = path10.slice(startPart, startDot);
    ret.base = path10.slice(startPart, end);
    ret.ext = path10.slice(startDot, end);
  }
  if (startPart > 0 && startPart !== rootEnd) {
    ret.dir = path10.slice(0, startPart - 1);
  } else
    ret.dir = ret.root;
  return ret;
}
function fromFileUrl4(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  let path10 = decodeURIComponent(
    url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  ).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
  if (url.hostname != "") {
    path10 = `\\\\${url.hostname}${path10}`;
  }
  return path10;
}
function toFileUrl4(path10) {
  if (!isAbsolute4(path10)) {
    throw new TypeError("Must be an absolute path.");
  }
  const [, hostname, pathname] = path10.match(
    /^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/
  );
  const url = new URL("file:///");
  url.pathname = encodeWhitespace2(pathname.replace(/%/g, "%25"));
  if (hostname != null && hostname != "localhost") {
    url.hostname = hostname;
    if (!url.hostname) {
      throw new TypeError("Invalid hostname.");
    }
  }
  return url;
}

// https://deno.land/std@0.133.0/path/posix.ts
var posix_exports2 = {};
__export(posix_exports2, {
  basename: () => basename5,
  delimiter: () => delimiter5,
  dirname: () => dirname5,
  extname: () => extname5,
  format: () => format5,
  fromFileUrl: () => fromFileUrl5,
  isAbsolute: () => isAbsolute5,
  join: () => join6,
  normalize: () => normalize6,
  parse: () => parse5,
  relative: () => relative5,
  resolve: () => resolve5,
  sep: () => sep5,
  toFileUrl: () => toFileUrl5,
  toNamespacedPath: () => toNamespacedPath5
});
var sep5 = "/";
var delimiter5 = ":";
function resolve5(...pathSegments) {
  let resolvedPath = "";
  let resolvedAbsolute = false;
  for (let i2 = pathSegments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
    let path10;
    if (i2 >= 0)
      path10 = pathSegments[i2];
    else {
      const { Deno: Deno4 } = globalThis;
      if (typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path10 = Deno4.cwd();
    }
    assertPath2(path10);
    if (path10.length === 0) {
      continue;
    }
    resolvedPath = `${path10}/${resolvedPath}`;
    resolvedAbsolute = path10.charCodeAt(0) === CHAR_FORWARD_SLASH2;
  }
  resolvedPath = normalizeString2(
    resolvedPath,
    !resolvedAbsolute,
    "/",
    isPosixPathSeparator2
  );
  if (resolvedAbsolute) {
    if (resolvedPath.length > 0)
      return `/${resolvedPath}`;
    else
      return "/";
  } else if (resolvedPath.length > 0)
    return resolvedPath;
  else
    return ".";
}
function normalize6(path10) {
  assertPath2(path10);
  if (path10.length === 0)
    return ".";
  const isAbsolute15 = path10.charCodeAt(0) === CHAR_FORWARD_SLASH2;
  const trailingSeparator = path10.charCodeAt(path10.length - 1) === CHAR_FORWARD_SLASH2;
  path10 = normalizeString2(path10, !isAbsolute15, "/", isPosixPathSeparator2);
  if (path10.length === 0 && !isAbsolute15)
    path10 = ".";
  if (path10.length > 0 && trailingSeparator)
    path10 += "/";
  if (isAbsolute15)
    return `/${path10}`;
  return path10;
}
function isAbsolute5(path10) {
  assertPath2(path10);
  return path10.length > 0 && path10.charCodeAt(0) === CHAR_FORWARD_SLASH2;
}
function join6(...paths) {
  if (paths.length === 0)
    return ".";
  let joined;
  for (let i2 = 0, len = paths.length; i2 < len; ++i2) {
    const path10 = paths[i2];
    assertPath2(path10);
    if (path10.length > 0) {
      if (!joined)
        joined = path10;
      else
        joined += `/${path10}`;
    }
  }
  if (!joined)
    return ".";
  return normalize6(joined);
}
function relative5(from, to) {
  assertPath2(from);
  assertPath2(to);
  if (from === to)
    return "";
  from = resolve5(from);
  to = resolve5(to);
  if (from === to)
    return "";
  let fromStart = 1;
  const fromEnd = from.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH2)
      break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 1;
  const toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH2)
      break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i2 = 0;
  for (; i2 <= length; ++i2) {
    if (i2 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i2) === CHAR_FORWARD_SLASH2) {
          return to.slice(toStart + i2 + 1);
        } else if (i2 === 0) {
          return to.slice(toStart + i2);
        }
      } else if (fromLen > length) {
        if (from.charCodeAt(fromStart + i2) === CHAR_FORWARD_SLASH2) {
          lastCommonSep = i2;
        } else if (i2 === 0) {
          lastCommonSep = 0;
        }
      }
      break;
    }
    const fromCode = from.charCodeAt(fromStart + i2);
    const toCode = to.charCodeAt(toStart + i2);
    if (fromCode !== toCode)
      break;
    else if (fromCode === CHAR_FORWARD_SLASH2)
      lastCommonSep = i2;
  }
  let out = "";
  for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
    if (i2 === fromEnd || from.charCodeAt(i2) === CHAR_FORWARD_SLASH2) {
      if (out.length === 0)
        out += "..";
      else
        out += "/..";
    }
  }
  if (out.length > 0)
    return out + to.slice(toStart + lastCommonSep);
  else {
    toStart += lastCommonSep;
    if (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH2)
      ++toStart;
    return to.slice(toStart);
  }
}
function toNamespacedPath5(path10) {
  return path10;
}
function dirname5(path10) {
  assertPath2(path10);
  if (path10.length === 0)
    return ".";
  const hasRoot = path10.charCodeAt(0) === CHAR_FORWARD_SLASH2;
  let end = -1;
  let matchedSlash = true;
  for (let i2 = path10.length - 1; i2 >= 1; --i2) {
    if (path10.charCodeAt(i2) === CHAR_FORWARD_SLASH2) {
      if (!matchedSlash) {
        end = i2;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1)
    return hasRoot ? "/" : ".";
  if (hasRoot && end === 1)
    return "//";
  return path10.slice(0, end);
}
function basename5(path10, ext = "") {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath2(path10);
  let start = 0;
  let end = -1;
  let matchedSlash = true;
  let i2;
  if (ext !== void 0 && ext.length > 0 && ext.length <= path10.length) {
    if (ext.length === path10.length && ext === path10)
      return "";
    let extIdx = ext.length - 1;
    let firstNonSlashEnd = -1;
    for (i2 = path10.length - 1; i2 >= 0; --i2) {
      const code2 = path10.charCodeAt(i2);
      if (code2 === CHAR_FORWARD_SLASH2) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd === -1) {
          matchedSlash = false;
          firstNonSlashEnd = i2 + 1;
        }
        if (extIdx >= 0) {
          if (code2 === ext.charCodeAt(extIdx)) {
            if (--extIdx === -1) {
              end = i2;
            }
          } else {
            extIdx = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end)
      end = firstNonSlashEnd;
    else if (end === -1)
      end = path10.length;
    return path10.slice(start, end);
  } else {
    for (i2 = path10.length - 1; i2 >= 0; --i2) {
      if (path10.charCodeAt(i2) === CHAR_FORWARD_SLASH2) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
    }
    if (end === -1)
      return "";
    return path10.slice(start, end);
  }
}
function extname5(path10) {
  assertPath2(path10);
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  for (let i2 = path10.length - 1; i2 >= 0; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (code2 === CHAR_FORWARD_SLASH2) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT2) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path10.slice(startDot, end);
}
function format5(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format2("/", pathObject);
}
function parse5(path10) {
  assertPath2(path10);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  if (path10.length === 0)
    return ret;
  const isAbsolute15 = path10.charCodeAt(0) === CHAR_FORWARD_SLASH2;
  let start;
  if (isAbsolute15) {
    ret.root = "/";
    start = 1;
  } else {
    start = 0;
  }
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let i2 = path10.length - 1;
  let preDotState = 0;
  for (; i2 >= start; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (code2 === CHAR_FORWARD_SLASH2) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT2) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      if (startPart === 0 && isAbsolute15) {
        ret.base = ret.name = path10.slice(1, end);
      } else {
        ret.base = ret.name = path10.slice(startPart, end);
      }
    }
  } else {
    if (startPart === 0 && isAbsolute15) {
      ret.name = path10.slice(1, startDot);
      ret.base = path10.slice(1, end);
    } else {
      ret.name = path10.slice(startPart, startDot);
      ret.base = path10.slice(startPart, end);
    }
    ret.ext = path10.slice(startDot, end);
  }
  if (startPart > 0)
    ret.dir = path10.slice(0, startPart - 1);
  else if (isAbsolute15)
    ret.dir = "/";
  return ret;
}
function fromFileUrl5(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  return decodeURIComponent(
    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  );
}
function toFileUrl5(path10) {
  if (!isAbsolute5(path10)) {
    throw new TypeError("Must be an absolute path.");
  }
  const url = new URL("file:///");
  url.pathname = encodeWhitespace2(
    path10.replace(/%/g, "%25").replace(/\\/g, "%5C")
  );
  return url;
}

// https://deno.land/std@0.133.0/path/glob.ts
var path3 = isWindows2 ? win32_exports2 : posix_exports2;
var { join: join7, normalize: normalize7 } = path3;

// https://deno.land/std@0.133.0/path/mod.ts
var path4 = isWindows2 ? win32_exports2 : posix_exports2;
var {
  basename: basename6,
  delimiter: delimiter6,
  dirname: dirname6,
  extname: extname6,
  format: format6,
  fromFileUrl: fromFileUrl6,
  isAbsolute: isAbsolute6,
  join: join8,
  normalize: normalize8,
  parse: parse6,
  relative: relative6,
  resolve: resolve6,
  sep: sep6,
  toFileUrl: toFileUrl6,
  toNamespacedPath: toNamespacedPath6
} = path4;

// https://deno.land/std@0.133.0/fs/_util.ts
function isSubdir(src, dest, sep15 = sep6) {
  if (src === dest) {
    return false;
  }
  const srcArray = src.split(sep15);
  const destArray = dest.split(sep15);
  return srcArray.every((current2, i2) => destArray[i2] === current2);
}
function getFileInfoType(fileInfo) {
  return fileInfo.isFile ? "file" : fileInfo.isDirectory ? "dir" : fileInfo.isSymlink ? "symlink" : void 0;
}

// https://deno.land/std@0.133.0/fs/ensure_dir.ts
async function ensureDir(dir) {
  try {
    const fileInfo = await Deno.lstat(dir);
    if (!fileInfo.isDirectory) {
      throw new Error(
        `Ensure path exists, expected 'dir', got '${getFileInfoType(fileInfo)}'`
      );
    }
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      await Deno.mkdir(dir, { recursive: true });
      return;
    }
    throw err;
  }
}

// https://deno.land/std@0.133.0/fs/exists.ts
async function exists(filePath) {
  try {
    await Deno.lstat(filePath);
    return true;
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      return false;
    }
    throw err;
  }
}
function existsSync(filePath) {
  try {
    Deno.lstatSync(filePath);
    return true;
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      return false;
    }
    throw err;
  }
}

// https://deno.land/std@0.133.0/fs/move.ts
async function move(src, dest, { overwrite = false } = {}) {
  const srcStat = await Deno.stat(src);
  if (srcStat.isDirectory && isSubdir(src, dest)) {
    throw new Error(
      `Cannot move '${src}' to a subdirectory of itself, '${dest}'.`
    );
  }
  if (overwrite) {
    if (await exists(dest)) {
      await Deno.remove(dest, { recursive: true });
    }
  } else {
    if (await exists(dest)) {
      throw new Error("dest already exists.");
    }
  }
  await Deno.rename(src, dest);
  return;
}
function moveSync(src, dest, { overwrite = false } = {}) {
  const srcStat = Deno.statSync(src);
  if (srcStat.isDirectory && isSubdir(src, dest)) {
    throw new Error(
      `Cannot move '${src}' to a subdirectory of itself, '${dest}'.`
    );
  }
  if (overwrite) {
    if (existsSync(dest)) {
      Deno.removeSync(dest, { recursive: true });
    }
  } else {
    if (existsSync(dest)) {
      throw new Error("dest already exists.");
    }
  }
  Deno.renameSync(src, dest);
}

// https://deno.land/std@0.133.0/_deno_unstable.ts
function utime(...args) {
  if (typeof Deno.utime == "function") {
    return Deno.utime(...args);
  } else {
    return Promise.reject(new TypeError("Requires --unstable"));
  }
}

// https://deno.land/std@0.133.0/fs/copy.ts
async function ensureValidCopy(src, dest, options) {
  let destStat;
  try {
    destStat = await Deno.lstat(dest);
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      return;
    }
    throw err;
  }
  if (options.isFolder && !destStat.isDirectory) {
    throw new Error(
      `Cannot overwrite non-directory '${dest}' with directory '${src}'.`
    );
  }
  if (!options.overwrite) {
    throw new Error(`'${dest}' already exists.`);
  }
  return destStat;
}
async function copyFile(src, dest, options) {
  await ensureValidCopy(src, dest, options);
  await Deno.copyFile(src, dest);
  if (options.preserveTimestamps) {
    const statInfo = await Deno.stat(src);
    assert3(statInfo.atime instanceof Date, `statInfo.atime is unavailable`);
    assert3(statInfo.mtime instanceof Date, `statInfo.mtime is unavailable`);
    await utime(dest, statInfo.atime, statInfo.mtime);
  }
}
async function copySymLink(src, dest, options) {
  await ensureValidCopy(src, dest, options);
  const originSrcFilePath = await Deno.readLink(src);
  const type = getFileInfoType(await Deno.lstat(src));
  if (isWindows2) {
    await Deno.symlink(originSrcFilePath, dest, {
      type: type === "dir" ? "dir" : "file"
    });
  } else {
    await Deno.symlink(originSrcFilePath, dest);
  }
  if (options.preserveTimestamps) {
    const statInfo = await Deno.lstat(src);
    assert3(statInfo.atime instanceof Date, `statInfo.atime is unavailable`);
    assert3(statInfo.mtime instanceof Date, `statInfo.mtime is unavailable`);
    await utime(dest, statInfo.atime, statInfo.mtime);
  }
}
async function copyDir(src, dest, options) {
  const destStat = await ensureValidCopy(src, dest, {
    ...options,
    isFolder: true
  });
  if (!destStat) {
    await ensureDir(dest);
  }
  if (options.preserveTimestamps) {
    const srcStatInfo = await Deno.stat(src);
    assert3(srcStatInfo.atime instanceof Date, `statInfo.atime is unavailable`);
    assert3(srcStatInfo.mtime instanceof Date, `statInfo.mtime is unavailable`);
    await utime(dest, srcStatInfo.atime, srcStatInfo.mtime);
  }
  for await (const entry of Deno.readDir(src)) {
    const srcPath = join8(src, entry.name);
    const destPath = join8(dest, basename6(srcPath));
    if (entry.isSymlink) {
      await copySymLink(srcPath, destPath, options);
    } else if (entry.isDirectory) {
      await copyDir(srcPath, destPath, options);
    } else if (entry.isFile) {
      await copyFile(srcPath, destPath, options);
    }
  }
}
async function copy(src, dest, options = {}) {
  src = resolve6(src);
  dest = resolve6(dest);
  if (src === dest) {
    throw new Error("Source and destination cannot be the same.");
  }
  const srcStat = await Deno.lstat(src);
  if (srcStat.isDirectory && isSubdir(src, dest)) {
    throw new Error(
      `Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`
    );
  }
  if (srcStat.isSymlink) {
    await copySymLink(src, dest, options);
  } else if (srcStat.isDirectory) {
    await copyDir(src, dest, options);
  } else if (srcStat.isFile) {
    await copyFile(src, dest, options);
  }
}

// https://deno.land/x/good@1.1.1.2/string.js
var findAll = (regexPattern, sourceString) => {
  var output2 = [];
  var match;
  var regexPatternWithGlobal = regexPattern.global ? regexPattern : RegExp(regexPattern, regexPattern.flags + "g");
  while (match = regexPatternWithGlobal.exec(sourceString)) {
    output2.push(match);
    if (match[0].length == 0) {
      regexPatternWithGlobal.lastIndex += 1;
    }
  }
  return output2;
};

// https://deno.land/x/good@1.1.1.2/value.js
var typedArrayClasses3 = [
  Uint16Array,
  Uint32Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Int32Array,
  Int8Array,
  Float32Array,
  Float64Array,
  globalThis.BigInt64Array,
  globalThis.BigUint64Array
].filter((each2) => each2);
var copyableClasses3 = /* @__PURE__ */ new Set([RegExp, Date, URL, ...typedArrayClasses3, globalThis.ArrayBuffer, globalThis.DataView]);
var IteratorPrototype3 = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
var ArrayIterator3 = Object.getPrototypeOf([][Symbol.iterator]);
var MapIterator3 = Object.getPrototypeOf((/* @__PURE__ */ new Map())[Symbol.iterator]);
var SetIterator3 = Object.getPrototypeOf((/* @__PURE__ */ new Set())[Symbol.iterator]);
var AsyncFunction3 = class {
};
var GeneratorFunction3 = class {
};
var AsyncGeneratorFunction3 = class {
};
var SyncGenerator3 = class {
};
var AsyncGenerator3 = class {
};
try {
  AsyncFunction3 = eval("(async function(){}).constructor");
  GeneratorFunction3 = eval("(function*(){}).constructor");
  AsyncGeneratorFunction3 = eval("(async function*(){}).constructor");
  SyncGenerator3 = eval("((function*(){})()).constructor");
  AsyncGenerator3 = eval("((async function*(){})()).constructor");
} catch (error) {
}
var isPrimitive3 = (value) => !(value instanceof Object);
var isPureObject3 = (value) => value instanceof Object && Object.getPrototypeOf(value).constructor == Object;
var isPracticallyPrimitive3 = (value) => isPrimitive3(value) || value instanceof Date || value instanceof RegExp || value instanceof URL;
var isBuiltInIterator3 = (value) => IteratorPrototype3.isPrototypeOf(value);
var isGeneratorType3 = (value) => {
  if (value instanceof Object) {
    if (isBuiltInIterator3(value)) {
      return true;
    }
    const constructor = value.constructor;
    return constructor == SyncGenerator3 || constructor == AsyncGenerator3;
  }
  return false;
};
var isAsyncIterable3 = function(value) {
  return value && typeof value[Symbol.asyncIterator] === "function";
};
var isSyncIterable3 = function(value) {
  return value && typeof value[Symbol.iterator] === "function";
};
var isTechnicallyIterable3 = function(value) {
  return value instanceof Object || typeof value == "string";
};
var isSyncIterableObjectOrContainer3 = function(value) {
  return value instanceof Object && typeof value[Symbol.iterator] == "function";
};
var deepCopySymbol3 = Symbol.for("deepCopy");
var clonedFromSymbol3 = Symbol();
var getThis3 = Symbol();
Object.getPrototypeOf(function() {
})[getThis3] = function() {
  return this;
};
function deepCopyInner3(value, valueChain = [], originalToCopyMap = /* @__PURE__ */ new Map()) {
  valueChain.push(value);
  if (value == null) {
    return value;
  }
  if (!(value instanceof Object)) {
    return value;
  }
  if (originalToCopyMap.has(value)) {
    return originalToCopyMap.get(value);
  }
  if (value[deepCopySymbol3] instanceof Function) {
    const clonedValue = value[deepCopySymbol3](originalToCopyMap);
    originalToCopyMap.set(value, clonedValue);
    return clonedValue;
  }
  if (isGeneratorType3(value)) {
    throw Error(`Sadly built-in generators cannot be deep copied.
And I found a generator along this path:
${valueChain.reverse().map((each2) => `${each2},
`)}`);
  }
  let object, theThis, thisCopy;
  if (value instanceof Date) {
    object = new Date(value.getTime());
  } else if (value instanceof RegExp) {
    object = new RegExp(value);
  } else if (value instanceof URL) {
    object = new URL(value);
  } else if (value instanceof Function) {
    theThis = value[getThis3]();
    object = value.bind(theThis);
  } else if (copyableClasses3.has(value.constructor)) {
    object = new value.constructor(value);
  } else if (value instanceof Array) {
    object = [];
  } else if (value instanceof Set) {
    object = /* @__PURE__ */ new Set();
  } else if (value instanceof Map) {
    object = /* @__PURE__ */ new Map();
  }
  originalToCopyMap.set(value, object);
  if (object instanceof Function) {
    thisCopy = deepCopyInner3(theThis, valueChain, originalToCopyMap);
    object = object.bind(thisCopy);
  }
  const output2 = object;
  try {
    output2.constructor = value.constructor;
  } catch (error) {
  }
  Object.setPrototypeOf(output2, Object.getPrototypeOf(value));
  const propertyDefinitions = {};
  for (const [key, description] of Object.entries(Object.getOwnPropertyDescriptors(value))) {
    const { value: value2, get, set: set2, ...options } = description;
    const getIsFunc = get instanceof Function;
    const setIsFunc = set2 instanceof Function;
    if (getIsFunc || setIsFunc) {
      propertyDefinitions[key] = {
        ...options,
        get: get ? function(...args) {
          return get.apply(output2, args);
        } : void 0,
        set: set2 ? function(...args) {
          return set2.apply(output2, args);
        } : void 0
      };
    } else {
      if (key == "length" && output2 instanceof Array) {
        continue;
      }
      propertyDefinitions[key] = {
        ...options,
        value: deepCopyInner3(value2, valueChain, originalToCopyMap)
      };
    }
  }
  Object.defineProperties(output2, propertyDefinitions);
  return output2;
}
var deepCopy3 = (value) => deepCopyInner3(value);
var shallowSortObject3 = (obj) => {
  return Object.keys(obj).sort().reduce(
    (newObj, key) => {
      newObj[key] = obj[key];
      return newObj;
    },
    {}
  );
};
var deepSortObject3 = (obj, seen = /* @__PURE__ */ new Map()) => {
  if (!(obj instanceof Object)) {
    return obj;
  } else if (seen.has(obj)) {
    return seen.get(obj);
  } else {
    if (obj instanceof Array) {
      const sortedChildren = [];
      seen.set(obj, sortedChildren);
      for (const each2 of obj) {
        sortedChildren.push(deepSortObject3(each2, seen));
      }
      return sortedChildren;
    } else {
      const sorted = {};
      seen.set(obj, sorted);
      for (const eachKey of Object.keys(obj).sort()) {
        sorted[eachKey] = deepSortObject3(obj[eachKey], seen);
      }
      return sorted;
    }
  }
};
var stableStringify3 = (value, ...args) => {
  return JSON.stringify(deepSortObject3(value), ...args);
};
var allKeys3 = function(obj) {
  let keys = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    keys = keys.concat(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return keys;
};
var ownKeyDescriptions3 = Object.getOwnPropertyDescriptors;
var allKeyDescriptions3 = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};

// https://deno.land/x/good@1.1.1.2/iterable.js
var Stop3 = Symbol("iterationStop");
async function asyncIteratorToList3(asyncIterator) {
  const results = [];
  for await (const each2 of asyncIterator) {
    results.push(each2);
  }
  return results;
}
var ERROR_WHILE_MAPPING_MESSAGE3 = "Threw while mapping.";
function concurrentlyTransform3({ iterator, transformFunction, poolLimit = null, awaitAll = false }) {
  poolLimit = poolLimit || concurrentlyTransform3.defaultPoolLimit;
  const res = new TransformStream({
    async transform(p, controller) {
      try {
        const s = await p;
        controller.enqueue(s);
      } catch (e) {
        if (e instanceof AggregateError && e.message == ERROR_WHILE_MAPPING_MESSAGE3) {
          controller.error(e);
        }
      }
    }
  });
  const mainPromise = (async () => {
    const writer = res.writable.getWriter();
    const executing = [];
    try {
      let index = 0;
      for await (const item of iterator) {
        const p = Promise.resolve().then(() => transformFunction(item, index));
        index++;
        writer.write(p);
        const e = p.then(() => executing.splice(executing.indexOf(e), 1));
        executing.push(e);
        if (executing.length >= poolLimit) {
          await Promise.race(executing);
        }
      }
      await Promise.all(executing);
      writer.close();
    } catch {
      const errors = [];
      for (const result2 of await Promise.allSettled(executing)) {
        if (result2.status == "rejected") {
          errors.push(result2.reason);
        }
      }
      writer.write(Promise.reject(
        new AggregateError(errors, ERROR_WHILE_MAPPING_MESSAGE3)
      )).catch(() => {
      });
    }
  })();
  const asyncIterator = res.readable[Symbol.asyncIterator]();
  if (!awaitAll) {
    return asyncIterator;
  } else {
    return mainPromise.then(() => asyncIteratorToList3(asyncIterator));
  }
}
concurrentlyTransform3.defaultPoolLimit = 40;

// https://deno.land/std@0.191.0/_util/os.ts
var osType3 = (() => {
  const { Deno: Deno4 } = globalThis;
  if (typeof Deno4?.build?.os === "string") {
    return Deno4.build.os;
  }
  const { navigator } = globalThis;
  if (navigator?.appVersion?.includes?.("Win")) {
    return "windows";
  }
  return "linux";
})();
var isWindows3 = osType3 === "windows";

// https://deno.land/std@0.191.0/path/win32.ts
var win32_exports3 = {};
__export(win32_exports3, {
  basename: () => basename7,
  delimiter: () => delimiter7,
  dirname: () => dirname7,
  extname: () => extname7,
  format: () => format7,
  fromFileUrl: () => fromFileUrl7,
  isAbsolute: () => isAbsolute7,
  join: () => join9,
  normalize: () => normalize9,
  parse: () => parse7,
  relative: () => relative7,
  resolve: () => resolve7,
  sep: () => sep7,
  toFileUrl: () => toFileUrl7,
  toNamespacedPath: () => toNamespacedPath7
});

// https://deno.land/std@0.191.0/path/_constants.ts
var CHAR_UPPERCASE_A3 = 65;
var CHAR_LOWERCASE_A3 = 97;
var CHAR_UPPERCASE_Z3 = 90;
var CHAR_LOWERCASE_Z3 = 122;
var CHAR_DOT3 = 46;
var CHAR_FORWARD_SLASH3 = 47;
var CHAR_BACKWARD_SLASH3 = 92;
var CHAR_COLON3 = 58;
var CHAR_QUESTION_MARK3 = 63;

// https://deno.land/std@0.191.0/path/_util.ts
function assertPath3(path10) {
  if (typeof path10 !== "string") {
    throw new TypeError(
      `Path must be a string. Received ${JSON.stringify(path10)}`
    );
  }
}
function isPosixPathSeparator3(code2) {
  return code2 === CHAR_FORWARD_SLASH3;
}
function isPathSeparator3(code2) {
  return isPosixPathSeparator3(code2) || code2 === CHAR_BACKWARD_SLASH3;
}
function isWindowsDeviceRoot3(code2) {
  return code2 >= CHAR_LOWERCASE_A3 && code2 <= CHAR_LOWERCASE_Z3 || code2 >= CHAR_UPPERCASE_A3 && code2 <= CHAR_UPPERCASE_Z3;
}
function normalizeString3(path10, allowAboveRoot, separator, isPathSeparator6) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code2;
  for (let i2 = 0, len = path10.length; i2 <= len; ++i2) {
    if (i2 < len)
      code2 = path10.charCodeAt(i2);
    else if (isPathSeparator6(code2))
      break;
    else
      code2 = CHAR_FORWARD_SLASH3;
    if (isPathSeparator6(code2)) {
      if (lastSlash === i2 - 1 || dots === 1) {
      } else if (lastSlash !== i2 - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT3 || res.charCodeAt(res.length - 2) !== CHAR_DOT3) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf(separator);
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
            }
            lastSlash = i2;
            dots = 0;
            continue;
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i2;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += `${separator}..`;
          else
            res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += separator + path10.slice(lastSlash + 1, i2);
        else
          res = path10.slice(lastSlash + 1, i2);
        lastSegmentLength = i2 - lastSlash - 1;
      }
      lastSlash = i2;
      dots = 0;
    } else if (code2 === CHAR_DOT3 && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
function _format3(sep15, pathObject) {
  const dir = pathObject.dir || pathObject.root;
  const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
  if (!dir)
    return base;
  if (base === sep15)
    return dir;
  if (dir === pathObject.root)
    return dir + base;
  return dir + sep15 + base;
}
var WHITESPACE_ENCODINGS3 = {
  "	": "%09",
  "\n": "%0A",
  "\v": "%0B",
  "\f": "%0C",
  "\r": "%0D",
  " ": "%20"
};
function encodeWhitespace3(string2) {
  return string2.replaceAll(/[\s]/g, (c) => {
    return WHITESPACE_ENCODINGS3[c] ?? c;
  });
}
function lastPathSegment(path10, isSep, start = 0) {
  let matchedNonSeparator = false;
  let end = path10.length;
  for (let i2 = path10.length - 1; i2 >= start; --i2) {
    if (isSep(path10.charCodeAt(i2))) {
      if (matchedNonSeparator) {
        start = i2 + 1;
        break;
      }
    } else if (!matchedNonSeparator) {
      matchedNonSeparator = true;
      end = i2 + 1;
    }
  }
  return path10.slice(start, end);
}
function stripTrailingSeparators(segment, isSep) {
  if (segment.length <= 1) {
    return segment;
  }
  let end = segment.length;
  for (let i2 = segment.length - 1; i2 > 0; i2--) {
    if (isSep(segment.charCodeAt(i2))) {
      end = i2;
    } else {
      break;
    }
  }
  return segment.slice(0, end);
}
function stripSuffix(name, suffix) {
  if (suffix.length >= name.length) {
    return name;
  }
  const lenDiff = name.length - suffix.length;
  for (let i2 = suffix.length - 1; i2 >= 0; --i2) {
    if (name.charCodeAt(lenDiff + i2) !== suffix.charCodeAt(i2)) {
      return name;
    }
  }
  return name.slice(0, -suffix.length);
}

// https://deno.land/std@0.191.0/_util/asserts.ts
var DenoStdInternalError3 = class extends Error {
  constructor(message) {
    super(message);
    this.name = "DenoStdInternalError";
  }
};
function assert4(expr, msg = "") {
  if (!expr) {
    throw new DenoStdInternalError3(msg);
  }
}

// https://deno.land/std@0.191.0/path/win32.ts
var sep7 = "\\";
var delimiter7 = ";";
function resolve7(...pathSegments) {
  let resolvedDevice = "";
  let resolvedTail = "";
  let resolvedAbsolute = false;
  for (let i2 = pathSegments.length - 1; i2 >= -1; i2--) {
    let path10;
    const { Deno: Deno4 } = globalThis;
    if (i2 >= 0) {
      path10 = pathSegments[i2];
    } else if (!resolvedDevice) {
      if (typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a drive-letter-less path without a CWD.");
      }
      path10 = Deno4.cwd();
    } else {
      if (typeof Deno4?.env?.get !== "function" || typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path10 = Deno4.cwd();
      if (path10 === void 0 || path10.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
        path10 = `${resolvedDevice}\\`;
      }
    }
    assertPath3(path10);
    const len = path10.length;
    if (len === 0)
      continue;
    let rootEnd = 0;
    let device = "";
    let isAbsolute15 = false;
    const code2 = path10.charCodeAt(0);
    if (len > 1) {
      if (isPathSeparator3(code2)) {
        isAbsolute15 = true;
        if (isPathSeparator3(path10.charCodeAt(1))) {
          let j = 2;
          let last = j;
          for (; j < len; ++j) {
            if (isPathSeparator3(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            const firstPart = path10.slice(last, j);
            last = j;
            for (; j < len; ++j) {
              if (!isPathSeparator3(path10.charCodeAt(j)))
                break;
            }
            if (j < len && j !== last) {
              last = j;
              for (; j < len; ++j) {
                if (isPathSeparator3(path10.charCodeAt(j)))
                  break;
              }
              if (j === len) {
                device = `\\\\${firstPart}\\${path10.slice(last)}`;
                rootEnd = j;
              } else if (j !== last) {
                device = `\\\\${firstPart}\\${path10.slice(last, j)}`;
                rootEnd = j;
              }
            }
          }
        } else {
          rootEnd = 1;
        }
      } else if (isWindowsDeviceRoot3(code2)) {
        if (path10.charCodeAt(1) === CHAR_COLON3) {
          device = path10.slice(0, 2);
          rootEnd = 2;
          if (len > 2) {
            if (isPathSeparator3(path10.charCodeAt(2))) {
              isAbsolute15 = true;
              rootEnd = 3;
            }
          }
        }
      }
    } else if (isPathSeparator3(code2)) {
      rootEnd = 1;
      isAbsolute15 = true;
    }
    if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      continue;
    }
    if (resolvedDevice.length === 0 && device.length > 0) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = `${path10.slice(rootEnd)}\\${resolvedTail}`;
      resolvedAbsolute = isAbsolute15;
    }
    if (resolvedAbsolute && resolvedDevice.length > 0)
      break;
  }
  resolvedTail = normalizeString3(
    resolvedTail,
    !resolvedAbsolute,
    "\\",
    isPathSeparator3
  );
  return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize9(path10) {
  assertPath3(path10);
  const len = path10.length;
  if (len === 0)
    return ".";
  let rootEnd = 0;
  let device;
  let isAbsolute15 = false;
  const code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator3(code2)) {
      isAbsolute15 = true;
      if (isPathSeparator3(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator3(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          const firstPart = path10.slice(last, j);
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator3(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator3(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              return `\\\\${firstPart}\\${path10.slice(last)}\\`;
            } else if (j !== last) {
              device = `\\\\${firstPart}\\${path10.slice(last, j)}`;
              rootEnd = j;
            }
          }
        }
      } else {
        rootEnd = 1;
      }
    } else if (isWindowsDeviceRoot3(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON3) {
        device = path10.slice(0, 2);
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator3(path10.charCodeAt(2))) {
            isAbsolute15 = true;
            rootEnd = 3;
          }
        }
      }
    }
  } else if (isPathSeparator3(code2)) {
    return "\\";
  }
  let tail;
  if (rootEnd < len) {
    tail = normalizeString3(
      path10.slice(rootEnd),
      !isAbsolute15,
      "\\",
      isPathSeparator3
    );
  } else {
    tail = "";
  }
  if (tail.length === 0 && !isAbsolute15)
    tail = ".";
  if (tail.length > 0 && isPathSeparator3(path10.charCodeAt(len - 1))) {
    tail += "\\";
  }
  if (device === void 0) {
    if (isAbsolute15) {
      if (tail.length > 0)
        return `\\${tail}`;
      else
        return "\\";
    } else if (tail.length > 0) {
      return tail;
    } else {
      return "";
    }
  } else if (isAbsolute15) {
    if (tail.length > 0)
      return `${device}\\${tail}`;
    else
      return `${device}\\`;
  } else if (tail.length > 0) {
    return device + tail;
  } else {
    return device;
  }
}
function isAbsolute7(path10) {
  assertPath3(path10);
  const len = path10.length;
  if (len === 0)
    return false;
  const code2 = path10.charCodeAt(0);
  if (isPathSeparator3(code2)) {
    return true;
  } else if (isWindowsDeviceRoot3(code2)) {
    if (len > 2 && path10.charCodeAt(1) === CHAR_COLON3) {
      if (isPathSeparator3(path10.charCodeAt(2)))
        return true;
    }
  }
  return false;
}
function join9(...paths) {
  const pathsCount = paths.length;
  if (pathsCount === 0)
    return ".";
  let joined;
  let firstPart = null;
  for (let i2 = 0; i2 < pathsCount; ++i2) {
    const path10 = paths[i2];
    assertPath3(path10);
    if (path10.length > 0) {
      if (joined === void 0)
        joined = firstPart = path10;
      else
        joined += `\\${path10}`;
    }
  }
  if (joined === void 0)
    return ".";
  let needsReplace = true;
  let slashCount = 0;
  assert4(firstPart != null);
  if (isPathSeparator3(firstPart.charCodeAt(0))) {
    ++slashCount;
    const firstLen = firstPart.length;
    if (firstLen > 1) {
      if (isPathSeparator3(firstPart.charCodeAt(1))) {
        ++slashCount;
        if (firstLen > 2) {
          if (isPathSeparator3(firstPart.charCodeAt(2)))
            ++slashCount;
          else {
            needsReplace = false;
          }
        }
      }
    }
  }
  if (needsReplace) {
    for (; slashCount < joined.length; ++slashCount) {
      if (!isPathSeparator3(joined.charCodeAt(slashCount)))
        break;
    }
    if (slashCount >= 2)
      joined = `\\${joined.slice(slashCount)}`;
  }
  return normalize9(joined);
}
function relative7(from, to) {
  assertPath3(from);
  assertPath3(to);
  if (from === to)
    return "";
  const fromOrig = resolve7(from);
  const toOrig = resolve7(to);
  if (fromOrig === toOrig)
    return "";
  from = fromOrig.toLowerCase();
  to = toOrig.toLowerCase();
  if (from === to)
    return "";
  let fromStart = 0;
  let fromEnd = from.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH3)
      break;
  }
  for (; fromEnd - 1 > fromStart; --fromEnd) {
    if (from.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH3)
      break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 0;
  let toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH3)
      break;
  }
  for (; toEnd - 1 > toStart; --toEnd) {
    if (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH3)
      break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i2 = 0;
  for (; i2 <= length; ++i2) {
    if (i2 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i2) === CHAR_BACKWARD_SLASH3) {
          return toOrig.slice(toStart + i2 + 1);
        } else if (i2 === 2) {
          return toOrig.slice(toStart + i2);
        }
      }
      if (fromLen > length) {
        if (from.charCodeAt(fromStart + i2) === CHAR_BACKWARD_SLASH3) {
          lastCommonSep = i2;
        } else if (i2 === 2) {
          lastCommonSep = 3;
        }
      }
      break;
    }
    const fromCode = from.charCodeAt(fromStart + i2);
    const toCode = to.charCodeAt(toStart + i2);
    if (fromCode !== toCode)
      break;
    else if (fromCode === CHAR_BACKWARD_SLASH3)
      lastCommonSep = i2;
  }
  if (i2 !== length && lastCommonSep === -1) {
    return toOrig;
  }
  let out = "";
  if (lastCommonSep === -1)
    lastCommonSep = 0;
  for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
    if (i2 === fromEnd || from.charCodeAt(i2) === CHAR_BACKWARD_SLASH3) {
      if (out.length === 0)
        out += "..";
      else
        out += "\\..";
    }
  }
  if (out.length > 0) {
    return out + toOrig.slice(toStart + lastCommonSep, toEnd);
  } else {
    toStart += lastCommonSep;
    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH3)
      ++toStart;
    return toOrig.slice(toStart, toEnd);
  }
}
function toNamespacedPath7(path10) {
  if (typeof path10 !== "string")
    return path10;
  if (path10.length === 0)
    return "";
  const resolvedPath = resolve7(path10);
  if (resolvedPath.length >= 3) {
    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH3) {
      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH3) {
        const code2 = resolvedPath.charCodeAt(2);
        if (code2 !== CHAR_QUESTION_MARK3 && code2 !== CHAR_DOT3) {
          return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
        }
      }
    } else if (isWindowsDeviceRoot3(resolvedPath.charCodeAt(0))) {
      if (resolvedPath.charCodeAt(1) === CHAR_COLON3 && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH3) {
        return `\\\\?\\${resolvedPath}`;
      }
    }
  }
  return path10;
}
function dirname7(path10) {
  assertPath3(path10);
  const len = path10.length;
  if (len === 0)
    return ".";
  let rootEnd = -1;
  let end = -1;
  let matchedSlash = true;
  let offset = 0;
  const code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator3(code2)) {
      rootEnd = offset = 1;
      if (isPathSeparator3(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator3(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator3(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator3(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              return path10;
            }
            if (j !== last) {
              rootEnd = offset = j + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot3(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON3) {
        rootEnd = offset = 2;
        if (len > 2) {
          if (isPathSeparator3(path10.charCodeAt(2)))
            rootEnd = offset = 3;
        }
      }
    }
  } else if (isPathSeparator3(code2)) {
    return path10;
  }
  for (let i2 = len - 1; i2 >= offset; --i2) {
    if (isPathSeparator3(path10.charCodeAt(i2))) {
      if (!matchedSlash) {
        end = i2;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1) {
    if (rootEnd === -1)
      return ".";
    else
      end = rootEnd;
  }
  return stripTrailingSeparators(path10.slice(0, end), isPosixPathSeparator3);
}
function basename7(path10, suffix = "") {
  assertPath3(path10);
  if (path10.length === 0)
    return path10;
  if (typeof suffix !== "string") {
    throw new TypeError(
      `Suffix must be a string. Received ${JSON.stringify(suffix)}`
    );
  }
  let start = 0;
  if (path10.length >= 2) {
    const drive = path10.charCodeAt(0);
    if (isWindowsDeviceRoot3(drive)) {
      if (path10.charCodeAt(1) === CHAR_COLON3)
        start = 2;
    }
  }
  const lastSegment = lastPathSegment(path10, isPathSeparator3, start);
  const strippedSegment = stripTrailingSeparators(lastSegment, isPathSeparator3);
  return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
function extname7(path10) {
  assertPath3(path10);
  let start = 0;
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  if (path10.length >= 2 && path10.charCodeAt(1) === CHAR_COLON3 && isWindowsDeviceRoot3(path10.charCodeAt(0))) {
    start = startPart = 2;
  }
  for (let i2 = path10.length - 1; i2 >= start; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (isPathSeparator3(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT3) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path10.slice(startDot, end);
}
function format7(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format3("\\", pathObject);
}
function parse7(path10) {
  assertPath3(path10);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  const len = path10.length;
  if (len === 0)
    return ret;
  let rootEnd = 0;
  let code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator3(code2)) {
      rootEnd = 1;
      if (isPathSeparator3(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator3(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator3(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator3(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              rootEnd = j;
            } else if (j !== last) {
              rootEnd = j + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot3(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON3) {
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator3(path10.charCodeAt(2))) {
            if (len === 3) {
              ret.root = ret.dir = path10;
              ret.base = "\\";
              return ret;
            }
            rootEnd = 3;
          }
        } else {
          ret.root = ret.dir = path10;
          return ret;
        }
      }
    }
  } else if (isPathSeparator3(code2)) {
    ret.root = ret.dir = path10;
    ret.base = "\\";
    return ret;
  }
  if (rootEnd > 0)
    ret.root = path10.slice(0, rootEnd);
  let startDot = -1;
  let startPart = rootEnd;
  let end = -1;
  let matchedSlash = true;
  let i2 = path10.length - 1;
  let preDotState = 0;
  for (; i2 >= rootEnd; --i2) {
    code2 = path10.charCodeAt(i2);
    if (isPathSeparator3(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT3) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      ret.base = ret.name = path10.slice(startPart, end);
    }
  } else {
    ret.name = path10.slice(startPart, startDot);
    ret.base = path10.slice(startPart, end);
    ret.ext = path10.slice(startDot, end);
  }
  ret.base = ret.base || "\\";
  if (startPart > 0 && startPart !== rootEnd) {
    ret.dir = path10.slice(0, startPart - 1);
  } else
    ret.dir = ret.root;
  return ret;
}
function fromFileUrl7(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  let path10 = decodeURIComponent(
    url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  ).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
  if (url.hostname != "") {
    path10 = `\\\\${url.hostname}${path10}`;
  }
  return path10;
}
function toFileUrl7(path10) {
  if (!isAbsolute7(path10)) {
    throw new TypeError("Must be an absolute path.");
  }
  const [, hostname, pathname] = path10.match(
    /^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/
  );
  const url = new URL("file:///");
  url.pathname = encodeWhitespace3(pathname.replace(/%/g, "%25"));
  if (hostname != null && hostname != "localhost") {
    url.hostname = hostname;
    if (!url.hostname) {
      throw new TypeError("Invalid hostname.");
    }
  }
  return url;
}

// https://deno.land/std@0.191.0/path/posix.ts
var posix_exports3 = {};
__export(posix_exports3, {
  basename: () => basename8,
  delimiter: () => delimiter8,
  dirname: () => dirname8,
  extname: () => extname8,
  format: () => format8,
  fromFileUrl: () => fromFileUrl8,
  isAbsolute: () => isAbsolute8,
  join: () => join10,
  normalize: () => normalize10,
  parse: () => parse8,
  relative: () => relative8,
  resolve: () => resolve8,
  sep: () => sep8,
  toFileUrl: () => toFileUrl8,
  toNamespacedPath: () => toNamespacedPath8
});
var sep8 = "/";
var delimiter8 = ":";
function resolve8(...pathSegments) {
  let resolvedPath = "";
  let resolvedAbsolute = false;
  for (let i2 = pathSegments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
    let path10;
    if (i2 >= 0)
      path10 = pathSegments[i2];
    else {
      const { Deno: Deno4 } = globalThis;
      if (typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path10 = Deno4.cwd();
    }
    assertPath3(path10);
    if (path10.length === 0) {
      continue;
    }
    resolvedPath = `${path10}/${resolvedPath}`;
    resolvedAbsolute = isPosixPathSeparator3(path10.charCodeAt(0));
  }
  resolvedPath = normalizeString3(
    resolvedPath,
    !resolvedAbsolute,
    "/",
    isPosixPathSeparator3
  );
  if (resolvedAbsolute) {
    if (resolvedPath.length > 0)
      return `/${resolvedPath}`;
    else
      return "/";
  } else if (resolvedPath.length > 0)
    return resolvedPath;
  else
    return ".";
}
function normalize10(path10) {
  assertPath3(path10);
  if (path10.length === 0)
    return ".";
  const isAbsolute15 = isPosixPathSeparator3(path10.charCodeAt(0));
  const trailingSeparator = isPosixPathSeparator3(
    path10.charCodeAt(path10.length - 1)
  );
  path10 = normalizeString3(path10, !isAbsolute15, "/", isPosixPathSeparator3);
  if (path10.length === 0 && !isAbsolute15)
    path10 = ".";
  if (path10.length > 0 && trailingSeparator)
    path10 += "/";
  if (isAbsolute15)
    return `/${path10}`;
  return path10;
}
function isAbsolute8(path10) {
  assertPath3(path10);
  return path10.length > 0 && isPosixPathSeparator3(path10.charCodeAt(0));
}
function join10(...paths) {
  if (paths.length === 0)
    return ".";
  let joined;
  for (let i2 = 0, len = paths.length; i2 < len; ++i2) {
    const path10 = paths[i2];
    assertPath3(path10);
    if (path10.length > 0) {
      if (!joined)
        joined = path10;
      else
        joined += `/${path10}`;
    }
  }
  if (!joined)
    return ".";
  return normalize10(joined);
}
function relative8(from, to) {
  assertPath3(from);
  assertPath3(to);
  if (from === to)
    return "";
  from = resolve8(from);
  to = resolve8(to);
  if (from === to)
    return "";
  let fromStart = 1;
  const fromEnd = from.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (!isPosixPathSeparator3(from.charCodeAt(fromStart)))
      break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 1;
  const toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (!isPosixPathSeparator3(to.charCodeAt(toStart)))
      break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i2 = 0;
  for (; i2 <= length; ++i2) {
    if (i2 === length) {
      if (toLen > length) {
        if (isPosixPathSeparator3(to.charCodeAt(toStart + i2))) {
          return to.slice(toStart + i2 + 1);
        } else if (i2 === 0) {
          return to.slice(toStart + i2);
        }
      } else if (fromLen > length) {
        if (isPosixPathSeparator3(from.charCodeAt(fromStart + i2))) {
          lastCommonSep = i2;
        } else if (i2 === 0) {
          lastCommonSep = 0;
        }
      }
      break;
    }
    const fromCode = from.charCodeAt(fromStart + i2);
    const toCode = to.charCodeAt(toStart + i2);
    if (fromCode !== toCode)
      break;
    else if (isPosixPathSeparator3(fromCode))
      lastCommonSep = i2;
  }
  let out = "";
  for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
    if (i2 === fromEnd || isPosixPathSeparator3(from.charCodeAt(i2))) {
      if (out.length === 0)
        out += "..";
      else
        out += "/..";
    }
  }
  if (out.length > 0)
    return out + to.slice(toStart + lastCommonSep);
  else {
    toStart += lastCommonSep;
    if (isPosixPathSeparator3(to.charCodeAt(toStart)))
      ++toStart;
    return to.slice(toStart);
  }
}
function toNamespacedPath8(path10) {
  return path10;
}
function dirname8(path10) {
  if (path10.length === 0)
    return ".";
  let end = -1;
  let matchedNonSeparator = false;
  for (let i2 = path10.length - 1; i2 >= 1; --i2) {
    if (isPosixPathSeparator3(path10.charCodeAt(i2))) {
      if (matchedNonSeparator) {
        end = i2;
        break;
      }
    } else {
      matchedNonSeparator = true;
    }
  }
  if (end === -1) {
    return isPosixPathSeparator3(path10.charCodeAt(0)) ? "/" : ".";
  }
  return stripTrailingSeparators(
    path10.slice(0, end),
    isPosixPathSeparator3
  );
}
function basename8(path10, suffix = "") {
  assertPath3(path10);
  if (path10.length === 0)
    return path10;
  if (typeof suffix !== "string") {
    throw new TypeError(
      `Suffix must be a string. Received ${JSON.stringify(suffix)}`
    );
  }
  const lastSegment = lastPathSegment(path10, isPosixPathSeparator3);
  const strippedSegment = stripTrailingSeparators(
    lastSegment,
    isPosixPathSeparator3
  );
  return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
function extname8(path10) {
  assertPath3(path10);
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  for (let i2 = path10.length - 1; i2 >= 0; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (isPosixPathSeparator3(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT3) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path10.slice(startDot, end);
}
function format8(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format3("/", pathObject);
}
function parse8(path10) {
  assertPath3(path10);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  if (path10.length === 0)
    return ret;
  const isAbsolute15 = isPosixPathSeparator3(path10.charCodeAt(0));
  let start;
  if (isAbsolute15) {
    ret.root = "/";
    start = 1;
  } else {
    start = 0;
  }
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let i2 = path10.length - 1;
  let preDotState = 0;
  for (; i2 >= start; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (isPosixPathSeparator3(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT3) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      if (startPart === 0 && isAbsolute15) {
        ret.base = ret.name = path10.slice(1, end);
      } else {
        ret.base = ret.name = path10.slice(startPart, end);
      }
    }
    ret.base = ret.base || "/";
  } else {
    if (startPart === 0 && isAbsolute15) {
      ret.name = path10.slice(1, startDot);
      ret.base = path10.slice(1, end);
    } else {
      ret.name = path10.slice(startPart, startDot);
      ret.base = path10.slice(startPart, end);
    }
    ret.ext = path10.slice(startDot, end);
  }
  if (startPart > 0) {
    ret.dir = stripTrailingSeparators(
      path10.slice(0, startPart - 1),
      isPosixPathSeparator3
    );
  } else if (isAbsolute15)
    ret.dir = "/";
  return ret;
}
function fromFileUrl8(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  return decodeURIComponent(
    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  );
}
function toFileUrl8(path10) {
  if (!isAbsolute8(path10)) {
    throw new TypeError("Must be an absolute path.");
  }
  const url = new URL("file:///");
  url.pathname = encodeWhitespace3(
    path10.replace(/%/g, "%25").replace(/\\/g, "%5C")
  );
  return url;
}

// https://deno.land/std@0.191.0/path/glob.ts
var path5 = isWindows3 ? win32_exports3 : posix_exports3;
var { join: join11, normalize: normalize11 } = path5;
var regExpEscapeChars = [
  "!",
  "$",
  "(",
  ")",
  "*",
  "+",
  ".",
  "=",
  "?",
  "[",
  "\\",
  "^",
  "{",
  "|"
];
var rangeEscapeChars = ["-", "\\", "]"];
function globToRegExp2(glob3, {
  extended: extended2 = true,
  globstar: globstarOption = true,
  os = osType3,
  caseInsensitive = false
} = {}) {
  if (glob3 == "") {
    return /(?!)/;
  }
  const sep15 = os == "windows" ? "(?:\\\\|/)+" : "/+";
  const sepMaybe = os == "windows" ? "(?:\\\\|/)*" : "/*";
  const seps = os == "windows" ? ["\\", "/"] : ["/"];
  const globstar = os == "windows" ? "(?:[^\\\\/]*(?:\\\\|/|$)+)*" : "(?:[^/]*(?:/|$)+)*";
  const wildcard = os == "windows" ? "[^\\\\/]*" : "[^/]*";
  const escapePrefix = os == "windows" ? "`" : "\\";
  let newLength = glob3.length;
  for (; newLength > 1 && seps.includes(glob3[newLength - 1]); newLength--)
    ;
  glob3 = glob3.slice(0, newLength);
  let regExpString = "";
  for (let j = 0; j < glob3.length; ) {
    let segment = "";
    const groupStack = [];
    let inRange = false;
    let inEscape = false;
    let endsWithSep = false;
    let i2 = j;
    for (; i2 < glob3.length && !seps.includes(glob3[i2]); i2++) {
      if (inEscape) {
        inEscape = false;
        const escapeChars = inRange ? rangeEscapeChars : regExpEscapeChars;
        segment += escapeChars.includes(glob3[i2]) ? `\\${glob3[i2]}` : glob3[i2];
        continue;
      }
      if (glob3[i2] == escapePrefix) {
        inEscape = true;
        continue;
      }
      if (glob3[i2] == "[") {
        if (!inRange) {
          inRange = true;
          segment += "[";
          if (glob3[i2 + 1] == "!") {
            i2++;
            segment += "^";
          } else if (glob3[i2 + 1] == "^") {
            i2++;
            segment += "\\^";
          }
          continue;
        } else if (glob3[i2 + 1] == ":") {
          let k = i2 + 1;
          let value = "";
          while (glob3[k + 1] != null && glob3[k + 1] != ":") {
            value += glob3[k + 1];
            k++;
          }
          if (glob3[k + 1] == ":" && glob3[k + 2] == "]") {
            i2 = k + 2;
            if (value == "alnum")
              segment += "\\dA-Za-z";
            else if (value == "alpha")
              segment += "A-Za-z";
            else if (value == "ascii")
              segment += "\0-\x7F";
            else if (value == "blank")
              segment += "	 ";
            else if (value == "cntrl")
              segment += "\0-\x7F";
            else if (value == "digit")
              segment += "\\d";
            else if (value == "graph")
              segment += "!-~";
            else if (value == "lower")
              segment += "a-z";
            else if (value == "print")
              segment += " -~";
            else if (value == "punct") {
              segment += `!"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_\u2018{|}~`;
            } else if (value == "space")
              segment += "\\s\v";
            else if (value == "upper")
              segment += "A-Z";
            else if (value == "word")
              segment += "\\w";
            else if (value == "xdigit")
              segment += "\\dA-Fa-f";
            continue;
          }
        }
      }
      if (glob3[i2] == "]" && inRange) {
        inRange = false;
        segment += "]";
        continue;
      }
      if (inRange) {
        if (glob3[i2] == "\\") {
          segment += `\\\\`;
        } else {
          segment += glob3[i2];
        }
        continue;
      }
      if (glob3[i2] == ")" && groupStack.length > 0 && groupStack[groupStack.length - 1] != "BRACE") {
        segment += ")";
        const type = groupStack.pop();
        if (type == "!") {
          segment += wildcard;
        } else if (type != "@") {
          segment += type;
        }
        continue;
      }
      if (glob3[i2] == "|" && groupStack.length > 0 && groupStack[groupStack.length - 1] != "BRACE") {
        segment += "|";
        continue;
      }
      if (glob3[i2] == "+" && extended2 && glob3[i2 + 1] == "(") {
        i2++;
        groupStack.push("+");
        segment += "(?:";
        continue;
      }
      if (glob3[i2] == "@" && extended2 && glob3[i2 + 1] == "(") {
        i2++;
        groupStack.push("@");
        segment += "(?:";
        continue;
      }
      if (glob3[i2] == "?") {
        if (extended2 && glob3[i2 + 1] == "(") {
          i2++;
          groupStack.push("?");
          segment += "(?:";
        } else {
          segment += ".";
        }
        continue;
      }
      if (glob3[i2] == "!" && extended2 && glob3[i2 + 1] == "(") {
        i2++;
        groupStack.push("!");
        segment += "(?!";
        continue;
      }
      if (glob3[i2] == "{") {
        groupStack.push("BRACE");
        segment += "(?:";
        continue;
      }
      if (glob3[i2] == "}" && groupStack[groupStack.length - 1] == "BRACE") {
        groupStack.pop();
        segment += ")";
        continue;
      }
      if (glob3[i2] == "," && groupStack[groupStack.length - 1] == "BRACE") {
        segment += "|";
        continue;
      }
      if (glob3[i2] == "*") {
        if (extended2 && glob3[i2 + 1] == "(") {
          i2++;
          groupStack.push("*");
          segment += "(?:";
        } else {
          const prevChar = glob3[i2 - 1];
          let numStars = 1;
          while (glob3[i2 + 1] == "*") {
            i2++;
            numStars++;
          }
          const nextChar = glob3[i2 + 1];
          if (globstarOption && numStars == 2 && [...seps, void 0].includes(prevChar) && [...seps, void 0].includes(nextChar)) {
            segment += globstar;
            endsWithSep = true;
          } else {
            segment += wildcard;
          }
        }
        continue;
      }
      segment += regExpEscapeChars.includes(glob3[i2]) ? `\\${glob3[i2]}` : glob3[i2];
    }
    if (groupStack.length > 0 || inRange || inEscape) {
      segment = "";
      for (const c of glob3.slice(j, i2)) {
        segment += regExpEscapeChars.includes(c) ? `\\${c}` : c;
        endsWithSep = false;
      }
    }
    regExpString += segment;
    if (!endsWithSep) {
      regExpString += i2 < glob3.length ? sep15 : sepMaybe;
      endsWithSep = true;
    }
    while (seps.includes(glob3[i2]))
      i2++;
    if (!(i2 > j)) {
      throw new Error("Assertion failure: i > j (potential infinite loop)");
    }
    j = i2;
  }
  regExpString = `^${regExpString}$`;
  return new RegExp(regExpString, caseInsensitive ? "i" : "");
}

// https://deno.land/std@0.191.0/bytes/copy.ts
function copy2(src, dst, off = 0) {
  off = Math.max(0, Math.min(off, dst.byteLength));
  const dstBytesAvailable = dst.byteLength - off;
  if (src.byteLength > dstBytesAvailable) {
    src = src.subarray(0, dstBytesAvailable);
  }
  dst.set(src, off);
  return src.byteLength;
}

// https://deno.land/std@0.191.0/io/buf_reader.ts
var DEFAULT_BUF_SIZE = 4096;
var MIN_BUF_SIZE = 16;
var MAX_CONSECUTIVE_EMPTY_READS = 100;
var CR = "\r".charCodeAt(0);
var LF = "\n".charCodeAt(0);
var BufferFullError = class extends Error {
  constructor(partial) {
    super("Buffer full");
    this.partial = partial;
  }
  name = "BufferFullError";
};
var PartialReadError = class extends Error {
  name = "PartialReadError";
  partial;
  constructor() {
    super("Encountered UnexpectedEof, data only partially read");
  }
};
var BufReader = class _BufReader {
  #buf;
  #rd;
  // Reader provided by caller.
  #r = 0;
  // buf read position.
  #w = 0;
  // buf write position.
  #eof = false;
  // private lastByte: number;
  // private lastCharSize: number;
  /** return new BufReader unless r is BufReader */
  static create(r, size = DEFAULT_BUF_SIZE) {
    return r instanceof _BufReader ? r : new _BufReader(r, size);
  }
  constructor(rd, size = DEFAULT_BUF_SIZE) {
    if (size < MIN_BUF_SIZE) {
      size = MIN_BUF_SIZE;
    }
    this.#reset(new Uint8Array(size), rd);
  }
  /** Returns the size of the underlying buffer in bytes. */
  size() {
    return this.#buf.byteLength;
  }
  buffered() {
    return this.#w - this.#r;
  }
  // Reads a new chunk into the buffer.
  #fill = async () => {
    if (this.#r > 0) {
      this.#buf.copyWithin(0, this.#r, this.#w);
      this.#w -= this.#r;
      this.#r = 0;
    }
    if (this.#w >= this.#buf.byteLength) {
      throw Error("bufio: tried to fill full buffer");
    }
    for (let i2 = MAX_CONSECUTIVE_EMPTY_READS; i2 > 0; i2--) {
      const rr = await this.#rd.read(this.#buf.subarray(this.#w));
      if (rr === null) {
        this.#eof = true;
        return;
      }
      assert4(rr >= 0, "negative read");
      this.#w += rr;
      if (rr > 0) {
        return;
      }
    }
    throw new Error(
      `No progress after ${MAX_CONSECUTIVE_EMPTY_READS} read() calls`
    );
  };
  /** Discards any buffered data, resets all state, and switches
   * the buffered reader to read from r.
   */
  reset(r) {
    this.#reset(this.#buf, r);
  }
  #reset = (buf, rd) => {
    this.#buf = buf;
    this.#rd = rd;
    this.#eof = false;
  };
  /** reads data into p.
   * It returns the number of bytes read into p.
   * The bytes are taken from at most one Read on the underlying Reader,
   * hence n may be less than len(p).
   * To read exactly len(p) bytes, use io.ReadFull(b, p).
   */
  async read(p) {
    let rr = p.byteLength;
    if (p.byteLength === 0)
      return rr;
    if (this.#r === this.#w) {
      if (p.byteLength >= this.#buf.byteLength) {
        const rr2 = await this.#rd.read(p);
        const nread = rr2 ?? 0;
        assert4(nread >= 0, "negative read");
        return rr2;
      }
      this.#r = 0;
      this.#w = 0;
      rr = await this.#rd.read(this.#buf);
      if (rr === 0 || rr === null)
        return rr;
      assert4(rr >= 0, "negative read");
      this.#w += rr;
    }
    const copied = copy2(this.#buf.subarray(this.#r, this.#w), p, 0);
    this.#r += copied;
    return copied;
  }
  /** reads exactly `p.length` bytes into `p`.
   *
   * If successful, `p` is returned.
   *
   * If the end of the underlying stream has been reached, and there are no more
   * bytes available in the buffer, `readFull()` returns `null` instead.
   *
   * An error is thrown if some bytes could be read, but not enough to fill `p`
   * entirely before the underlying stream reported an error or EOF. Any error
   * thrown will have a `partial` property that indicates the slice of the
   * buffer that has been successfully filled with data.
   *
   * Ported from https://golang.org/pkg/io/#ReadFull
   */
  async readFull(p) {
    let bytesRead = 0;
    while (bytesRead < p.length) {
      try {
        const rr = await this.read(p.subarray(bytesRead));
        if (rr === null) {
          if (bytesRead === 0) {
            return null;
          } else {
            throw new PartialReadError();
          }
        }
        bytesRead += rr;
      } catch (err) {
        if (err instanceof PartialReadError) {
          err.partial = p.subarray(0, bytesRead);
        }
        throw err;
      }
    }
    return p;
  }
  /** Returns the next byte [0, 255] or `null`. */
  async readByte() {
    while (this.#r === this.#w) {
      if (this.#eof)
        return null;
      await this.#fill();
    }
    const c = this.#buf[this.#r];
    this.#r++;
    return c;
  }
  /** readString() reads until the first occurrence of delim in the input,
   * returning a string containing the data up to and including the delimiter.
   * If ReadString encounters an error before finding a delimiter,
   * it returns the data read before the error and the error itself
   * (often `null`).
   * ReadString returns err != nil if and only if the returned data does not end
   * in delim.
   * For simple uses, a Scanner may be more convenient.
   */
  async readString(delim) {
    if (delim.length !== 1) {
      throw new Error("Delimiter should be a single character");
    }
    const buffer = await this.readSlice(delim.charCodeAt(0));
    if (buffer === null)
      return null;
    return new TextDecoder().decode(buffer);
  }
  /** `readLine()` is a low-level line-reading primitive. Most callers should
   * use `readString('\n')` instead or use a Scanner.
   *
   * `readLine()` tries to return a single line, not including the end-of-line
   * bytes. If the line was too long for the buffer then `more` is set and the
   * beginning of the line is returned. The rest of the line will be returned
   * from future calls. `more` will be false when returning the last fragment
   * of the line. The returned buffer is only valid until the next call to
   * `readLine()`.
   *
   * The text returned from ReadLine does not include the line end ("\r\n" or
   * "\n").
   *
   * When the end of the underlying stream is reached, the final bytes in the
   * stream are returned. No indication or error is given if the input ends
   * without a final line end. When there are no more trailing bytes to read,
   * `readLine()` returns `null`.
   *
   * Calling `unreadByte()` after `readLine()` will always unread the last byte
   * read (possibly a character belonging to the line end) even if that byte is
   * not part of the line returned by `readLine()`.
   */
  async readLine() {
    let line = null;
    try {
      line = await this.readSlice(LF);
    } catch (err) {
      let partial;
      if (err instanceof PartialReadError) {
        partial = err.partial;
        assert4(
          partial instanceof Uint8Array,
          "bufio: caught error from `readSlice()` without `partial` property"
        );
      }
      if (!(err instanceof BufferFullError)) {
        throw err;
      }
      partial = err.partial;
      if (!this.#eof && partial && partial.byteLength > 0 && partial[partial.byteLength - 1] === CR) {
        assert4(this.#r > 0, "bufio: tried to rewind past start of buffer");
        this.#r--;
        partial = partial.subarray(0, partial.byteLength - 1);
      }
      if (partial) {
        return { line: partial, more: !this.#eof };
      }
    }
    if (line === null) {
      return null;
    }
    if (line.byteLength === 0) {
      return { line, more: false };
    }
    if (line[line.byteLength - 1] == LF) {
      let drop = 1;
      if (line.byteLength > 1 && line[line.byteLength - 2] === CR) {
        drop = 2;
      }
      line = line.subarray(0, line.byteLength - drop);
    }
    return { line, more: false };
  }
  /** `readSlice()` reads until the first occurrence of `delim` in the input,
   * returning a slice pointing at the bytes in the buffer. The bytes stop
   * being valid at the next read.
   *
   * If `readSlice()` encounters an error before finding a delimiter, or the
   * buffer fills without finding a delimiter, it throws an error with a
   * `partial` property that contains the entire buffer.
   *
   * If `readSlice()` encounters the end of the underlying stream and there are
   * any bytes left in the buffer, the rest of the buffer is returned. In other
   * words, EOF is always treated as a delimiter. Once the buffer is empty,
   * it returns `null`.
   *
   * Because the data returned from `readSlice()` will be overwritten by the
   * next I/O operation, most clients should use `readString()` instead.
   */
  async readSlice(delim) {
    let s = 0;
    let slice2;
    while (true) {
      let i2 = this.#buf.subarray(this.#r + s, this.#w).indexOf(delim);
      if (i2 >= 0) {
        i2 += s;
        slice2 = this.#buf.subarray(this.#r, this.#r + i2 + 1);
        this.#r += i2 + 1;
        break;
      }
      if (this.#eof) {
        if (this.#r === this.#w) {
          return null;
        }
        slice2 = this.#buf.subarray(this.#r, this.#w);
        this.#r = this.#w;
        break;
      }
      if (this.buffered() >= this.#buf.byteLength) {
        this.#r = this.#w;
        const oldbuf = this.#buf;
        const newbuf = this.#buf.slice(0);
        this.#buf = newbuf;
        throw new BufferFullError(oldbuf);
      }
      s = this.#w - this.#r;
      try {
        await this.#fill();
      } catch (err) {
        if (err instanceof PartialReadError) {
          err.partial = slice2;
        }
        throw err;
      }
    }
    return slice2;
  }
  /** `peek()` returns the next `n` bytes without advancing the reader. The
   * bytes stop being valid at the next read call.
   *
   * When the end of the underlying stream is reached, but there are unread
   * bytes left in the buffer, those bytes are returned. If there are no bytes
   * left in the buffer, it returns `null`.
   *
   * If an error is encountered before `n` bytes are available, `peek()` throws
   * an error with the `partial` property set to a slice of the buffer that
   * contains the bytes that were available before the error occurred.
   */
  async peek(n) {
    if (n < 0) {
      throw Error("negative count");
    }
    let avail = this.#w - this.#r;
    while (avail < n && avail < this.#buf.byteLength && !this.#eof) {
      try {
        await this.#fill();
      } catch (err) {
        if (err instanceof PartialReadError) {
          err.partial = this.#buf.subarray(this.#r, this.#w);
        }
        throw err;
      }
      avail = this.#w - this.#r;
    }
    if (avail === 0 && this.#eof) {
      return null;
    } else if (avail < n && this.#eof) {
      return this.#buf.subarray(this.#r, this.#r + avail);
    } else if (avail < n) {
      throw new BufferFullError(this.#buf.subarray(this.#r, this.#w));
    }
    return this.#buf.subarray(this.#r, this.#r + n);
  }
};

// https://deno.land/std@0.191.0/bytes/concat.ts
function concat(...buf) {
  let length = 0;
  for (const b of buf) {
    length += b.length;
  }
  const output2 = new Uint8Array(length);
  let index = 0;
  for (const b of buf) {
    output2.set(b, index);
    index += b.length;
  }
  return output2;
}

// https://deno.land/std@0.191.0/io/read_lines.ts
async function* readLines(reader, decoderOpts) {
  const bufReader = new BufReader(reader);
  let chunks = [];
  const decoder3 = new TextDecoder(decoderOpts?.encoding, decoderOpts);
  while (true) {
    const res = await bufReader.readLine();
    if (!res) {
      if (chunks.length > 0) {
        yield decoder3.decode(concat(...chunks));
      }
      break;
    }
    chunks.push(res.line);
    if (!res.more) {
      yield decoder3.decode(concat(...chunks));
      chunks = [];
    }
  }
}

// https://deno.land/x/good@1.5.0.3/value.js
var typedArrayClasses4 = [
  Uint16Array,
  Uint32Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Int32Array,
  Int8Array,
  Float32Array,
  Float64Array,
  globalThis.BigInt64Array,
  globalThis.BigUint64Array
].filter((each2) => each2);
var copyableClasses4 = /* @__PURE__ */ new Set([RegExp, Date, URL, ...typedArrayClasses4, globalThis.ArrayBuffer, globalThis.DataView]);
var IteratorPrototype4 = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
var ArrayIterator4 = Object.getPrototypeOf([][Symbol.iterator]);
var MapIterator4 = Object.getPrototypeOf((/* @__PURE__ */ new Map())[Symbol.iterator]);
var SetIterator4 = Object.getPrototypeOf((/* @__PURE__ */ new Set())[Symbol.iterator]);
var AsyncFunction4 = class {
};
var GeneratorFunction4 = class {
};
var AsyncGeneratorFunction4 = class {
};
var SyncGenerator4 = class {
};
var AsyncGenerator4 = class {
};
try {
  AsyncFunction4 = eval("(async function(){}).constructor");
  GeneratorFunction4 = eval("(function*(){}).constructor");
  AsyncGeneratorFunction4 = eval("(async function*(){}).constructor");
  SyncGenerator4 = eval("((function*(){})()).constructor");
  AsyncGenerator4 = eval("((async function*(){})()).constructor");
} catch (error) {
}
var isPrimitive4 = (value) => !(value instanceof Object);
var isPureObject4 = (value) => value instanceof Object && Object.getPrototypeOf(value).constructor == Object;
var isPracticallyPrimitive4 = (value) => isPrimitive4(value) || value instanceof Date || value instanceof RegExp || value instanceof URL;
var isBuiltInIterator4 = (value) => IteratorPrototype4.isPrototypeOf(value);
var isGeneratorType4 = (value) => {
  if (value instanceof Object) {
    if (isBuiltInIterator4(value)) {
      return true;
    }
    const constructor = value.constructor;
    return constructor == SyncGenerator4 || constructor == AsyncGenerator4;
  }
  return false;
};
var isAsyncIterable4 = function(value) {
  return value && typeof value[Symbol.asyncIterator] === "function";
};
var isSyncIterable4 = function(value) {
  return value && typeof value[Symbol.iterator] === "function";
};
var isIterableObjectOrContainer2 = function(value) {
  return value instanceof Object && (typeof value[Symbol.iterator] == "function" || typeof value[Symbol.asyncIterator] === "function");
};
var isTechnicallyIterable4 = function(value) {
  return value instanceof Object || typeof value == "string";
};
var isSyncIterableObjectOrContainer4 = function(value) {
  return value instanceof Object && typeof value[Symbol.iterator] == "function";
};
var deepCopySymbol4 = Symbol.for("deepCopy");
var clonedFromSymbol4 = Symbol();
var getThis4 = Symbol();
Object.getPrototypeOf(function() {
})[getThis4] = function() {
  return this;
};
function deepCopyInner4(value, valueChain = [], originalToCopyMap = /* @__PURE__ */ new Map()) {
  valueChain.push(value);
  if (value == null) {
    return value;
  }
  if (!(value instanceof Object)) {
    return value;
  }
  if (originalToCopyMap.has(value)) {
    return originalToCopyMap.get(value);
  }
  if (value[deepCopySymbol4] instanceof Function) {
    const clonedValue = value[deepCopySymbol4](originalToCopyMap);
    originalToCopyMap.set(value, clonedValue);
    return clonedValue;
  }
  if (isGeneratorType4(value)) {
    throw Error(`Sadly built-in generators cannot be deep copied.
And I found a generator along this path:
${valueChain.reverse().map((each2) => `${each2},
`)}`);
  }
  let object, theThis, thisCopy;
  if (value instanceof Date) {
    object = new Date(value.getTime());
  } else if (value instanceof RegExp) {
    object = new RegExp(value);
  } else if (value instanceof URL) {
    object = new URL(value);
  } else if (value instanceof Function) {
    theThis = value[getThis4]();
    object = value.bind(theThis);
  } else if (copyableClasses4.has(value.constructor)) {
    object = new value.constructor(value);
  } else if (value instanceof Array) {
    object = [];
  } else if (value instanceof Set) {
    object = /* @__PURE__ */ new Set();
  } else if (value instanceof Map) {
    object = /* @__PURE__ */ new Map();
  }
  originalToCopyMap.set(value, object);
  if (object instanceof Function) {
    thisCopy = deepCopyInner4(theThis, valueChain, originalToCopyMap);
    object = object.bind(thisCopy);
  }
  const output2 = object;
  try {
    output2.constructor = value.constructor;
  } catch (error) {
  }
  Object.setPrototypeOf(output2, Object.getPrototypeOf(value));
  const propertyDefinitions = {};
  for (const [key, description] of Object.entries(Object.getOwnPropertyDescriptors(value))) {
    const { value: value2, get, set: set2, ...options } = description;
    const getIsFunc = get instanceof Function;
    const setIsFunc = set2 instanceof Function;
    if (getIsFunc || setIsFunc) {
      propertyDefinitions[key] = {
        ...options,
        get: get ? function(...args) {
          return get.apply(output2, args);
        } : void 0,
        set: set2 ? function(...args) {
          return set2.apply(output2, args);
        } : void 0
      };
    } else {
      if (key == "length" && output2 instanceof Array) {
        continue;
      }
      propertyDefinitions[key] = {
        ...options,
        value: deepCopyInner4(value2, valueChain, originalToCopyMap)
      };
    }
  }
  Object.defineProperties(output2, propertyDefinitions);
  return output2;
}
var deepCopy4 = (value) => deepCopyInner4(value);
var shallowSortObject4 = (obj) => {
  return Object.keys(obj).sort().reduce(
    (newObj, key) => {
      newObj[key] = obj[key];
      return newObj;
    },
    {}
  );
};
var deepSortObject4 = (obj, seen = /* @__PURE__ */ new Map()) => {
  if (!(obj instanceof Object)) {
    return obj;
  } else if (seen.has(obj)) {
    return seen.get(obj);
  } else {
    if (obj instanceof Array) {
      const sortedChildren = [];
      seen.set(obj, sortedChildren);
      for (const each2 of obj) {
        sortedChildren.push(deepSortObject4(each2, seen));
      }
      return sortedChildren;
    } else {
      const sorted = {};
      seen.set(obj, sorted);
      for (const eachKey of Object.keys(obj).sort()) {
        sorted[eachKey] = deepSortObject4(obj[eachKey], seen);
      }
      return sorted;
    }
  }
};
var stableStringify4 = (value, ...args) => {
  return JSON.stringify(deepSortObject4(value), ...args);
};
var allKeys4 = function(obj) {
  let keys = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    keys = keys.concat(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return keys;
};
var ownKeyDescriptions4 = Object.getOwnPropertyDescriptors;
var allKeyDescriptions4 = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};

// https://deno.land/x/quickr@0.6.56/main/file_system.js
ensure({ denoVersion: "1.17.1" });
var cache3 = {};
var PathInfo = class {
  constructor({ path: path10, _lstatData, _statData }) {
    this.path = path10;
    this._lstat = _lstatData;
    this._data = _statData;
  }
  // 
  // core data sources
  // 
  refresh() {
    this._lstat = null;
    this._data = null;
  }
  get lstat() {
    if (!this._lstat) {
      try {
        this._lstat = Deno.lstatSync(this.path);
      } catch (error) {
        this._lstat = { doesntExist: true };
      }
    }
    return this._lstat;
  }
  get stat() {
    if (!this._stat) {
      const lstat = this.lstat;
      if (!lstat.isSymlink) {
        this._stat = {
          isBrokenLink: false,
          isLoopOfLinks: false
        };
      } else {
        try {
          this._stat = Deno.statSync(this.path);
        } catch (error) {
          this._stat = {};
          if (error.message.match(/^Too many levels of symbolic links/)) {
            this._stat.isBrokenLink = true;
            this._stat.isLoopOfLinks = true;
          } else if (error.message.match(/^No such file or directory/)) {
            this._stat.isBrokenLink = true;
          } else {
            throw error;
          }
        }
      }
    }
    return this._stat;
  }
  // 
  // main attributes
  // 
  get exists() {
    const lstat = this.lstat;
    return !lstat.doesntExist;
  }
  get name() {
    return parse3(this.path).name;
  }
  get extension() {
    return parse3(this.path).ext;
  }
  get basename() {
    return this.path && basename3(this.path);
  }
  get parentPath() {
    return this.path && dirname3(this.path);
  }
  relativePathFrom(parentPath) {
    return relative3(parentPath, this.path);
  }
  get link() {
    const lstat = this.lstat;
    if (lstat.isSymlink) {
      return Deno.readLinkSync(this.path);
    } else {
      return null;
    }
  }
  get isSymlink() {
    const lstat = this.lstat;
    return !!lstat.isSymlink;
  }
  get isRelativeSymlink() {
    const lstat = this.lstat;
    const isNotSymlink = !lstat.isSymlink;
    if (isNotSymlink) {
      return false;
    }
    const relativeOrAbsolutePath = Deno.readLinkSync(this.path);
    return !isAbsolute3(relativeOrAbsolutePath);
  }
  get isAbsoluteSymlink() {
    const lstat = this.lstat;
    const isNotSymlink = !lstat.isSymlink;
    if (isNotSymlink) {
      return false;
    }
    const relativeOrAbsolutePath = Deno.readLinkSync(this.path);
    return isAbsolute3(relativeOrAbsolutePath);
  }
  get isBrokenLink() {
    const stat = this.stat;
    return !!stat.isBrokenLink;
  }
  get isLoopOfLinks() {
    const stat = this.stat;
    return !!stat.isLoopOfLinks;
  }
  get isFile() {
    const lstat = this.lstat;
    if (lstat.doesntExist) {
      return false;
    }
    if (!lstat.isSymlink) {
      return lstat.isFile;
    } else {
      return !!this.stat.isFile;
    }
  }
  get isFolder() {
    const lstat = this.lstat;
    if (lstat.doesntExist) {
      return false;
    }
    if (!lstat.isSymlink) {
      return lstat.isDirectory;
    } else {
      return !!this.stat.isDirectory;
    }
  }
  get sizeInBytes() {
    const lstat = this.lstat;
    return lstat.size;
  }
  get permissions() {
    const { mode } = this.lstat;
    return {
      owner: {
        //          rwxrwxrwx
        canRead: !!(256 & mode),
        canWrite: !!(128 & mode),
        canExecute: !!(64 & mode)
      },
      group: {
        canRead: !!(32 & mode),
        canWrite: !!(16 & mode),
        canExecute: !!(8 & mode)
      },
      others: {
        canRead: !!(4 & mode),
        canWrite: !!(2 & mode),
        canExecute: !!(1 & mode)
      }
    };
  }
  // aliases
  get isDirectory() {
    return this.isFolder;
  }
  get dirname() {
    return this.parentPath;
  }
  toJSON() {
    return {
      exists: this.exists,
      name: this.name,
      extension: this.extension,
      basename: this.basename,
      parentPath: this.parentPath,
      isSymlink: this.isSymlink,
      isBrokenLink: this.isBrokenLink,
      isLoopOfLinks: this.isLoopOfLinks,
      isFile: this.isFile,
      isFolder: this.isFolder,
      sizeInBytes: this.sizeInBytes,
      permissions: this.permissions,
      isDirectory: this.isDirectory,
      dirname: this.dirname
    };
  }
};
var defaultOptionsHelper = (options) => ({
  renameExtension: options.renameExtension || FileSystem.defaultRenameExtension,
  overwrite: options.overwrite
});
var fileLockSymbol = Symbol.for("fileLock");
var locker = globalThis[fileLockSymbol] || {};
var grabPathLock = async (path10) => {
  while (locker[path10]) {
    await new Promise((resolve15) => setTimeout(resolve15, 70));
  }
  locker[path10] = true;
};
var pathStandardize = (path10) => {
  path10 = path10.path || path10;
  if (typeof path10 == "string" && path10.startsWith("file:///")) {
    path10 = fromFileUrl3(path10);
  }
  return path10;
};
var FileSystem = {
  defaultRenameExtension: ".old",
  denoExecutablePath: Deno.execPath(),
  parentPath: dirname3,
  dirname: dirname3,
  basename: basename3,
  extname: extname3,
  join: join4,
  normalize: (path10) => normalize4(pathStandardize(path10)).replace(/\/$/, ""),
  isAbsolutePath: isAbsolute3,
  isRelativePath: (...args) => !isAbsolute3(...args),
  makeRelativePath: ({ from, to }) => relative3(from.path || from, to.path || to),
  makeAbsolutePath: (path10) => {
    if (!isAbsolute3(path10)) {
      return normalize4(join4(Deno.cwd(), path10));
    } else {
      return normalize4(path10);
    }
  },
  pathDepth(path10) {
    path10 = FileSystem.normalize(path10);
    let count4 = 0;
    for (const eachChar of path10.path || path10) {
      if (eachChar == "/") {
        count4++;
      }
    }
    if (path10[0] == "/") {
      count4--;
    }
    return count4 + 1;
  },
  pathPieces(path10) {
    path10 = path10.path || path10;
    const result2 = parse3(path10);
    const folderList = [];
    let dirname15 = result2.dir;
    while (true) {
      folderList.push(basename3(dirname15));
      if (dirname15 == dirname3(dirname15)) {
        break;
      }
      dirname15 = dirname3(dirname15);
    }
    folderList.reverse();
    return [folderList, result2.name, result2.ext];
  },
  /**
   * add to name, preserve file extension
   *
   * @example
   * ```js
   * let newName = FileSystem.extendName({ path: "a/blah.thing.js", string: ".old" })
   * newName == "a/blah.old.thing.js"
   * ```
   *
   * @param arg1.path - item path
   * @param arg1.string - the string to append to the name
   * @return {string} - the new path
   */
  extendName({ path: path10, string: string2 }) {
    path10 = pathStandardize(path10);
    const [name, ...extensions] = basename3(path10).split(".");
    return `${dirname3(path10)}/${name}${string2}${extensions.length == 0 ? "" : `.${extensions.join(".")}`}`;
  },
  /**
   * All Parent Paths
   *
   * @param {String} path - path doesnt need to exist
   * @return {[String]} longest to shortest parent path
   */
  allParentPaths(path10) {
    const pathStartsWithDotSlash = path10.startsWith("./");
    path10 = FileSystem.normalize(path10);
    if (path10 === ".") {
      return [];
    }
    const dotGotRemoved = pathStartsWithDotSlash && !path10.startsWith("./");
    let previousPath = null;
    let allPaths = [];
    while (1) {
      previousPath = path10;
      path10 = FileSystem.parentPath(path10);
      if (previousPath === path10) {
        break;
      }
      allPaths.push(path10);
    }
    allPaths.reverse();
    allPaths = allPaths.filter((each2) => each2 != ".");
    if (dotGotRemoved) {
      allPaths.push(".");
    }
    return allPaths;
  },
  pathOfCaller(callerNumber = void 0) {
    const err = new Error();
    let filePaths = findAll(/^.+file:\/\/(\/[\w\W]*?):/gm, err.stack).map((each2) => each2[1]);
    if (callerNumber) {
      filePaths = filePaths.slice(callerNumber);
    }
    try {
      const secondPath = filePaths[1];
      if (secondPath) {
        try {
          if (Deno.statSync(secondPath).isFile) {
            return secondPath;
          }
        } catch (error) {
        }
      }
    } catch (error) {
    }
    return Deno.cwd();
  },
  get home() {
    if (!cache3.home) {
      if (Deno.build.os != "windows") {
        cache3.home = Deno.env.get("HOME");
      } else {
        cache3.home = Deno.env.get("HOMEPATH");
      }
    }
    return cache3.home;
  },
  get workingDirectory() {
    return Deno.cwd();
  },
  set workingDirectory(value) {
    Deno.chdir(value);
  },
  get cwd() {
    return FileSystem.workingDirectory;
  },
  set cwd(value) {
    return FileSystem.workingDirectory = value;
  },
  get pwd() {
    return FileSystem.cwd;
  },
  set pwd(value) {
    return FileSystem.cwd = value;
  },
  cd(path10) {
    Deno.chdir(path10);
  },
  changeDirectory(path10) {
    Deno.chdir(path10);
  },
  get thisFile() {
    const err = new Error();
    const filePaths = findAll(/^.+file:\/\/(\/[\w\W]*?):/gm, err.stack).map((each2) => each2[1]);
    const firstPath = filePaths[0];
    if (firstPath) {
      try {
        if (Deno.statSync(firstPath).isFile) {
          return firstPath;
        }
      } catch (error) {
      }
    }
    return ":<interpreter>:";
  },
  get thisFolder() {
    const err = new Error();
    const filePaths = findAll(/^.+file:\/\/(\/[\w\W]*?):/gm, err.stack).map((each2) => each2[1]);
    const firstPath = filePaths[0];
    if (firstPath) {
      try {
        if (Deno.statSync(firstPath).isFile) {
          return dirname3(firstPath);
        }
      } catch (error) {
      }
    }
    return Deno.cwd();
  },
  async read(path10) {
    path10 = pathStandardize(path10);
    await grabPathLock(path10);
    let output2;
    try {
      output2 = await Deno.readTextFile(path10);
    } catch (error) {
    }
    delete locker[path10];
    return output2;
  },
  async readBytes(path10) {
    path10 = pathStandardize(path10);
    await grabPathLock(path10);
    let output2;
    try {
      output2 = await Deno.readFile(path10);
    } catch (error) {
    }
    delete locker[path10];
    return output2;
  },
  async *readLinesIteratively(path10) {
    path10 = pathStandardize(path10);
    await grabPathLock(path10);
    try {
      const file = await Deno.open(path10);
      try {
        yield* readLines(file);
      } finally {
        Deno.close(file.rid);
      }
    } finally {
      delete locker[path10];
    }
  },
  async info(fileOrFolderPath, _cachedLstat = null) {
    fileOrFolderPath = pathStandardize(fileOrFolderPath);
    await grabPathLock(fileOrFolderPath);
    try {
      const lstat = _cachedLstat || await Deno.lstat(fileOrFolderPath).catch(() => ({ doesntExist: true }));
      let stat = {};
      if (!lstat.isSymlink) {
        stat = {
          isBrokenLink: false,
          isLoopOfLinks: false
        };
      } else {
        try {
          stat = await Deno.stat(fileOrFolderPath);
        } catch (error) {
          if (error.message.match(/^Too many levels of symbolic links/)) {
            stat.isBrokenLink = true;
            stat.isLoopOfLinks = true;
          } else if (error.message.match(/^No such file or directory/)) {
            stat.isBrokenLink = true;
          } else {
            if (!error.message.match(/^PermissionDenied:/)) {
              return { doesntExist: true, permissionDenied: true };
            }
            throw error;
          }
        }
      }
      return new PathInfo({ path: fileOrFolderPath, _lstatData: lstat, _statData: stat });
    } finally {
      delete locker[fileOrFolderPath];
    }
  },
  async move({ path: path10, item, newParentFolder, newName, force = true, overwrite = false, renameExtension = null }) {
    item = item || path10;
    const oldPath = item.path || item;
    const oldName = FileSystem.basename(oldPath);
    const pathInfo = item instanceof Object || FileSystem.sync.info(oldPath);
    const newPath = `${newParentFolder || FileSystem.parentPath(oldPath)}/${newName || oldName}`;
    if (pathInfo.isSymlink && !item.isBrokenLink) {
      const link2 = Deno.readLinkSync(pathInfo.path);
      if (!isAbsolute3(link2)) {
        const linkTargetBeforeMove = `${FileSystem.parentPath(pathInfo.path)}/${link2}`;
        await FileSystem.relativeLink({
          existingItem: linkTargetBeforeMove,
          newItem: newPath,
          force,
          overwrite,
          renameExtension
        });
        await FileSystem.remove(pathInfo);
      }
    }
    if (force) {
      FileSystem.sync.clearAPathFor(newPath, { overwrite, renameExtension });
    }
    await move(oldPath, newPath);
  },
  async remove(fileOrFolder) {
    fileOrFolder = pathStandardize(fileOrFolder);
    if (fileOrFolder instanceof Array) {
      return Promise.all(fileOrFolder.map(FileSystem.remove));
    }
    fileOrFolder = fileOrFolder.path || fileOrFolder;
    const pathInfo = await FileSystem.info(fileOrFolder);
    if (pathInfo.isFile || pathInfo.isSymlink) {
      return Deno.remove(pathInfo.path.replace(/\/+$/, ""));
    } else if (pathInfo.exists) {
      return Deno.remove(pathInfo.path.replace(/\/+$/, ""), { recursive: true });
    }
  },
  async finalTargetOf(path10, options = {}) {
    const { _parentsHaveBeenChecked, cache: cache6 } = { _parentsHaveBeenChecked: false, cache: {}, ...options };
    const originalWasItem = path10 instanceof PathInfo;
    path10 = path10.path || path10;
    let result2 = await Deno.lstat(path10).catch(() => ({ doesntExist: true }));
    if (result2.doesntExist) {
      return null;
    }
    path10 = await FileSystem.makeHardPathTo(path10, { cache: cache6 });
    const pathChain = [];
    while (result2.isSymlink) {
      const relativeOrAbsolutePath = await Deno.readLink(path10);
      if (isAbsolute3(relativeOrAbsolutePath)) {
        path10 = relativeOrAbsolutePath;
      } else {
        path10 = `${FileSystem.parentPath(path10)}/${relativeOrAbsolutePath}`;
      }
      result2 = await Deno.lstat(path10).catch(() => ({ doesntExist: true }));
      if (result2.doesntExist) {
        return null;
      }
      path10 = await FileSystem.makeHardPathTo(path10, { cache: cache6 });
      if (pathChain.includes(path10)) {
        return null;
      }
      pathChain.push(path10);
    }
    path10 = FileSystem.normalize(path10);
    if (originalWasItem) {
      return new PathInfo({ path: path10 });
    } else {
      return path10;
    }
  },
  async nextTargetOf(path10, options = {}) {
    const originalWasItem = path10 instanceof PathInfo;
    const item = originalWasItem ? path10 : new PathInfo({ path: path10 });
    const lstat = item.lstat;
    if (lstat.isSymlink) {
      const relativeOrAbsolutePath = Deno.readLinkSync(item.path);
      if (isAbsolute3(relativeOrAbsolutePath)) {
        if (originalWasItem) {
          return new PathInfo({ path: relativeOrAbsolutePath });
        } else {
          return relativeOrAbsolutePath;
        }
      } else {
        const path11 = `${await FileSystem.makeHardPathTo(dirname3(item.path))}/${relativeOrAbsolutePath}`;
        if (originalWasItem) {
          return new PathInfo({ path: path11 });
        } else {
          return path11;
        }
      }
    } else {
      if (originalWasItem) {
        return item;
      } else {
        return item.path;
      }
    }
  },
  async ensureIsFile(path10, options = { overwrite: false, renameExtension: null }) {
    const { overwrite, renameExtension } = defaultOptionsHelper(options);
    await FileSystem.ensureIsFolder(FileSystem.parentPath(path10), { overwrite, renameExtension });
    path10 = path10.path || path10;
    const pathInfo = await FileSystem.info(path10);
    if (pathInfo.isFile && !pathInfo.isDirectory) {
      return path10;
    } else {
      await FileSystem.write({ path: path10, data: "" });
      return path10;
    }
  },
  async ensureIsFolder(path10, options = { overwrite: false, renameExtension: null }) {
    const { overwrite, renameExtension } = defaultOptionsHelper(options);
    path10 = path10.path || path10;
    path10 = FileSystem.makeAbsolutePath(path10);
    const parentPath = dirname3(path10);
    if (parentPath == path10) {
      return;
    }
    const parent = await FileSystem.info(parentPath);
    if (!parent.isDirectory) {
      FileSystem.sync.ensureIsFolder(parentPath, { overwrite, renameExtension });
    }
    let pathInfo = FileSystem.sync.info(path10);
    if (pathInfo.exists && !pathInfo.isDirectory) {
      if (overwrite) {
        await FileSystem.remove(path10);
      } else {
        await FileSystem.moveOutOfTheWay(eachPath, { extension: renameExtension });
      }
    }
    await Deno.mkdir(path10, { recursive: true });
    return path10;
  },
  /**
   * Move/Remove everything and Ensure parent folders
   *
   * @param path
   * @param options.overwrite - if false, then things in the way will be moved instead of deleted
   * @param options.renameExtension - the string to append when renaming files to get them out of the way
   * 
   * @note
   *     very agressive: will change whatever is necessary to make sure a parent exists
   * 
   * @example
   * ```js
   * await FileSystem.clearAPathFor("./something")
   * ```
   */
  async clearAPathFor(path10, options = { overwrite: false, renameExtension: null }) {
    const { overwrite, renameExtension } = defaultOptionsHelper(options);
    const originalPath = path10;
    const paths = [];
    while (dirname3(path10) !== path10) {
      paths.push(path10);
      path10 = dirname3(path10);
    }
    for (const eachPath2 of paths.reverse()) {
      const info = await FileSystem.info(eachPath2);
      if (!info.exists) {
        break;
      } else if (info.isFile) {
        if (overwrite) {
          await FileSystem.remove(eachPath2);
        } else {
          await FileSystem.moveOutOfTheWay(eachPath2, { extension: renameExtension });
        }
      }
    }
    await Deno.mkdir(dirname3(originalPath), { recursive: true });
    return originalPath;
  },
  async moveOutOfTheWay(path10, options = { extension: null }) {
    const extension = options?.extension || FileSystem.defaultRenameExtension;
    const info = await FileSystem.info(path10);
    if (info.exists) {
      const newPath = path10 + extension;
      await FileSystem.moveOutOfTheWay(newPath, { extension });
      await move(path10, newPath);
    }
  },
  /**
   * find a root folder based on a child path
   *
   * @example
   * ```js
   *     import { FileSystem } from "https://deno.land/x/quickr/main/file_system.js"
   * 
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil(".git")
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil({
   *         subPath:".git",
   *         startPath: FileSystem.pwd,
   *     })
   *
   *     // below will result in that^ same folder (assuming all your .git folders have config files)
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil(".git/config")
   * 
   *     // below will result in the same folder, but only if theres a local master branch
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil(".git/refs/heads/master")
   *```
   */
  async walkUpUntil(subPath, startPath = null) {
    subPath = subPath instanceof PathInfo ? subPath.path : subPath;
    if (subPath instanceof Object) {
      var { subPath, startPath } = subPath;
    }
    let here;
    if (!startPath) {
      here = Deno.cwd();
    } else if (isAbsolute3(startPath)) {
      here = startPath;
    } else {
      here = join4(here, startPath);
    }
    while (1) {
      let checkPath = join4(here, subPath);
      const pathInfo = await Deno.lstat(checkPath).catch(() => ({ doesntExist: true }));
      if (!pathInfo.doesntExist) {
        return here;
      }
      if (here == dirname3(here)) {
        return null;
      } else {
        here = dirname3(here);
      }
    }
  },
  // FIXME: make this work for folders with many options for how to handle symlinks
  async copy({ from, to, preserveTimestamps = true, force = true, overwrite = false, renameExtension = null }) {
    const existingItemDoesntExist = (await Deno.stat(from).catch(() => ({ doesntExist: true }))).doesntExist;
    if (existingItemDoesntExist) {
      throw Error(`
Tried to copy from:${from}, to:${to}
but "from" didn't seem to exist

`);
    }
    if (force) {
      FileSystem.sync.clearAPathFor(to, { overwrite, renameExtension });
    }
    return copy(from, to, { force, preserveTimestamps: true });
  },
  async relativeLink({ existingItem, newItem, force = true, overwrite = false, allowNonExistingTarget = false, renameExtension = null }) {
    const existingItemPath = (existingItem.path || existingItem).replace(/\/+$/, "");
    const newItemPath = FileSystem.normalize((newItem.path || newItem).replace(/\/+$/, ""));
    const existingItemDoesntExist = (await Deno.lstat(existingItemPath).catch(() => ({ doesntExist: true }))).doesntExist;
    if (!allowNonExistingTarget && existingItemDoesntExist) {
      throw Error(`
Tried to create a relativeLink between existingItem:${existingItemPath}, newItem:${newItemPath}
but existingItem didn't actually exist`);
    } else {
      const parentOfNewItem = FileSystem.parentPath(newItemPath);
      await FileSystem.ensureIsFolder(parentOfNewItem, { overwrite, renameExtension });
      const hardPathToNewItem = `${await FileSystem.makeHardPathTo(parentOfNewItem)}/${FileSystem.basename(newItemPath)}`;
      const hardPathToExistingItem = await FileSystem.makeHardPathTo(existingItemPath);
      const pathFromNewToExisting = relative3(hardPathToNewItem, hardPathToExistingItem).replace(/^\.\.\//, "");
      if (force) {
        FileSystem.sync.clearAPathFor(hardPathToNewItem, { overwrite, renameExtension });
      }
      return Deno.symlink(
        pathFromNewToExisting,
        hardPathToNewItem
      );
    }
  },
  async absoluteLink({ existingItem, newItem, force = true, allowNonExistingTarget = false, overwrite = false, renameExtension = null }) {
    existingItem = (existingItem.path || existingItem).replace(/\/+$/, "");
    const newItemPath = FileSystem.normalize(newItem.path || newItem).replace(/\/+$/, "");
    const existingItemDoesntExist = (await Deno.lstat(existingItem).catch(() => ({ doesntExist: true }))).doesntExist;
    if (!allowNonExistingTarget && existingItemDoesntExist) {
      throw Error(`
Tried to create a relativeLink between existingItem:${existingItem}, newItemPath:${newItemPath}
but existingItem didn't actually exist`);
    } else {
      const parentOfNewItem = FileSystem.parentPath(newItemPath);
      await FileSystem.ensureIsFolder(parentOfNewItem, { overwrite, renameExtension });
      const hardPathToNewItem = `${await FileSystem.makeHardPathTo(parentOfNewItem)}/${FileSystem.basename(newItemPath)}`;
      if (force) {
        FileSystem.sync.clearAPathFor(hardPathToNewItem, { overwrite, renameExtension });
      }
      return Deno.symlink(
        FileSystem.makeAbsolutePath(existingItem),
        newItemPath
      );
    }
  },
  async *iterateBasenamesIn(pathOrFileInfo) {
    const info = pathOrFileInfo instanceof PathInfo ? pathOrFileInfo : await FileSystem.info(pathOrFileInfo);
    if (info.isFolder) {
      for await (const dirEntry of Deno.readDir(info.path)) {
        yield dirEntry.name;
      }
    }
  },
  listBasenamesIn(pathOrFileInfo) {
    return asyncIteratorToList3(FileSystem.iterateBasenamesIn(pathOrFileInfo));
  },
  async *iteratePathsIn(pathOrFileInfo, options = { recursively: false, shouldntInclude: null, shouldntExplore: null, searchOrder: "breadthFirstSearch", maxDepth: Infinity, dontFollowSymlinks: false, dontReturnSymlinks: false, maxDepthFromRoot: null }) {
    let info;
    try {
      info = pathOrFileInfo instanceof PathInfo ? pathOrFileInfo : await FileSystem.info(pathOrFileInfo);
    } catch (error) {
      if (!error.message.match(/^PermissionDenied:/)) {
        throw error;
      }
    }
    const path10 = info.path;
    const startingDepth = FileSystem.makeAbsolutePath(path10).split("/").length - 1;
    options.recursively = options.recursively == false && options.maxDepth == 1 ? false : options.recursively;
    if (options.maxDepthFromRoot == null) {
      options.maxDepthFromRoot = Infinity;
    }
    if (options.maxDepth != Infinity && options.maxDepth != null) {
      options.maxDepthFromRoot = startingDepth + options.maxDepth;
    }
    options.maxDepth = null;
    if (startingDepth < options.maxDepthFromRoot) {
      if (!options.recursively) {
        if (info.isFolder) {
          if (!options.shouldntInclude) {
            for await (const each2 of Deno.readDir(path10)) {
              if (options.dontReturnSymlinks && each2.isSymlink) {
                continue;
              }
              yield join4(path10, each2.name);
            }
          } else {
            const shouldntInclude = options.shouldntInclude;
            for await (const each2 of Deno.readDir(path10)) {
              const eachPath2 = join4(path10, each2.name);
              if (options.dontReturnSymlinks && each2.isSymlink) {
                continue;
              }
              const shouldntIncludeThis = shouldntInclude && await shouldntInclude(eachPath2);
              if (!shouldntIncludeThis) {
                yield eachPath2;
              }
            }
          }
        }
      } else {
        options = { exclude: /* @__PURE__ */ new Set(), searchOrder: "breadthFirstSearch", maxDepth: Infinity, ...options };
        options.searchOrder = options.searchOrder || "breadthFirstSearch";
        const { shouldntExplore, shouldntInclude } = options;
        if (!["breadthFirstSearch", "depthFirstSearch"].includes(options.searchOrder)) {
          throw Error(`when calling FileSystem.iterateItemsIn('${path10}', { searchOrder: ${options.searchOrder} })

    The searchOrder currently can only be 'depthFirstSearch' or 'breadthFirstSearch'
    However, it was not either of those: ${options.searchOrder}`);
        }
        const useBreadthFirstSearch = options.searchOrder == "breadthFirstSearch";
        const shouldntExploreThis = shouldntExplore && await shouldntExplore(info.path, info);
        if (!shouldntExploreThis && info.isFolder) {
          options.exclude = options.exclude instanceof Set ? options.exclude : new Set(options.exclude);
          if (!options.exclude.has(path10)) {
            const followSymlinks = !options.dontFollowSymlinks;
            const absolutePathVersion = FileSystem.makeAbsolutePath(path10);
            options.exclude.add(absolutePathVersion);
            const searchAfterwords = [];
            for await (const entry of Deno.readDir(path10)) {
              const eachPath2 = join4(path10, entry.name);
              if (options.dontReturnSymlinks && each.isSymlink) {
                continue;
              }
              const shouldntIncludeThis = shouldntInclude && await shouldntInclude(eachPath2);
              if (!shouldntIncludeThis) {
                yield eachPath2;
              }
              if (entry.isFile) {
                continue;
              }
              if (followSymlinks && !entry.isDirectory) {
                let isSymlinkToDirectory = false;
                try {
                  isSymlinkToDirectory = (await Deno.stat(eachPath2)).isDirectory;
                } catch (error) {
                }
                if (!isSymlinkToDirectory) {
                  continue;
                }
              }
              if (useBreadthFirstSearch) {
                searchAfterwords.push(eachPath2);
              } else {
                for await (const eachSubPath of FileSystem.iteratePathsIn(eachPath2, options)) {
                  yield eachSubPath;
                }
              }
            }
            options.recursively = false;
            while (searchAfterwords.length > 0) {
              const next = searchAfterwords.shift();
              for await (const eachSubPath of FileSystem.iteratePathsIn(next, options)) {
                yield eachSubPath;
                searchAfterwords.push(eachSubPath);
              }
            }
          }
        }
      }
    }
  },
  listPathsIn(pathOrFileInfo, options) {
    return asyncIteratorToList3(FileSystem.iteratePathsIn(pathOrFileInfo, options));
  },
  async *iterateItemsIn(pathOrFileInfo, options = { recursively: false, shouldntInclude: null, shouldntExplore: null, searchOrder: "breadthFirstSearch", maxDepth: Infinity }) {
    options = { exclude: /* @__PURE__ */ new Set(), searchOrder: "breadthFirstSearch", maxDepth: Infinity, ...options };
    options.searchOrder = options.searchOrder || "breadthFirstSearch";
    options.recursively = options.recursively == false && options.maxDepth == 1 ? false : options.recursively;
    const { shouldntExplore, shouldntInclude } = options;
    const info = pathOrFileInfo instanceof PathInfo ? pathOrFileInfo : await FileSystem.info(pathOrFileInfo);
    const path10 = info.path;
    if (!["breadthFirstSearch", "depthFirstSearch"].includes(options.searchOrder)) {
      throw Error(`when calling FileSystem.iterateItemsIn('${path10}', { searchOrder: ${options.searchOrder} })

    The searchOrder currently can only be 'depthFirstSearch' or 'breadthFirstSearch'
    However, it was not either of those: ${options.searchOrder}`);
    }
    const useBreadthFirstSearch = options.searchOrder == "breadthFirstSearch";
    const shouldntExploreThis = shouldntExplore && await shouldntExplore(info);
    if (!shouldntExploreThis && options.maxDepth > 0 && info.isFolder) {
      options.exclude = options.exclude instanceof Set ? options.exclude : new Set(options.exclude);
      if (!options.exclude.has(path10)) {
        const absolutePathVersion = FileSystem.makeAbsolutePath(path10);
        options.exclude.add(absolutePathVersion);
        options.maxDepth -= 1;
        const searchAfterwords = [];
        for await (const entry of Deno.readDir(path10)) {
          const eachItem = await FileSystem.info(join4(path10, entry.name));
          const shouldntIncludeThis = shouldntInclude && await shouldntInclude(eachItem);
          if (!shouldntIncludeThis) {
            yield eachItem;
          }
          if (options.recursively) {
            if (eachItem.isFolder) {
              if (useBreadthFirstSearch) {
                searchAfterwords.push(eachItem);
              } else {
                for await (const eachSubPath of FileSystem.iterateItemsIn(eachItem, options)) {
                  yield eachSubPath;
                }
              }
            }
          }
        }
        options.recursively = false;
        while (searchAfterwords.length > 0) {
          const next = searchAfterwords.shift();
          for await (const eachSubItem of FileSystem.iterateItemsIn(next, options)) {
            yield eachSubItem;
            if (eachSubItem.isFolder) {
              searchAfterwords.push(eachSubItem);
            }
          }
        }
      }
    }
  },
  async listItemsIn(pathOrFileInfo, options) {
    const outputPromises = [];
    for await (const eachPath2 of FileSystem.iteratePathsIn(pathOrFileInfo, options)) {
      outputPromises.push(FileSystem.info(eachPath2));
    }
    return Promise.all(outputPromises);
  },
  // includes symlinks if they link to files and pipes
  async listFileItemsIn(pathOrFileInfo, options = { treatAllSymlinksAsFiles: false }) {
    const { treatAllSymlinksAsFiles } = { treatAllSymlinksAsFiles: false, ...options };
    const items = await FileSystem.listItemsIn(pathOrFileInfo, options);
    if (treatAllSymlinksAsFiles) {
      return items.filter((eachItem) => eachItem.isFile || treatAllSymlinksAsFiles && eachItem.isSymlink);
    } else {
      return items.filter((eachItem) => eachItem.isFile);
    }
  },
  async listFilePathsIn(pathOrFileInfo, options = { treatAllSymlinksAsFiles: false }) {
    return (await FileSystem.listFileItemsIn(pathOrFileInfo, options)).map((each2) => each2.path);
  },
  async listFileBasenamesIn(pathOrFileInfo, options = { treatAllSymlinksAsFiles: false }) {
    return (await FileSystem.listFileItemsIn(pathOrFileInfo, options)).map((each2) => each2.basename);
  },
  async listFolderItemsIn(pathOrFileInfo, options = { ignoreSymlinks: false }) {
    const { ignoreSymlinks } = { ignoreSymlinks: false, ...options };
    const items = await FileSystem.listItemsIn(pathOrFileInfo, options);
    if (ignoreSymlinks) {
      return items.filter((eachItem) => eachItem.isFolder && !eachItem.isSymlink);
    } else {
      return items.filter((eachItem) => eachItem.isFolder);
    }
  },
  async listFolderPathsIn(pathOrFileInfo, options = { ignoreSymlinks: false }) {
    return (await FileSystem.listFolderItemsIn(pathOrFileInfo, options)).map((each2) => each2.path);
  },
  async listFolderBasenamesIn(pathOrFileInfo, options = { ignoreSymlinks: false }) {
    return (await FileSystem.listFolderItemsIn(pathOrFileInfo, options)).map((each2) => each2.basename);
  },
  recursivelyIterateItemsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    options.recursively = true;
    if (options.onlyHardlinks) {
      if (options.shouldntInclude) {
        const originalshouldntInclude = options.shouldntInclude;
        options.shouldntInclude = (each2) => each2.isSymlink || originalshouldntInclude(each2);
      } else {
        options.shouldntInclude = (each2) => each2.isSymlink;
      }
    }
    if (options.dontFollowSymlinks) {
      if (options.shouldntExplore) {
        const originalShouldntExplore = options.shouldntInclude;
        options.shouldntExplore = (each2) => each2.isSymlink || originalShouldntExplore(each2);
      } else {
        options.shouldntExplore = (each2) => each2.isSymlink;
      }
    }
    return FileSystem.iterateItemsIn(pathOrFileInfo, options);
  },
  recursivelyIteratePathsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    options.recursively = true;
    if (options.onlyHardlinks) {
      if (options.shouldntInclude) {
        const originalshouldntInclude = options.shouldntInclude;
        options.shouldntInclude = (each2) => each2.isSymlink || originalshouldntInclude(each2);
      } else {
        options.shouldntInclude = (each2) => each2.isSymlink;
      }
    }
    return FileSystem.iteratePathsIn(pathOrFileInfo, options);
  },
  recursivelyListPathsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    return asyncIteratorToList3(FileSystem.recursivelyIteratePathsIn(pathOrFileInfo, options));
  },
  recursivelyListItemsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    return asyncIteratorToList3(FileSystem.recursivelyIterateItemsIn(pathOrFileInfo, options));
  },
  async *globIterator(pattern, options = { startPath: null }) {
    pattern = FileSystem.normalize(pattern);
    var { startPath, ...iteratePathsOptions } = options;
    startPath = startPath || "./";
    const originalStartPath = startPath;
    startPath = FileSystem.makeAbsolutePath(startPath);
    const firstGlob = pattern.indexOf("*");
    if (firstGlob != -1) {
      const startingString = pattern.slice(0, firstGlob);
      const furthestConstantSlash = startingString.lastIndexOf("/");
      if (furthestConstantSlash != -1) {
        if (pattern[0] == "/") {
          startPath = pattern.slice(0, furthestConstantSlash);
        } else {
          startPath = `${startPath}/${pattern.slice(0, furthestConstantSlash)}`;
        }
      }
      pattern = pattern.slice(furthestConstantSlash + 1);
    }
    let maxDepthFromRoot;
    if (pattern.match(/\*\*/)) {
      maxDepthFromRoot = Infinity;
    } else {
      maxDepthFromRoot = `${FileSystem.makeAbsolutePath(startPath)}/${pattern}`.split("/").length - 1;
    }
    const fullPattern = `${startPath}/${pattern}`;
    const regex3 = globToRegExp2(fullPattern);
    const partials = fullPattern.split("/");
    let partialPattern = partials.shift();
    let partialRegexString = `^\\.$|${globToRegExp2(partialPattern).source}`;
    for (const each2 of partials) {
      partialPattern += "/" + each2;
      partialRegexString += "|" + globToRegExp2(partialPattern).source;
    }
    const partialRegex = new RegExp(partialRegexString);
    for await (const eachPath2 of FileSystem.iteratePathsIn(startPath, { recursively: true, maxDepthFromRoot, ...iteratePathsOptions, shouldntExplore: (eachPath3) => !eachPath3.match(partialRegex) })) {
      if (eachPath2.match(regex3) || FileSystem.makeAbsolutePath(eachPath2).match(regex3)) {
        yield FileSystem.makeRelativePath({
          from: originalStartPath,
          to: eachPath2
        });
      }
    }
  },
  glob(pattern, options = { startPath: null }) {
    return asyncIteratorToList3(FileSystem.globIterator(pattern, options));
  },
  async getPermissions({ path: path10 }) {
    const { mode } = await Deno.lstat(path10);
    return {
      owner: {
        //          rwxrwxrwx
        canRead: !!(256 & mode),
        canWrite: !!(128 & mode),
        canExecute: !!(64 & mode)
      },
      group: {
        canRead: !!(32 & mode),
        canWrite: !!(16 & mode),
        canExecute: !!(8 & mode)
      },
      others: {
        canRead: !!(4 & mode),
        canWrite: !!(2 & mode),
        canExecute: !!(1 & mode)
      }
    };
  },
  /**
  * Add/set file permissions
  *
  * @param {String} args.path - 
  * @param {Object|Boolean} args.recursively - 
  * @param {Object} args.permissions - 
  * @param {Object} args.permissions.owner - 
  * @param {Boolean} args.permissions.owner.canRead - 
  * @param {Boolean} args.permissions.owner.canWrite - 
  * @param {Boolean} args.permissions.owner.canExecute - 
  * @param {Object} args.permissions.group - 
  * @param {Boolean} args.permissions.group.canRead - 
  * @param {Boolean} args.permissions.group.canWrite - 
  * @param {Boolean} args.permissions.group.canExecute - 
  * @param {Object} args.permissions.others - 
  * @param {Boolean} args.permissions.others.canRead - 
  * @param {Boolean} args.permissions.others.canWrite - 
  * @param {Boolean} args.permissions.others.canExecute - 
  * @return {null} 
  *
  * @example
  * ```js
  *  await FileSystem.addPermissions({
  *      path: fileOrFolderPath,
  *      permissions: {
  *          owner: {
  *              canExecute: true,
  *          },
  *      }
  *  })
  * ```
  */
  async addPermissions({ path: path10, permissions = { owner: {}, group: {}, others: {} }, recursively = false }) {
    permissions = { owner: {}, group: {}, others: {}, ...permissions };
    let permissionNumber = 0;
    let fileInfo;
    if (!(Object.keys(permissions.owner).length === Object.keys(permissions.group).length === Object.keys(permissions.others).length === 3)) {
      fileInfo = await FileSystem.info(path10);
      permissionNumber = fileInfo.lstat.mode & 511;
    }
    if (permissions.owner.canRead != null) {
      if (permissions.owner.canRead) {
        permissionNumber |= 256;
      } else {
        permissionNumber &= 767;
      }
    }
    if (permissions.owner.canWrite != null) {
      if (permissions.owner.canWrite) {
        permissionNumber |= 128;
      } else {
        permissionNumber &= 895;
      }
    }
    if (permissions.owner.canExecute != null) {
      if (permissions.owner.canExecute) {
        permissionNumber |= 64;
      } else {
        permissionNumber &= 959;
      }
    }
    if (permissions.group.canRead != null) {
      if (permissions.group.canRead) {
        permissionNumber |= 32;
      } else {
        permissionNumber &= 991;
      }
    }
    if (permissions.group.canWrite != null) {
      if (permissions.group.canWrite) {
        permissionNumber |= 16;
      } else {
        permissionNumber &= 1007;
      }
    }
    if (permissions.group.canExecute != null) {
      if (permissions.group.canExecute) {
        permissionNumber |= 8;
      } else {
        permissionNumber &= 1015;
      }
    }
    if (permissions.others.canRead != null) {
      if (permissions.others.canRead) {
        permissionNumber |= 4;
      } else {
        permissionNumber &= 1019;
      }
    }
    if (permissions.others.canWrite != null) {
      if (permissions.others.canWrite) {
        permissionNumber |= 2;
      } else {
        permissionNumber &= 1021;
      }
    }
    if (permissions.others.canExecute != null) {
      if (permissions.others.canExecute) {
        permissionNumber |= 1;
      } else {
        permissionNumber &= 1022;
      }
    }
    if (recursively == false || fileInfo instanceof Object && fileInfo.isFile || !(fileInfo instanceof Object) && (await FileSystem.info(path10)).isFile) {
      return Deno.chmod(path10.path || path10, permissionNumber);
    } else {
      const promises = [];
      const paths = await FileSystem.recursivelyListPathsIn(path10, { onlyHardlinks: false, dontFollowSymlinks: false, ...recursively });
      for (const eachPath2 of paths) {
        promises.push(
          Deno.chmod(eachPath2, permissionNumber).catch(console.error)
        );
      }
      return new Promise(async (resolve15, reject) => {
        for (const each2 of promises) {
          await each2;
        }
        resolve15();
      });
    }
  },
  // alias
  setPermissions(...args) {
    return FileSystem.addPermissions(...args);
  },
  async write({ path: path10, data, force = true, overwrite = false, renameExtension = null }) {
    path10 = pathStandardize(path10);
    await grabPathLock(path10);
    if (force) {
      FileSystem.sync.ensureIsFolder(FileSystem.parentPath(path10), { overwrite, renameExtension });
      const info = FileSystem.sync.info(path10);
      if (info.isDirectory) {
        FileSystem.sync.remove(path10);
      }
    }
    let output2;
    if (typeof data == "string") {
      output2 = await Deno.writeTextFile(path10, data);
    } else if (typedArrayClasses4.some((dataClass) => data instanceof dataClass)) {
      output2 = await Deno.writeFile(path10, data);
    } else if (isGeneratorType3(data) || data[Symbol.iterator] || data[Symbol.asyncIterator]) {
      const file = await Deno.open(path10, { read: true, write: true, create: true, truncate: true });
      const encoder3 = new TextEncoder();
      const encode2 = encoder3.encode.bind(encoder3);
      try {
        let index = 0;
        for await (let packet of data) {
          if (typeof packet == "string") {
            packet = encode2(packet);
          }
          await Deno.write(file.rid, packet);
        }
      } finally {
        Deno.close(file.rid);
      }
    }
    delete locker[path10];
    return output2;
  },
  async append({ path: path10, data, force = true, overwrite = false, renameExtension = null }) {
    path10 = pathStandardize(path10);
    await grabPathLock(path10);
    if (force) {
      FileSystem.sync.ensureIsFolder(FileSystem.parentPath(path10), { overwrite, renameExtension });
      const info = FileSystem.sync.info(path10);
      if (info.isDirectory) {
        FileSystem.sync.remove(path10);
      }
    }
    const file = await Deno.open(path10, { read: true, write: true, create: true });
    await file.seek(0, Deno.SeekMode.End);
    if (typeof data == "string") {
      await file.write(new TextEncoder().encode(data));
    } else {
      await file.write(data);
    }
    await file.close();
    delete locker[path10];
  },
  async makeHardPathTo(path10, options = {}) {
    var { cache: cache6 } = { cache: {}, ...options };
    if (cache6[path10]) {
      return cache6[path10];
    }
    const [folders, name, extension] = FileSystem.pathPieces(FileSystem.makeAbsolutePath(path10));
    let topDownPath = ``;
    for (const eachFolderName of folders) {
      topDownPath += `/${eachFolderName}`;
      if (cache6[topDownPath]) {
        topDownPath = cache6[topDownPath];
        continue;
      }
      const unchangedPath = topDownPath;
      const info = await FileSystem.info(topDownPath);
      if (info.isSymlink) {
        const absolutePathToIntermediate = await FileSystem.finalTargetOf(info.path, { _parentsHaveBeenChecked: true, cache: cache6 });
        if (absolutePathToIntermediate == null) {
          return null;
        }
        topDownPath = topDownPath.slice(0, -(eachFolderName.length + 1));
        const relativePath = FileSystem.makeRelativePath({
          from: topDownPath,
          to: absolutePathToIntermediate
        });
        topDownPath += `/${relativePath}`;
        topDownPath = normalize4(topDownPath);
      }
      cache6[unchangedPath] = topDownPath;
    }
    const hardPath = normalize4(`${topDownPath}/${name}${extension}`);
    cache6[path10] = hardPath;
    return hardPath;
  },
  async walkUpImport(path10, start) {
    const startPath = start || FileSystem.pathOfCaller(1);
    const nearestPath = await FileSystem.walkUpUntil(path10, startPath);
    if (nearestPath) {
      const absolutePath = FileSystem.makeAbsolutePath(`${nearestPath}/${path10}`);
      return import(toFileUrl3(absolutePath).href);
    } else {
      throw Error(`Tried to walkUpImport ${path10}, starting at ${startPath}, but was unable to find any files`);
    }
  },
  sync: {
    // things that are already sync
    get parentPath() {
      return FileSystem.parentPath;
    },
    get dirname() {
      return FileSystem.dirname;
    },
    get basename() {
      return FileSystem.basename;
    },
    get extname() {
      return FileSystem.extname;
    },
    get join() {
      return FileSystem.join;
    },
    get thisFile() {
      return FileSystem.thisFile;
    },
    get thisFolder() {
      return FileSystem.thisFolder;
    },
    get normalize() {
      return FileSystem.normalize;
    },
    get isAbsolutePath() {
      return FileSystem.isAbsolutePath;
    },
    get isRelativePath() {
      return FileSystem.isRelativePath;
    },
    get makeRelativePath() {
      return FileSystem.makeRelativePath;
    },
    get makeAbsolutePath() {
      return FileSystem.makeAbsolutePath;
    },
    get pathDepth() {
      return FileSystem.pathDepth;
    },
    get pathPieces() {
      return FileSystem.pathPieces;
    },
    get extendName() {
      return FileSystem.extendName;
    },
    get allParentPaths() {
      return FileSystem.allParentPaths;
    },
    get pathOfCaller() {
      return FileSystem.pathOfCaller;
    },
    get home() {
      return FileSystem.home;
    },
    get workingDirectory() {
      return FileSystem.workingDirectory;
    },
    get cwd() {
      return FileSystem.cwd;
    },
    get pwd() {
      return FileSystem.pwd;
    },
    get cd() {
      return FileSystem.cd;
    },
    get changeDirectory() {
      return FileSystem.changeDirectory;
    },
    set workingDirectory(value) {
      return FileSystem.workingDirectory = value;
    },
    set cwd(value) {
      return FileSystem.workingDirectory = value;
    },
    set pwd(value) {
      return FileSystem.workingDirectory = value;
    },
    info(fileOrFolderPath, _cachedLstat = null) {
      let lstat = _cachedLstat;
      try {
        lstat = Deno.lstatSync(fileOrFolderPath);
      } catch (error) {
        lstat = { doesntExist: true };
      }
      let stat = {};
      if (!lstat.isSymlink) {
        stat = {
          isBrokenLink: false,
          isLoopOfLinks: false
        };
      } else {
        try {
          stat = Deno.statSync(fileOrFolderPath);
        } catch (error) {
          if (error.message.match(/^Too many levels of symbolic links/)) {
            stat.isBrokenLink = true;
            stat.isLoopOfLinks = true;
          } else if (error.message.match(/^No such file or directory/)) {
            stat.isBrokenLink = true;
          } else {
            throw error;
          }
        }
      }
      return new PathInfo({ path: fileOrFolderPath, _lstatData: lstat, _statData: stat });
    },
    read(path10) {
      path10 = pathStandardize(path10);
      let output2;
      try {
        output2 = Deno.readTextFileSync(path10);
      } catch (error) {
      }
      return output2;
    },
    readBytes(path10) {
      path10 = pathStandardize(path10);
      let output2;
      try {
        output2 = Deno.readFileSync(path10);
      } catch (error) {
      }
      return output2;
    },
    *readLinesIteratively(path10) {
      path10 = pathStandardize(path10);
      const file = Deno.openSync(path10);
      try {
        yield* readLines(file);
      } finally {
        Deno.close(file.rid);
      }
    },
    /**
     * find a root folder based on a child path
     *
     * @example
     * ```js
     *     import { FileSystem } from "https://deno.land/x/quickr/main/file_system.js"
     * 
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil(".git")
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil({
     *         subPath:".git",
     *         startPath: FileSystem.pwd,
     *     })
     *
     *     // below will result in that^ same folder (assuming all your .git folders have config files)
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil(".git/config")
     * 
     *     // below will result in the same folder, but only if theres a local master branch
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil(".git/refs/heads/master")
     *```
     */
    walkUpUntil(subPath, startPath = null) {
      subPath = subPath instanceof PathInfo ? subPath.path : subPath;
      if (subPath instanceof Object) {
        var { subPath, startPath } = subPath;
      }
      let here;
      if (!startPath) {
        here = Deno.cwd();
      } else if (isAbsolute3(startPath)) {
        here = startPath;
      } else {
        here = join4(here, startPath);
      }
      while (1) {
        let checkPath = join4(here, subPath);
        const pathInfo = Deno.lstatSync(checkPath).catch(() => ({ doesntExist: true }));
        if (!pathInfo.doesntExist) {
          return here;
        }
        if (here == dirname3(here)) {
          return null;
        } else {
          here = dirname3(here);
        }
      }
    },
    nextTargetOf(path10, options = {}) {
      const originalWasItem = path10 instanceof PathInfo;
      const item = originalWasItem ? path10 : new PathInfo({ path: path10 });
      const lstat = item.lstat;
      if (lstat.isSymlink) {
        const relativeOrAbsolutePath = Deno.readLinkSync(item.path);
        if (isAbsolute3(relativeOrAbsolutePath)) {
          if (originalWasItem) {
            return new PathInfo({ path: relativeOrAbsolutePath });
          } else {
            return relativeOrAbsolutePath;
          }
        } else {
          const path11 = `${FileSystem.sync.makeHardPathTo(dirname3(item.path))}/${relativeOrAbsolutePath}`;
          if (originalWasItem) {
            return new PathInfo({ path: path11 });
          } else {
            return path11;
          }
        }
      } else {
        if (originalWasItem) {
          return item;
        } else {
          return item.path;
        }
      }
    },
    finalTargetOf(path10, options = {}) {
      const { _parentsHaveBeenChecked, cache: cache6 } = { _parentsHaveBeenChecked: false, cache: {}, ...options };
      const originalWasItem = path10 instanceof PathInfo;
      path10 = path10.path || path10;
      let result2 = Deno.lstatSync(path10).catch(() => ({ doesntExist: true }));
      if (result2.doesntExist) {
        return null;
      }
      path10 = FileSystem.sync.makeHardPathTo(path10, { cache: cache6 });
      const pathChain = [];
      while (result2.isSymlink) {
        const relativeOrAbsolutePath = Deno.readLinkSync(path10);
        if (isAbsolute3(relativeOrAbsolutePath)) {
          path10 = relativeOrAbsolutePath;
        } else {
          path10 = `${FileSystem.parentPath(path10)}/${relativeOrAbsolutePath}`;
        }
        result2 = Deno.lstatSync(path10).catch(() => ({ doesntExist: true }));
        if (result2.doesntExist) {
          return null;
        }
        path10 = FileSystem.sync.makeHardPathTo(path10, { cache: cache6 });
        if (pathChain.includes(path10)) {
          return null;
        }
        pathChain.push(path10);
      }
      path10 = FileSystem.normalize(path10);
      if (originalWasItem) {
        return new PathInfo({ path: path10 });
      } else {
        return path10;
      }
    },
    makeHardPathTo(path10, options = {}) {
      var { cache: cache6 } = { cache: {}, ...options };
      if (cache6[path10]) {
        return cache6[path10];
      }
      const [folders, name, extension] = FileSystem.pathPieces(FileSystem.makeAbsolutePath(path10));
      let topDownPath = ``;
      for (const eachFolderName of folders) {
        topDownPath += `/${eachFolderName}`;
        if (cache6[topDownPath]) {
          topDownPath = cache6[topDownPath];
          continue;
        }
        const unchangedPath = topDownPath;
        const info = FileSystem.sync.info(topDownPath);
        if (info.isSymlink) {
          const absolutePathToIntermediate = FileSystem.sync.finalTargetOf(info.path, { _parentsHaveBeenChecked: true, cache: cache6 });
          if (absolutePathToIntermediate == null) {
            return null;
          }
          topDownPath = topDownPath.slice(0, -(eachFolderName.length + 1));
          const relativePath = FileSystem.makeRelativePath({
            from: topDownPath,
            to: absolutePathToIntermediate
          });
          topDownPath += `/${relativePath}`;
          topDownPath = normalize4(topDownPath);
        }
        cache6[unchangedPath] = topDownPath;
      }
      const hardPath = normalize4(`${topDownPath}/${name}${extension}`);
      cache6[path10] = hardPath;
      return hardPath;
    },
    remove(fileOrFolder) {
      if (fileOrFolder instanceof Array) {
        return fileOrFolder.map(FileSystem.sync.remove);
      }
      fileOrFolder = fileOrFolder.path || fileOrFolder;
      let exists2 = false;
      let item;
      try {
        item = Deno.lstatSync(fileOrFolder);
        exists2 = true;
      } catch (error) {
      }
      if (exists2) {
        if (item.isFile || item.isSymlink) {
          return Deno.removeSync(fileOrFolder.replace(/\/+$/, ""));
        } else {
          return Deno.removeSync(fileOrFolder.replace(/\/+$/, ""), { recursive: true });
        }
      }
    },
    moveOutOfTheWay(path10, options = { extension: null }) {
      path10 = pathStandardize(path10);
      const extension = options?.extension || FileSystem.defaultRenameExtension;
      const info = FileSystem.sync.info(path10);
      if (info.exists) {
        const newPath = path10 + extension;
        FileSystem.sync.moveOutOfTheWay(newPath, { extension });
        moveSync(path10, newPath);
      }
    },
    ensureIsFolder(path10, options = { overwrite: false, renameExtension: null }) {
      path10 = pathStandardize(path10);
      const { overwrite, renameExtension } = defaultOptionsHelper(options);
      path10 = path10.path || path10;
      path10 = FileSystem.makeAbsolutePath(path10);
      const parentPath = dirname3(path10);
      if (parentPath == path10) {
        return;
      }
      const parent = FileSystem.sync.info(parentPath);
      if (!parent.isDirectory) {
        FileSystem.sync.ensureIsFolder(parentPath, { overwrite, renameExtension });
      }
      let pathInfo = FileSystem.sync.info(path10);
      if (pathInfo.exists && !pathInfo.isDirectory) {
        if (overwrite) {
          FileSystem.sync.remove(path10);
        } else {
          FileSystem.sync.moveOutOfTheWay(path10, { extension: renameExtension });
        }
      }
      Deno.mkdirSync(path10, { recursive: true });
      return path10;
    },
    /**
     * Move/Remove everything and Ensure parent folders
     *
     * @param path
     * @param options.overwrite - if false, then things in the way will be moved instead of deleted
     * @param options.extension - the string to append when renaming files to get them out of the way
     * 
     * @example
     * ```js
     *     FileSystem.sync.clearAPathFor("./something")
     * ```
     */
    clearAPathFor(path10, options = { overwrite: false, renameExtension: null }) {
      const { overwrite, renameExtension } = defaultOptionsHelper(options);
      const originalPath = path10;
      const paths = [];
      while (dirname3(path10) !== path10) {
        paths.push(path10);
        path10 = dirname3(path10);
      }
      for (const eachPath2 of paths.reverse()) {
        const info = FileSystem.sync.info(eachPath2);
        if (!info.exists) {
          break;
        } else if (info.isFile) {
          if (overwrite) {
            FileSystem.sync.remove(eachPath2);
          } else {
            FileSystem.sync.moveOutOfTheWay(eachPath2, { extension: renameExtension });
          }
        }
      }
      Deno.mkdirSync(dirname3(originalPath), { recursive: true });
      return originalPath;
    },
    append({ path: path10, data, force = true, overwrite = false, renameExtension = null }) {
      path10 = pathStandardize(path10);
      if (force) {
        FileSystem.sync.ensureIsFolder(FileSystem.parentPath(path10), { overwrite, renameExtension });
        const info = FileSystem.sync.info(path10);
        if (info.isDirectory) {
          FileSystem.sync.remove(path10);
        }
      }
      const file = Deno.openSync(path10, { read: true, write: true, create: true });
      file.seekSync(0, Deno.SeekMode.End);
      if (typeof data == "string") {
        file.writeSync(new TextEncoder().encode(data));
      } else {
        file.writeSync(data);
      }
      file.close();
    },
    write({ path: path10, data, force = true, overwrite = false, renameExtension = null }) {
      path10 = pathStandardize(path10);
      if (force) {
        FileSystem.sync.ensureIsFolder(FileSystem.parentPath(path10), { overwrite, renameExtension });
        const info = FileSystem.sync.info(path10);
        if (info.isDirectory) {
          FileSystem.sync.remove(path10);
        }
      }
      let output2;
      if (typeof data == "string") {
        output2 = Deno.writeTextFileSync(path10, data);
      } else if (typedArrayClasses4.some((dataClass) => data instanceof dataClass)) {
        output2 = Deno.writeFileSync(path10, data);
      } else if (isGeneratorType3(data) || data[Symbol.iterator] || data[Symbol.asyncIterator]) {
        const file = Deno.openSync(path10, { read: true, write: true, create: true, truncate: true });
        const encoder3 = new TextEncoder();
        const encode2 = encoder3.encode.bind(encoder3);
        try {
          let index = 0;
          for (let packet of data) {
            if (typeof packet == "string") {
              packet = encode2(packet);
            }
            Deno.writeSync(file.rid, packet);
          }
        } finally {
          Deno.close(file.rid);
        }
      }
      return output2;
    }
    // TODO:
    // move
    // ensureIsFile
    // copy
    // relativeLink
    // absoluteLink
    // iterateBasenamesIn
    // iteratePathsIn
    // iterateItemsIn
    // listItemsIn
    // listFileItemsIn
    // listFilePathsIn
    // listFileBasenamesIn
    // listFolderItemsIn
    // listFolderPathsIn
    // listFolderBasenamesIn
    // globIterator
    // getPermissions
    // addPermissions
    // Note:
    // cannot be sync:
    // walkUpImport 
  }
};
var glob = FileSystem.glob;

// https://deno.land/std@0.121.0/io/buffer.ts
var MIN_READ = 32 * 1024;
var MAX_SIZE = 2 ** 32 - 2;
var CR2 = "\r".charCodeAt(0);
var LF2 = "\n".charCodeAt(0);

// https://deno.land/std@0.121.0/streams/conversion.ts
var DEFAULT_CHUNK_SIZE = 16640;
var DEFAULT_BUFFER_SIZE = 32 * 1024;
function isCloser(value) {
  return typeof value === "object" && value != null && "close" in value && // deno-lint-ignore no-explicit-any
  typeof value["close"] === "function";
}
function writableStreamFromWriter(writer, options = {}) {
  const { autoClose = true } = options;
  return new WritableStream({
    async write(chunk, controller) {
      try {
        await writeAll(writer, chunk);
      } catch (e) {
        controller.error(e);
        if (isCloser(writer) && autoClose) {
          writer.close();
        }
      }
    },
    close() {
      if (isCloser(writer) && autoClose) {
        writer.close();
      }
    },
    abort() {
      if (isCloser(writer) && autoClose) {
        writer.close();
      }
    }
  });
}
function readableStreamFromReader(reader, options = {}) {
  const {
    autoClose = true,
    chunkSize = DEFAULT_CHUNK_SIZE,
    strategy
  } = options;
  return new ReadableStream({
    async pull(controller) {
      const chunk = new Uint8Array(chunkSize);
      try {
        const read = await reader.read(chunk);
        if (read === null) {
          if (isCloser(reader) && autoClose) {
            reader.close();
          }
          controller.close();
          return;
        }
        controller.enqueue(chunk.subarray(0, read));
      } catch (e) {
        controller.error(e);
        if (isCloser(reader)) {
          reader.close();
        }
      }
    },
    cancel() {
      if (isCloser(reader) && autoClose) {
        reader.close();
      }
    }
  }, strategy);
}
async function writeAll(w, arr) {
  let nwritten = 0;
  while (nwritten < arr.length) {
    nwritten += await w.write(arr.subarray(nwritten));
  }
}

// https://deno.land/std@0.128.0/bytes/mod.ts
function copy4(src, dst, off = 0) {
  off = Math.max(0, Math.min(off, dst.byteLength));
  const dstBytesAvailable = dst.byteLength - off;
  if (src.byteLength > dstBytesAvailable) {
    src = src.subarray(0, dstBytesAvailable);
  }
  dst.set(src, off);
  return src.byteLength;
}

// https://deno.land/std@0.128.0/io/buffer.ts
var MIN_READ2 = 32 * 1024;
var MAX_SIZE2 = 2 ** 32 - 2;
var Buffer3 = class {
  #buf;
  // contents are the bytes buf[off : len(buf)]
  #off = 0;
  // read at buf[off], write at buf[buf.byteLength]
  constructor(ab) {
    this.#buf = ab === void 0 ? new Uint8Array(0) : new Uint8Array(ab);
  }
  /** Returns a slice holding the unread portion of the buffer.
   *
   * The slice is valid for use only until the next buffer modification (that
   * is, only until the next call to a method like `read()`, `write()`,
   * `reset()`, or `truncate()`). If `options.copy` is false the slice aliases the buffer content at
   * least until the next buffer modification, so immediate changes to the
   * slice will affect the result of future reads.
   * @param options Defaults to `{ copy: true }`
   */
  bytes(options = { copy: true }) {
    if (options.copy === false)
      return this.#buf.subarray(this.#off);
    return this.#buf.slice(this.#off);
  }
  /** Returns whether the unread portion of the buffer is empty. */
  empty() {
    return this.#buf.byteLength <= this.#off;
  }
  /** A read only number of bytes of the unread portion of the buffer. */
  get length() {
    return this.#buf.byteLength - this.#off;
  }
  /** The read only capacity of the buffer's underlying byte slice, that is,
   * the total space allocated for the buffer's data. */
  get capacity() {
    return this.#buf.buffer.byteLength;
  }
  /** Discards all but the first `n` unread bytes from the buffer but
   * continues to use the same allocated storage. It throws if `n` is
   * negative or greater than the length of the buffer. */
  truncate(n) {
    if (n === 0) {
      this.reset();
      return;
    }
    if (n < 0 || n > this.length) {
      throw Error("bytes.Buffer: truncation out of range");
    }
    this.#reslice(this.#off + n);
  }
  reset() {
    this.#reslice(0);
    this.#off = 0;
  }
  #tryGrowByReslice(n) {
    const l2 = this.#buf.byteLength;
    if (n <= this.capacity - l2) {
      this.#reslice(l2 + n);
      return l2;
    }
    return -1;
  }
  #reslice(len) {
    assert2(len <= this.#buf.buffer.byteLength);
    this.#buf = new Uint8Array(this.#buf.buffer, 0, len);
  }
  /** Reads the next `p.length` bytes from the buffer or until the buffer is
   * drained. Returns the number of bytes read. If the buffer has no data to
   * return, the return is EOF (`null`). */
  readSync(p) {
    if (this.empty()) {
      this.reset();
      if (p.byteLength === 0) {
        return 0;
      }
      return null;
    }
    const nread = copy4(this.#buf.subarray(this.#off), p);
    this.#off += nread;
    return nread;
  }
  /** Reads the next `p.length` bytes from the buffer or until the buffer is
   * drained. Resolves to the number of bytes read. If the buffer has no
   * data to return, resolves to EOF (`null`).
   *
   * NOTE: This methods reads bytes synchronously; it's provided for
   * compatibility with `Reader` interfaces.
   */
  read(p) {
    const rr = this.readSync(p);
    return Promise.resolve(rr);
  }
  writeSync(p) {
    const m = this.#grow(p.byteLength);
    return copy4(p, this.#buf, m);
  }
  /** NOTE: This methods writes bytes synchronously; it's provided for
   * compatibility with `Writer` interface. */
  write(p) {
    const n = this.writeSync(p);
    return Promise.resolve(n);
  }
  #grow(n) {
    const m = this.length;
    if (m === 0 && this.#off !== 0) {
      this.reset();
    }
    const i2 = this.#tryGrowByReslice(n);
    if (i2 >= 0) {
      return i2;
    }
    const c = this.capacity;
    if (n <= Math.floor(c / 2) - m) {
      copy4(this.#buf.subarray(this.#off), this.#buf);
    } else if (c + n > MAX_SIZE2) {
      throw new Error("The buffer cannot be grown beyond the maximum size.");
    } else {
      const buf = new Uint8Array(Math.min(2 * c + n, MAX_SIZE2));
      copy4(this.#buf.subarray(this.#off), buf);
      this.#buf = buf;
    }
    this.#off = 0;
    this.#reslice(Math.min(m + n, MAX_SIZE2));
    return m;
  }
  /** Grows the buffer's capacity, if necessary, to guarantee space for
   * another `n` bytes. After `.grow(n)`, at least `n` bytes can be written to
   * the buffer without another allocation. If `n` is negative, `.grow()` will
   * throw. If the buffer can't grow it will throw an error.
   *
   * Based on Go Lang's
   * [Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow). */
  grow(n) {
    if (n < 0) {
      throw Error("Buffer.grow: negative count");
    }
    const m = this.#grow(n);
    this.#reslice(m);
  }
  /** Reads data from `r` until EOF (`null`) and appends it to the buffer,
   * growing the buffer as needed. It resolves to the number of bytes read.
   * If the buffer becomes too large, `.readFrom()` will reject with an error.
   *
   * Based on Go Lang's
   * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */
  async readFrom(r) {
    let n = 0;
    const tmp = new Uint8Array(MIN_READ2);
    while (true) {
      const shouldGrow = this.capacity - this.length < MIN_READ2;
      const buf = shouldGrow ? tmp : new Uint8Array(this.#buf.buffer, this.length);
      const nread = await r.read(buf);
      if (nread === null) {
        return n;
      }
      if (shouldGrow)
        this.writeSync(buf.subarray(0, nread));
      else
        this.#reslice(this.length + nread);
      n += nread;
    }
  }
  /** Reads data from `r` until EOF (`null`) and appends it to the buffer,
   * growing the buffer as needed. It returns the number of bytes read. If the
   * buffer becomes too large, `.readFromSync()` will throw an error.
   *
   * Based on Go Lang's
   * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */
  readFromSync(r) {
    let n = 0;
    const tmp = new Uint8Array(MIN_READ2);
    while (true) {
      const shouldGrow = this.capacity - this.length < MIN_READ2;
      const buf = shouldGrow ? tmp : new Uint8Array(this.#buf.buffer, this.length);
      const nread = r.readSync(buf);
      if (nread === null) {
        return n;
      }
      if (shouldGrow)
        this.writeSync(buf.subarray(0, nread));
      else
        this.#reslice(this.length + nread);
      n += nread;
    }
  }
};
var CR3 = "\r".charCodeAt(0);
var LF3 = "\n".charCodeAt(0);

// https://deno.land/std@0.128.0/io/readers.ts
var StringReader = class extends Buffer3 {
  constructor(s) {
    super(new TextEncoder().encode(s).buffer);
  }
};

// https://deno.land/std@0.128.0/streams/conversion.ts
var DEFAULT_BUFFER_SIZE2 = 32 * 1024;

// https://deno.land/std@0.128.0/fmt/colors.ts
var { Deno: Deno3 } = globalThis;
var noColor2 = typeof Deno3?.noColor === "boolean" ? Deno3.noColor : true;
var ANSI_PATTERN2 = new RegExp(
  [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
  ].join("|"),
  "g"
);

// https://deno.land/std@0.128.0/io/files.ts
var DEFAULT_BUFFER_SIZE3 = 32 * 1024;

// https://deno.land/std@0.128.0/io/util.ts
var DEFAULT_BUFFER_SIZE4 = 32 * 1024;
var MAX_SAFE_INTEGER = BigInt(Number.MAX_SAFE_INTEGER);

// https://deno.land/std@0.128.0/io/writers.ts
var decoder = new TextDecoder();

// https://deno.land/std@0.117.0/_util/os.ts
var osType4 = (() => {
  const { Deno: Deno4 } = globalThis;
  if (typeof Deno4?.build?.os === "string") {
    return Deno4.build.os;
  }
  const { navigator } = globalThis;
  if (navigator?.appVersion?.includes?.("Win") ?? false) {
    return "windows";
  }
  return "linux";
})();
var isWindows4 = osType4 === "windows";

// https://deno.land/std@0.117.0/path/win32.ts
var win32_exports4 = {};
__export(win32_exports4, {
  basename: () => basename9,
  delimiter: () => delimiter9,
  dirname: () => dirname9,
  extname: () => extname9,
  format: () => format9,
  fromFileUrl: () => fromFileUrl9,
  isAbsolute: () => isAbsolute9,
  join: () => join12,
  normalize: () => normalize12,
  parse: () => parse9,
  relative: () => relative9,
  resolve: () => resolve9,
  sep: () => sep9,
  toFileUrl: () => toFileUrl9,
  toNamespacedPath: () => toNamespacedPath9
});

// https://deno.land/std@0.117.0/path/_constants.ts
var CHAR_UPPERCASE_A4 = 65;
var CHAR_LOWERCASE_A4 = 97;
var CHAR_UPPERCASE_Z4 = 90;
var CHAR_LOWERCASE_Z4 = 122;
var CHAR_DOT4 = 46;
var CHAR_FORWARD_SLASH4 = 47;
var CHAR_BACKWARD_SLASH4 = 92;
var CHAR_COLON4 = 58;
var CHAR_QUESTION_MARK4 = 63;

// https://deno.land/std@0.117.0/path/_util.ts
function assertPath4(path10) {
  if (typeof path10 !== "string") {
    throw new TypeError(
      `Path must be a string. Received ${JSON.stringify(path10)}`
    );
  }
}
function isPosixPathSeparator4(code2) {
  return code2 === CHAR_FORWARD_SLASH4;
}
function isPathSeparator4(code2) {
  return isPosixPathSeparator4(code2) || code2 === CHAR_BACKWARD_SLASH4;
}
function isWindowsDeviceRoot4(code2) {
  return code2 >= CHAR_LOWERCASE_A4 && code2 <= CHAR_LOWERCASE_Z4 || code2 >= CHAR_UPPERCASE_A4 && code2 <= CHAR_UPPERCASE_Z4;
}
function normalizeString4(path10, allowAboveRoot, separator, isPathSeparator6) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code2;
  for (let i2 = 0, len = path10.length; i2 <= len; ++i2) {
    if (i2 < len)
      code2 = path10.charCodeAt(i2);
    else if (isPathSeparator6(code2))
      break;
    else
      code2 = CHAR_FORWARD_SLASH4;
    if (isPathSeparator6(code2)) {
      if (lastSlash === i2 - 1 || dots === 1) {
      } else if (lastSlash !== i2 - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT4 || res.charCodeAt(res.length - 2) !== CHAR_DOT4) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf(separator);
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
            }
            lastSlash = i2;
            dots = 0;
            continue;
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i2;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += `${separator}..`;
          else
            res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += separator + path10.slice(lastSlash + 1, i2);
        else
          res = path10.slice(lastSlash + 1, i2);
        lastSegmentLength = i2 - lastSlash - 1;
      }
      lastSlash = i2;
      dots = 0;
    } else if (code2 === CHAR_DOT4 && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
function _format4(sep15, pathObject) {
  const dir = pathObject.dir || pathObject.root;
  const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
  if (!dir)
    return base;
  if (dir === pathObject.root)
    return dir + base;
  return dir + sep15 + base;
}
var WHITESPACE_ENCODINGS4 = {
  "	": "%09",
  "\n": "%0A",
  "\v": "%0B",
  "\f": "%0C",
  "\r": "%0D",
  " ": "%20"
};
function encodeWhitespace4(string2) {
  return string2.replaceAll(/[\s]/g, (c) => {
    return WHITESPACE_ENCODINGS4[c] ?? c;
  });
}

// https://deno.land/std@0.117.0/_util/assert.ts
var DenoStdInternalError4 = class extends Error {
  constructor(message) {
    super(message);
    this.name = "DenoStdInternalError";
  }
};
function assert7(expr, msg = "") {
  if (!expr) {
    throw new DenoStdInternalError4(msg);
  }
}

// https://deno.land/std@0.117.0/path/win32.ts
var sep9 = "\\";
var delimiter9 = ";";
function resolve9(...pathSegments) {
  let resolvedDevice = "";
  let resolvedTail = "";
  let resolvedAbsolute = false;
  for (let i2 = pathSegments.length - 1; i2 >= -1; i2--) {
    let path10;
    const { Deno: Deno4 } = globalThis;
    if (i2 >= 0) {
      path10 = pathSegments[i2];
    } else if (!resolvedDevice) {
      if (typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a drive-letter-less path without a CWD.");
      }
      path10 = Deno4.cwd();
    } else {
      if (typeof Deno4?.env?.get !== "function" || typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path10 = Deno4.cwd();
      if (path10 === void 0 || path10.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
        path10 = `${resolvedDevice}\\`;
      }
    }
    assertPath4(path10);
    const len = path10.length;
    if (len === 0)
      continue;
    let rootEnd = 0;
    let device = "";
    let isAbsolute15 = false;
    const code2 = path10.charCodeAt(0);
    if (len > 1) {
      if (isPathSeparator4(code2)) {
        isAbsolute15 = true;
        if (isPathSeparator4(path10.charCodeAt(1))) {
          let j = 2;
          let last = j;
          for (; j < len; ++j) {
            if (isPathSeparator4(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            const firstPart = path10.slice(last, j);
            last = j;
            for (; j < len; ++j) {
              if (!isPathSeparator4(path10.charCodeAt(j)))
                break;
            }
            if (j < len && j !== last) {
              last = j;
              for (; j < len; ++j) {
                if (isPathSeparator4(path10.charCodeAt(j)))
                  break;
              }
              if (j === len) {
                device = `\\\\${firstPart}\\${path10.slice(last)}`;
                rootEnd = j;
              } else if (j !== last) {
                device = `\\\\${firstPart}\\${path10.slice(last, j)}`;
                rootEnd = j;
              }
            }
          }
        } else {
          rootEnd = 1;
        }
      } else if (isWindowsDeviceRoot4(code2)) {
        if (path10.charCodeAt(1) === CHAR_COLON4) {
          device = path10.slice(0, 2);
          rootEnd = 2;
          if (len > 2) {
            if (isPathSeparator4(path10.charCodeAt(2))) {
              isAbsolute15 = true;
              rootEnd = 3;
            }
          }
        }
      }
    } else if (isPathSeparator4(code2)) {
      rootEnd = 1;
      isAbsolute15 = true;
    }
    if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      continue;
    }
    if (resolvedDevice.length === 0 && device.length > 0) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = `${path10.slice(rootEnd)}\\${resolvedTail}`;
      resolvedAbsolute = isAbsolute15;
    }
    if (resolvedAbsolute && resolvedDevice.length > 0)
      break;
  }
  resolvedTail = normalizeString4(
    resolvedTail,
    !resolvedAbsolute,
    "\\",
    isPathSeparator4
  );
  return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize12(path10) {
  assertPath4(path10);
  const len = path10.length;
  if (len === 0)
    return ".";
  let rootEnd = 0;
  let device;
  let isAbsolute15 = false;
  const code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator4(code2)) {
      isAbsolute15 = true;
      if (isPathSeparator4(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator4(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          const firstPart = path10.slice(last, j);
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator4(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator4(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              return `\\\\${firstPart}\\${path10.slice(last)}\\`;
            } else if (j !== last) {
              device = `\\\\${firstPart}\\${path10.slice(last, j)}`;
              rootEnd = j;
            }
          }
        }
      } else {
        rootEnd = 1;
      }
    } else if (isWindowsDeviceRoot4(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON4) {
        device = path10.slice(0, 2);
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator4(path10.charCodeAt(2))) {
            isAbsolute15 = true;
            rootEnd = 3;
          }
        }
      }
    }
  } else if (isPathSeparator4(code2)) {
    return "\\";
  }
  let tail;
  if (rootEnd < len) {
    tail = normalizeString4(
      path10.slice(rootEnd),
      !isAbsolute15,
      "\\",
      isPathSeparator4
    );
  } else {
    tail = "";
  }
  if (tail.length === 0 && !isAbsolute15)
    tail = ".";
  if (tail.length > 0 && isPathSeparator4(path10.charCodeAt(len - 1))) {
    tail += "\\";
  }
  if (device === void 0) {
    if (isAbsolute15) {
      if (tail.length > 0)
        return `\\${tail}`;
      else
        return "\\";
    } else if (tail.length > 0) {
      return tail;
    } else {
      return "";
    }
  } else if (isAbsolute15) {
    if (tail.length > 0)
      return `${device}\\${tail}`;
    else
      return `${device}\\`;
  } else if (tail.length > 0) {
    return device + tail;
  } else {
    return device;
  }
}
function isAbsolute9(path10) {
  assertPath4(path10);
  const len = path10.length;
  if (len === 0)
    return false;
  const code2 = path10.charCodeAt(0);
  if (isPathSeparator4(code2)) {
    return true;
  } else if (isWindowsDeviceRoot4(code2)) {
    if (len > 2 && path10.charCodeAt(1) === CHAR_COLON4) {
      if (isPathSeparator4(path10.charCodeAt(2)))
        return true;
    }
  }
  return false;
}
function join12(...paths) {
  const pathsCount = paths.length;
  if (pathsCount === 0)
    return ".";
  let joined;
  let firstPart = null;
  for (let i2 = 0; i2 < pathsCount; ++i2) {
    const path10 = paths[i2];
    assertPath4(path10);
    if (path10.length > 0) {
      if (joined === void 0)
        joined = firstPart = path10;
      else
        joined += `\\${path10}`;
    }
  }
  if (joined === void 0)
    return ".";
  let needsReplace = true;
  let slashCount = 0;
  assert7(firstPart != null);
  if (isPathSeparator4(firstPart.charCodeAt(0))) {
    ++slashCount;
    const firstLen = firstPart.length;
    if (firstLen > 1) {
      if (isPathSeparator4(firstPart.charCodeAt(1))) {
        ++slashCount;
        if (firstLen > 2) {
          if (isPathSeparator4(firstPart.charCodeAt(2)))
            ++slashCount;
          else {
            needsReplace = false;
          }
        }
      }
    }
  }
  if (needsReplace) {
    for (; slashCount < joined.length; ++slashCount) {
      if (!isPathSeparator4(joined.charCodeAt(slashCount)))
        break;
    }
    if (slashCount >= 2)
      joined = `\\${joined.slice(slashCount)}`;
  }
  return normalize12(joined);
}
function relative9(from, to) {
  assertPath4(from);
  assertPath4(to);
  if (from === to)
    return "";
  const fromOrig = resolve9(from);
  const toOrig = resolve9(to);
  if (fromOrig === toOrig)
    return "";
  from = fromOrig.toLowerCase();
  to = toOrig.toLowerCase();
  if (from === to)
    return "";
  let fromStart = 0;
  let fromEnd = from.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH4)
      break;
  }
  for (; fromEnd - 1 > fromStart; --fromEnd) {
    if (from.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH4)
      break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 0;
  let toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH4)
      break;
  }
  for (; toEnd - 1 > toStart; --toEnd) {
    if (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH4)
      break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i2 = 0;
  for (; i2 <= length; ++i2) {
    if (i2 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i2) === CHAR_BACKWARD_SLASH4) {
          return toOrig.slice(toStart + i2 + 1);
        } else if (i2 === 2) {
          return toOrig.slice(toStart + i2);
        }
      }
      if (fromLen > length) {
        if (from.charCodeAt(fromStart + i2) === CHAR_BACKWARD_SLASH4) {
          lastCommonSep = i2;
        } else if (i2 === 2) {
          lastCommonSep = 3;
        }
      }
      break;
    }
    const fromCode = from.charCodeAt(fromStart + i2);
    const toCode = to.charCodeAt(toStart + i2);
    if (fromCode !== toCode)
      break;
    else if (fromCode === CHAR_BACKWARD_SLASH4)
      lastCommonSep = i2;
  }
  if (i2 !== length && lastCommonSep === -1) {
    return toOrig;
  }
  let out = "";
  if (lastCommonSep === -1)
    lastCommonSep = 0;
  for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
    if (i2 === fromEnd || from.charCodeAt(i2) === CHAR_BACKWARD_SLASH4) {
      if (out.length === 0)
        out += "..";
      else
        out += "\\..";
    }
  }
  if (out.length > 0) {
    return out + toOrig.slice(toStart + lastCommonSep, toEnd);
  } else {
    toStart += lastCommonSep;
    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH4)
      ++toStart;
    return toOrig.slice(toStart, toEnd);
  }
}
function toNamespacedPath9(path10) {
  if (typeof path10 !== "string")
    return path10;
  if (path10.length === 0)
    return "";
  const resolvedPath = resolve9(path10);
  if (resolvedPath.length >= 3) {
    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH4) {
      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH4) {
        const code2 = resolvedPath.charCodeAt(2);
        if (code2 !== CHAR_QUESTION_MARK4 && code2 !== CHAR_DOT4) {
          return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
        }
      }
    } else if (isWindowsDeviceRoot4(resolvedPath.charCodeAt(0))) {
      if (resolvedPath.charCodeAt(1) === CHAR_COLON4 && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH4) {
        return `\\\\?\\${resolvedPath}`;
      }
    }
  }
  return path10;
}
function dirname9(path10) {
  assertPath4(path10);
  const len = path10.length;
  if (len === 0)
    return ".";
  let rootEnd = -1;
  let end = -1;
  let matchedSlash = true;
  let offset = 0;
  const code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator4(code2)) {
      rootEnd = offset = 1;
      if (isPathSeparator4(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator4(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator4(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator4(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              return path10;
            }
            if (j !== last) {
              rootEnd = offset = j + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot4(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON4) {
        rootEnd = offset = 2;
        if (len > 2) {
          if (isPathSeparator4(path10.charCodeAt(2)))
            rootEnd = offset = 3;
        }
      }
    }
  } else if (isPathSeparator4(code2)) {
    return path10;
  }
  for (let i2 = len - 1; i2 >= offset; --i2) {
    if (isPathSeparator4(path10.charCodeAt(i2))) {
      if (!matchedSlash) {
        end = i2;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1) {
    if (rootEnd === -1)
      return ".";
    else
      end = rootEnd;
  }
  return path10.slice(0, end);
}
function basename9(path10, ext = "") {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath4(path10);
  let start = 0;
  let end = -1;
  let matchedSlash = true;
  let i2;
  if (path10.length >= 2) {
    const drive = path10.charCodeAt(0);
    if (isWindowsDeviceRoot4(drive)) {
      if (path10.charCodeAt(1) === CHAR_COLON4)
        start = 2;
    }
  }
  if (ext !== void 0 && ext.length > 0 && ext.length <= path10.length) {
    if (ext.length === path10.length && ext === path10)
      return "";
    let extIdx = ext.length - 1;
    let firstNonSlashEnd = -1;
    for (i2 = path10.length - 1; i2 >= start; --i2) {
      const code2 = path10.charCodeAt(i2);
      if (isPathSeparator4(code2)) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd === -1) {
          matchedSlash = false;
          firstNonSlashEnd = i2 + 1;
        }
        if (extIdx >= 0) {
          if (code2 === ext.charCodeAt(extIdx)) {
            if (--extIdx === -1) {
              end = i2;
            }
          } else {
            extIdx = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end)
      end = firstNonSlashEnd;
    else if (end === -1)
      end = path10.length;
    return path10.slice(start, end);
  } else {
    for (i2 = path10.length - 1; i2 >= start; --i2) {
      if (isPathSeparator4(path10.charCodeAt(i2))) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
    }
    if (end === -1)
      return "";
    return path10.slice(start, end);
  }
}
function extname9(path10) {
  assertPath4(path10);
  let start = 0;
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  if (path10.length >= 2 && path10.charCodeAt(1) === CHAR_COLON4 && isWindowsDeviceRoot4(path10.charCodeAt(0))) {
    start = startPart = 2;
  }
  for (let i2 = path10.length - 1; i2 >= start; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (isPathSeparator4(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT4) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path10.slice(startDot, end);
}
function format9(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format4("\\", pathObject);
}
function parse9(path10) {
  assertPath4(path10);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  const len = path10.length;
  if (len === 0)
    return ret;
  let rootEnd = 0;
  let code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator4(code2)) {
      rootEnd = 1;
      if (isPathSeparator4(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator4(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator4(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator4(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              rootEnd = j;
            } else if (j !== last) {
              rootEnd = j + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot4(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON4) {
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator4(path10.charCodeAt(2))) {
            if (len === 3) {
              ret.root = ret.dir = path10;
              return ret;
            }
            rootEnd = 3;
          }
        } else {
          ret.root = ret.dir = path10;
          return ret;
        }
      }
    }
  } else if (isPathSeparator4(code2)) {
    ret.root = ret.dir = path10;
    return ret;
  }
  if (rootEnd > 0)
    ret.root = path10.slice(0, rootEnd);
  let startDot = -1;
  let startPart = rootEnd;
  let end = -1;
  let matchedSlash = true;
  let i2 = path10.length - 1;
  let preDotState = 0;
  for (; i2 >= rootEnd; --i2) {
    code2 = path10.charCodeAt(i2);
    if (isPathSeparator4(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT4) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      ret.base = ret.name = path10.slice(startPart, end);
    }
  } else {
    ret.name = path10.slice(startPart, startDot);
    ret.base = path10.slice(startPart, end);
    ret.ext = path10.slice(startDot, end);
  }
  if (startPart > 0 && startPart !== rootEnd) {
    ret.dir = path10.slice(0, startPart - 1);
  } else
    ret.dir = ret.root;
  return ret;
}
function fromFileUrl9(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  let path10 = decodeURIComponent(
    url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  ).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
  if (url.hostname != "") {
    path10 = `\\\\${url.hostname}${path10}`;
  }
  return path10;
}
function toFileUrl9(path10) {
  if (!isAbsolute9(path10)) {
    throw new TypeError("Must be an absolute path.");
  }
  const [, hostname, pathname] = path10.match(
    /^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/
  );
  const url = new URL("file:///");
  url.pathname = encodeWhitespace4(pathname.replace(/%/g, "%25"));
  if (hostname != null && hostname != "localhost") {
    url.hostname = hostname;
    if (!url.hostname) {
      throw new TypeError("Invalid hostname.");
    }
  }
  return url;
}

// https://deno.land/std@0.117.0/path/posix.ts
var posix_exports4 = {};
__export(posix_exports4, {
  basename: () => basename10,
  delimiter: () => delimiter10,
  dirname: () => dirname10,
  extname: () => extname10,
  format: () => format10,
  fromFileUrl: () => fromFileUrl10,
  isAbsolute: () => isAbsolute10,
  join: () => join13,
  normalize: () => normalize13,
  parse: () => parse10,
  relative: () => relative10,
  resolve: () => resolve10,
  sep: () => sep10,
  toFileUrl: () => toFileUrl10,
  toNamespacedPath: () => toNamespacedPath10
});
var sep10 = "/";
var delimiter10 = ":";
function resolve10(...pathSegments) {
  let resolvedPath = "";
  let resolvedAbsolute = false;
  for (let i2 = pathSegments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
    let path10;
    if (i2 >= 0)
      path10 = pathSegments[i2];
    else {
      const { Deno: Deno4 } = globalThis;
      if (typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path10 = Deno4.cwd();
    }
    assertPath4(path10);
    if (path10.length === 0) {
      continue;
    }
    resolvedPath = `${path10}/${resolvedPath}`;
    resolvedAbsolute = path10.charCodeAt(0) === CHAR_FORWARD_SLASH4;
  }
  resolvedPath = normalizeString4(
    resolvedPath,
    !resolvedAbsolute,
    "/",
    isPosixPathSeparator4
  );
  if (resolvedAbsolute) {
    if (resolvedPath.length > 0)
      return `/${resolvedPath}`;
    else
      return "/";
  } else if (resolvedPath.length > 0)
    return resolvedPath;
  else
    return ".";
}
function normalize13(path10) {
  assertPath4(path10);
  if (path10.length === 0)
    return ".";
  const isAbsolute15 = path10.charCodeAt(0) === CHAR_FORWARD_SLASH4;
  const trailingSeparator = path10.charCodeAt(path10.length - 1) === CHAR_FORWARD_SLASH4;
  path10 = normalizeString4(path10, !isAbsolute15, "/", isPosixPathSeparator4);
  if (path10.length === 0 && !isAbsolute15)
    path10 = ".";
  if (path10.length > 0 && trailingSeparator)
    path10 += "/";
  if (isAbsolute15)
    return `/${path10}`;
  return path10;
}
function isAbsolute10(path10) {
  assertPath4(path10);
  return path10.length > 0 && path10.charCodeAt(0) === CHAR_FORWARD_SLASH4;
}
function join13(...paths) {
  if (paths.length === 0)
    return ".";
  let joined;
  for (let i2 = 0, len = paths.length; i2 < len; ++i2) {
    const path10 = paths[i2];
    assertPath4(path10);
    if (path10.length > 0) {
      if (!joined)
        joined = path10;
      else
        joined += `/${path10}`;
    }
  }
  if (!joined)
    return ".";
  return normalize13(joined);
}
function relative10(from, to) {
  assertPath4(from);
  assertPath4(to);
  if (from === to)
    return "";
  from = resolve10(from);
  to = resolve10(to);
  if (from === to)
    return "";
  let fromStart = 1;
  const fromEnd = from.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH4)
      break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 1;
  const toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH4)
      break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i2 = 0;
  for (; i2 <= length; ++i2) {
    if (i2 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i2) === CHAR_FORWARD_SLASH4) {
          return to.slice(toStart + i2 + 1);
        } else if (i2 === 0) {
          return to.slice(toStart + i2);
        }
      } else if (fromLen > length) {
        if (from.charCodeAt(fromStart + i2) === CHAR_FORWARD_SLASH4) {
          lastCommonSep = i2;
        } else if (i2 === 0) {
          lastCommonSep = 0;
        }
      }
      break;
    }
    const fromCode = from.charCodeAt(fromStart + i2);
    const toCode = to.charCodeAt(toStart + i2);
    if (fromCode !== toCode)
      break;
    else if (fromCode === CHAR_FORWARD_SLASH4)
      lastCommonSep = i2;
  }
  let out = "";
  for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
    if (i2 === fromEnd || from.charCodeAt(i2) === CHAR_FORWARD_SLASH4) {
      if (out.length === 0)
        out += "..";
      else
        out += "/..";
    }
  }
  if (out.length > 0)
    return out + to.slice(toStart + lastCommonSep);
  else {
    toStart += lastCommonSep;
    if (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH4)
      ++toStart;
    return to.slice(toStart);
  }
}
function toNamespacedPath10(path10) {
  return path10;
}
function dirname10(path10) {
  assertPath4(path10);
  if (path10.length === 0)
    return ".";
  const hasRoot = path10.charCodeAt(0) === CHAR_FORWARD_SLASH4;
  let end = -1;
  let matchedSlash = true;
  for (let i2 = path10.length - 1; i2 >= 1; --i2) {
    if (path10.charCodeAt(i2) === CHAR_FORWARD_SLASH4) {
      if (!matchedSlash) {
        end = i2;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1)
    return hasRoot ? "/" : ".";
  if (hasRoot && end === 1)
    return "//";
  return path10.slice(0, end);
}
function basename10(path10, ext = "") {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath4(path10);
  let start = 0;
  let end = -1;
  let matchedSlash = true;
  let i2;
  if (ext !== void 0 && ext.length > 0 && ext.length <= path10.length) {
    if (ext.length === path10.length && ext === path10)
      return "";
    let extIdx = ext.length - 1;
    let firstNonSlashEnd = -1;
    for (i2 = path10.length - 1; i2 >= 0; --i2) {
      const code2 = path10.charCodeAt(i2);
      if (code2 === CHAR_FORWARD_SLASH4) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd === -1) {
          matchedSlash = false;
          firstNonSlashEnd = i2 + 1;
        }
        if (extIdx >= 0) {
          if (code2 === ext.charCodeAt(extIdx)) {
            if (--extIdx === -1) {
              end = i2;
            }
          } else {
            extIdx = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end)
      end = firstNonSlashEnd;
    else if (end === -1)
      end = path10.length;
    return path10.slice(start, end);
  } else {
    for (i2 = path10.length - 1; i2 >= 0; --i2) {
      if (path10.charCodeAt(i2) === CHAR_FORWARD_SLASH4) {
        if (!matchedSlash) {
          start = i2 + 1;
          break;
        }
      } else if (end === -1) {
        matchedSlash = false;
        end = i2 + 1;
      }
    }
    if (end === -1)
      return "";
    return path10.slice(start, end);
  }
}
function extname10(path10) {
  assertPath4(path10);
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  for (let i2 = path10.length - 1; i2 >= 0; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (code2 === CHAR_FORWARD_SLASH4) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT4) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path10.slice(startDot, end);
}
function format10(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format4("/", pathObject);
}
function parse10(path10) {
  assertPath4(path10);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  if (path10.length === 0)
    return ret;
  const isAbsolute15 = path10.charCodeAt(0) === CHAR_FORWARD_SLASH4;
  let start;
  if (isAbsolute15) {
    ret.root = "/";
    start = 1;
  } else {
    start = 0;
  }
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let i2 = path10.length - 1;
  let preDotState = 0;
  for (; i2 >= start; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (code2 === CHAR_FORWARD_SLASH4) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT4) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      if (startPart === 0 && isAbsolute15) {
        ret.base = ret.name = path10.slice(1, end);
      } else {
        ret.base = ret.name = path10.slice(startPart, end);
      }
    }
  } else {
    if (startPart === 0 && isAbsolute15) {
      ret.name = path10.slice(1, startDot);
      ret.base = path10.slice(1, end);
    } else {
      ret.name = path10.slice(startPart, startDot);
      ret.base = path10.slice(startPart, end);
    }
    ret.ext = path10.slice(startDot, end);
  }
  if (startPart > 0)
    ret.dir = path10.slice(0, startPart - 1);
  else if (isAbsolute15)
    ret.dir = "/";
  return ret;
}
function fromFileUrl10(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  return decodeURIComponent(
    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  );
}
function toFileUrl10(path10) {
  if (!isAbsolute10(path10)) {
    throw new TypeError("Must be an absolute path.");
  }
  const url = new URL("file:///");
  url.pathname = encodeWhitespace4(
    path10.replace(/%/g, "%25").replace(/\\/g, "%5C")
  );
  return url;
}

// https://deno.land/std@0.117.0/path/glob.ts
var path6 = isWindows4 ? win32_exports4 : posix_exports4;
var { join: join14, normalize: normalize14 } = path6;

// https://deno.land/std@0.117.0/path/mod.ts
var path7 = isWindows4 ? win32_exports4 : posix_exports4;
var {
  basename: basename11,
  delimiter: delimiter11,
  dirname: dirname11,
  extname: extname11,
  format: format11,
  fromFileUrl: fromFileUrl11,
  isAbsolute: isAbsolute11,
  join: join15,
  normalize: normalize15,
  parse: parse11,
  relative: relative11,
  resolve: resolve11,
  sep: sep11,
  toFileUrl: toFileUrl11,
  toNamespacedPath: toNamespacedPath11
} = path7;

// https://deno.land/x/good@0.7.8/value.js
var primitiveArrayClasses = [Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray, Int16Array, Int32Array, Int8Array, Float32Array, Float64Array, globalThis.BigInt64Array, globalThis.BigUint64Array].filter((each2) => each2);
var allKeys5 = function(obj) {
  let keys = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    keys = keys.concat(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return keys;
};
var ownKeyDescriptions5 = Object.getOwnPropertyDescriptors;
var allKeyDescriptions5 = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};
var MapIterator5 = Object.getPrototypeOf((/* @__PURE__ */ new Map()).keys());
var SetIterator5 = Object.getPrototypeOf((/* @__PURE__ */ new Set()).keys());
var GeneratorFunction5 = class {
};
var AsyncGeneratorFunction5 = class {
};
try {
  GeneratorFunction5 = eval("((function*(){})()).constructor");
  AsyncGeneratorFunction5 = eval("((async function*(){})()).constructor");
} catch (error) {
}
var isGeneratorType5 = (value) => {
  if (value instanceof Object) {
    const prototype = Object.getPrototypeOf(value);
    if (prototype == MapIterator5 || prototype == SetIterator5) {
      return true;
    }
    const constructor = value.constructor;
    return constructor == GeneratorFunction5 || constructor == AsyncGeneratorFunction5;
  }
  return false;
};
var deepCopySymbol5 = Symbol.for("deepCopy");
var clonedFromSymbol5 = Symbol();
var getThis5 = Symbol();
Object.getPrototypeOf(function() {
})[getThis5] = function() {
  return this;
};
function deepCopyInner5(value, valueChain = [], originalToCopyMap = /* @__PURE__ */ new Map()) {
  valueChain.push(value);
  if (value == null) {
    return value;
  }
  if (!(value instanceof Object)) {
    return value;
  }
  if (originalToCopyMap.has(value)) {
    return originalToCopyMap.get(value);
  }
  if (value[deepCopySymbol5] instanceof Function) {
    const clonedValue = value[deepCopySymbol5]();
    originalToCopyMap.set(value, clonedValue);
    return clonedValue;
  }
  if (isGeneratorType5(value)) {
    throw Error(`Sadly built-in generators cannot be deep copied.
And I found a generator along this path:
${valueChain.reverse().map((each2) => `${each2},
`)}`);
  }
  let object, theThis, thisCopy;
  if (value instanceof Date) {
    object = new Date(value.getTime());
  } else if (value instanceof RegExp) {
    object = new RegExp(value);
  } else if (value instanceof Function) {
    theThis = value[getThis5]();
    object = function(...args) {
      return value.apply(thisCopy, args);
    };
  } else if (primitiveArrayClasses.includes(value.constructor)) {
    object = new value.constructor([...value]);
  } else if (value instanceof Array) {
    object = [];
  } else if (value instanceof Set) {
    object = /* @__PURE__ */ new Set();
  } else if (value instanceof Map) {
    object = /* @__PURE__ */ new Map();
  }
  originalToCopyMap.set(value, object);
  if (object instanceof Function) {
    thisCopy = deepCopyInner5(theThis, valueChain, originalToCopyMap);
  }
  const output2 = object;
  try {
    output2.constructor = value.constructor;
  } catch (error) {
  }
  Object.setPrototypeOf(output2, Object.getPrototypeOf(value));
  const propertyDefinitions = {};
  for (const [key, description] of Object.entries(Object.getOwnPropertyDescriptors(value))) {
    const { value: value2, get, set: set2, ...options } = description;
    const getIsFunc = get instanceof Function;
    const setIsFunc = set2 instanceof Function;
    if (getIsFunc || setIsFunc) {
      propertyDefinitions[key] = {
        ...options,
        get: get ? function(...args) {
          return get.apply(output2, args);
        } : void 0,
        set: set2 ? function(...args) {
          return set2.apply(output2, args);
        } : void 0
      };
    } else {
      if (key == "length" && output2 instanceof Array) {
        continue;
      }
      propertyDefinitions[key] = {
        ...options,
        value: deepCopyInner5(value2, valueChain, originalToCopyMap)
      };
    }
  }
  Object.defineProperties(output2, propertyDefinitions);
  return output2;
}
var deepCopy5 = (value) => deepCopyInner5(value);
var shallowSortObject5 = (obj) => {
  return Object.keys(obj).sort().reduce(
    (newObj, key) => {
      newObj[key] = obj[key];
      return newObj;
    },
    {}
  );
};
var deepSortObject5 = (obj, seen = /* @__PURE__ */ new Map()) => {
  if (!(obj instanceof Object)) {
    return obj;
  } else if (seen.has(obj)) {
    return seen.get(obj);
  } else {
    if (obj instanceof Array) {
      const sortedChildren = [];
      seen.set(obj, sortedChildren);
      for (const each2 of obj) {
        sortedChildren.push(deepSortObject5(each2, seen));
      }
      return sortedChildren;
    } else {
      const sorted = {};
      seen.set(obj, sorted);
      for (const eachKey of Object.keys(obj).sort()) {
        sorted[eachKey] = deepSortObject5(obj[eachKey], seen);
      }
      return sorted;
    }
  }
};
var stableStringify5 = (value, ...args) => {
  return JSON.stringify(deepSortObject5(value), ...args);
};

// https://deno.land/x/good@0.7.8/debug.js
var allKeysDescriptionsAsString = function(obj) {
  const descriptors = allKeyDescriptions5(obj);
  const stringKeys = descriptors.map(({ from, key, descriptor }) => [`${from.constructor instanceof Object && from.constructor.name || from}[${JSON.stringify(key)}]: `, key, descriptor]);
  const maxLength2 = Math.max(...stringKeys.map((each2) => each2[0].length));
  const paddedStringKeys = stringKeys.map(([string2, key, descriptor]) => [string2.padEnd(maxLength2, " "), key, descriptor]);
  const booleanSpacer = (bool2) => bool2 ? `true ` : `false`;
  let descriptorsString = `[
`;
  for (const [stringKey, key, descriptor] of paddedStringKeys) {
    let { value, writable, get, set: set2, configurable, enumerable } = descriptor;
    get = get instanceof Function ? `Function ` : `undefined`;
    set2 = set2 instanceof Function ? `Function ` : `undefined`;
    const isGetterSetter = get === `Function ` || set2 === `Function `;
    if (isGetterSetter) {
      try {
        value = value[key];
      } catch (error) {
        value = error;
      }
    }
    const isMethod = value instanceof Function;
    descriptorsString += `${indent}${indent}${stringKey}{ get:${get}, set:${set2}, isMethod:${booleanSpacer(isMethod)}, configurable:${booleanSpacer(configurable)}, enumerable:${booleanSpacer(enumerable)}, writable:${booleanSpacer(writable)}, value: ${value} },
`;
  }
  return descriptorsString + `${indent}]`;
};
var debugValueAsString = (value) => {
  const indent4 = `    `;
  if (value === void 0) {
    return JSON.stringify({
      valueItself: value,
      isUndefined: true,
      isNull: false,
      doubleEqualToNull: true,
      tripleEqualToNull: false,
      typeof: typeof value,
      stringified: void 0,
      objectIsFrozen: Object.isFrozen(value)
    }, 0, indent4.length);
  } else if (value === null) {
    return JSON.stringify({
      valueItself: value,
      isUndefined: false,
      isNull: true,
      doubleEqualToNull: true,
      tripleEqualToNull: true,
      typeof: typeof value,
      stringified: "null",
      objectIsFrozen: Object.isFrozen(value)
    }, 0, indent4.length);
  } else {
    const output2 = {
      valueItself: value,
      typeof: typeof value,
      constructorName: value.constructor instanceof Object && value.constructor.name,
      prototype: Object.getPrototypeOf(value),
      stringified: Error,
      instanceofObject: value instanceof Object,
      ifStatementTreatsAs: value ? true : false,
      doubleEqualToFalse: value == false,
      doubleEqualToTrue: value == false,
      objectIsFrozen: Object.isFrozen(value),
      isNaN: value !== value,
      isUndefined: false,
      isNull: false,
      doubleEqualToNull: value == null,
      tripleEqualToNull: value === null,
      valueOf: void 0,
      toString: void 0,
      isArray: value instanceof Array,
      iterableUsingForIn: false,
      iterableUsingForof: false,
      keys: JSON.stringify(Object.keys(value).map((each2) => typeof each2 == "symbol" ? `${each2}` : each2), indent4.length * 2),
      getOwnPropertyNames: JSON.stringify(Object.getOwnPropertyNames(value).map((each2) => typeof each2 == "symbol" ? `${each2}` : each2), indent4.length * 2),
      allPropertyDescriptions: allKeysDescriptionsAsString(value)
    };
    if (value.valueOf instanceof Function) {
      output2.valueOf = value.valueOf();
    }
    if (value.toString instanceof Function) {
      output2.toString = value.toString();
      if (typeof output2.toString == "string") {
        output2.toString = JSON.stringify(output2.toString);
      }
    }
    try {
      output2.stringified = JSON.stringify(value);
    } catch (error) {
      output2.stringified = error;
    }
    try {
      for (const each2 in value) {
        break;
      }
      output2.iterableUsingForIn = true;
    } catch (error) {
    }
    try {
      for (const each2 of value) {
        break;
      }
      output2.iterableUsingForOf = true;
    } catch (error) {
    }
    return `
{
    valueItself: ${output2.valueItself},
    typeof: ${output2.typeof},
    constructorName: ${output2.constructorName},
    prototype: ${output2.prototype},
    stringified: ${output2.stringified},
    instanceofObject: ${output2.instanceofObject},
    ifStatementTreatsAs: ${output2.ifStatementTreatsAs},
    doubleEqualToFalse: ${output2.doubleEqualToFalse},
    doubleEqualToTrue: ${output2.doubleEqualToTrue},
    objectIsFrozen: ${output2.objectIsFrozen},
    isNaN: ${output2.isNaN},
    isUndefined: ${output2.isUndefined},
    isNull: ${output2.isNull},
    doubleEqualToNull: ${output2.doubleEqualToNull},
    tripleEqualToNull: ${output2.tripleEqualToNull},
    valueOf: ${output2.valueOf},
    toString: ${output2.toString},
    isArray: ${output2.isArray},
    iterableUsingForIn: ${output2.iterableUsingForIn},
    iterableUsingForof: ${output2.iterableUsingForof},
    keys: ${output2.keys},
    getOwnPropertyNames: ${output2.getOwnPropertyNames},
    allPropertyDescriptions: ${output2.allPropertyDescriptions},
}
`;
  }
};

// https://deno.land/x/quickr@0.6.56/main/run.js
var timeoutSymbol = Symbol("timeout");
var envSymbol = Symbol("env");
var cwdSymbol = Symbol("cwd");
var stdinSymbol = Symbol("stdin");
var stdoutSymbol = Symbol("stdout");
var stderrSymbol = Symbol("stderr");
var stdoutAndErrSymbol = Symbol("stdoutAndErr");
var overwriteSymbol = Symbol("overwrite");
var appendSymbol = Symbol("append");
var asString = Symbol("asString");
var throwIfFails = Symbol("throwIfFails");
var zipInto = Symbol("zipInto");
var mergeInto = Symbol("mergeInto");
var returnAsString = Symbol("returnAsString");
var Timeout = ({ gentlyBy, waitBeforeUsingForce }) => [timeoutSymbol, { gentlyBy, waitBeforeUsingForce }];
var Env = (envVars) => [envSymbol, envVars];
var Cwd = (newDirectory) => [cwdSymbol, newDirectory];
var Stdin = (...streamsFilesOrStrings) => [stdinSymbol, streamsFilesOrStrings];
var Stdout = (...pathsFilesStreamsOrSymbols) => [stdoutSymbol, pathsFilesStreamsOrSymbols];
var Stderr = (...pathsFilesStreamsOrSymbols) => [stderrSymbol, pathsFilesStreamsOrSymbols];
var Out = (...pathsFilesStreamsOrSymbols) => [stdoutAndErrSymbol, pathsFilesStreamsOrSymbols];
var Overwrite = (fileOrFilePath) => [overwriteSymbol, fileOrFilePath];
var AppendTo = (fileOrFilePath) => [appendSymbol, fileOrFilePath];
var isReadable = (obj) => obj instanceof Object && obj.read instanceof Function;
var isWritable = (obj) => obj instanceof Object && obj.write instanceof Function;
var concatUint8Arrays = (arrays) => new Uint8Array(
  // simplified from: https://stackoverflow.com/questions/49129643/how-do-i-merge-an-array-of-uint8arrays
  arrays.reduce((acc, curr) => (acc.push(...curr), acc), [])
);
var { isWindows: isWindows5, isLinux, isMac } = OperatingSystem.commonChecks;
var alreadyOpenFiles = {};
var ridToPath = {};
var realDenoOpen = Deno.open.bind(Deno);
Deno.open = function(...args) {
  const path10 = FileSystem.makeAbsolutePath(args[0]);
  if (!alreadyOpenFiles[path10]) {
    alreadyOpenFiles[path10] = realDenoOpen(...args).then((file) => {
      ridToPath[file.rid] = path10;
      const realClose = file.close;
      file.close = function(...args2) {
        delete alreadyOpenFiles[path10];
        realClose(...args2);
      }.bind(file);
      return file;
    });
  }
  return alreadyOpenFiles[path10];
}.bind(Deno);
var realDenoOpenSync = Deno.openSync.bind(Deno);
Deno.openSync = function(...args) {
  const path10 = FileSystem.makeAbsolutePath(args[0]);
  if (!alreadyOpenFiles[path10]) {
    const file = realDenoOpenSync(...args);
    ridToPath[file.rid] = path10;
    const realClose = file.close;
    file.close = function(...args2) {
      delete alreadyOpenFiles[path10];
      realClose(...args2);
    }.bind(file);
    alreadyOpenFiles[path10] = file;
  }
  return alreadyOpenFiles[path10];
}.bind(Deno);
var run2 = (maybeStrings, ...args) => {
  let newArgs = [];
  const argSplitter = /[ \t]+/;
  if (maybeStrings instanceof Array) {
    maybeStrings = [...maybeStrings];
    const lastString = maybeStrings.pop();
    for (const eachString of maybeStrings) {
      const innerArgs = eachString.split(argSplitter);
      for (const each2 of innerArgs) {
        if (each2.length > 0) {
          newArgs.push(each2);
        }
      }
      newArgs.push(args.shift());
    }
    const endingArgsString = lastString.trim();
    if (endingArgsString.length > 0) {
      const endingArgs = endingArgsString.split(argSplitter);
      for (const each2 of endingArgs) {
        newArgs.push(each2);
      }
    }
    args = newArgs;
  } else {
    args = [maybeStrings, ...args];
  }
  const commandMetaData = {
    timeout: { gentlyBy: void 0, waitBeforeUsingForce: void 0 },
    env: void 0,
    cwd: void 0,
    stdin: void 0,
    stdout: void 0,
    stderr: void 0,
    outAndError: []
  };
  for (const each2 of args) {
    if (typeof each2 == "symbol") {
      if (each2 == throwIfFails) {
        commandMetaData.throwIfFails = true;
      }
    }
    if (each2 instanceof Array && typeof each2[0] == "symbol") {
      const [symbol, value] = each2;
      if (symbol === timeoutSymbol) {
        Object.assign(commandMetaData.timeout, value);
      }
      if (symbol === envSymbol) {
        commandMetaData.env = value;
      }
      if (symbol === cwdSymbol) {
        commandMetaData.cwd = value;
      }
      if (symbol === stdinSymbol) {
        commandMetaData.stdin = value;
      }
      if (symbol === stdoutSymbol) {
        commandMetaData.stdout = value;
      }
      if (symbol === stderrSymbol) {
        commandMetaData.stderr = value;
      }
      if (symbol === stdoutAndErrSymbol) {
        commandMetaData.outAndError = value;
      }
    }
  }
  const runArg = {
    cmd: args.filter((each2) => typeof each2 == "string"),
    env: commandMetaData.env,
    cwd: commandMetaData.cwd,
    stdin: void 0,
    stdout: void 0,
    stderr: void 0
  };
  const syncStatus = { done: false, exitCode: void 0, success: void 0 };
  const asyncPart = async () => {
    if (
      // either both should be null or both should be set
      commandMetaData.timeout.gentlyBy == null !== (commandMetaData.timeout.waitBeforeUsingForce == null) || commandMetaData.timeout.gentlyBy != null && (!(commandMetaData.timeout.gentlyBy >= 0) || !(commandMetaData.timeout.waitBeforeUsingForce >= 0))
    ) {
      throw Error(`
When running command:
    ${JSON.stringify(runArg.cmd)}
it was given a:
    Timeout(${JSON.stringify(commandMetaData.timeout)})
however both "gentlyBy" and "waitBeforeUsingForce" are needed.
For example, if 
    gentlyBy: 1000
    waitBeforeUsingForce: 500
it would be force killed 1.5sec after the process started.
If you never want force to be used, do {waitBeforeUsingForce: Infinity}

`);
    }
    if (runArg.cwd !== void 0) {
      const folderExists = await Deno.stat(runArg.cwd).then(({ isDirectory: isDirectory2 }) => isDirectory2).catch(() => false);
      if (!folderExists) {
        throw Error(`
When running command:
    ${JSON.stringify(runArg.cmd)}
it was given a Cwd (cwd) of:
${JSON.stringify(runArg.cwd)}
but that doesn't seem to be a path to a folder, so the command would fail.

`);
      }
    }
    let stdinWriter = void 0;
    if (commandMetaData.stdin !== void 0) {
      let stdinArgs = commandMetaData.stdin;
      let index = 0;
      for (const each2 of stdinArgs) {
        if (each2 instanceof Promise) {
          stdinArgs[index] = await each2;
        }
        ++index;
      }
      if (stdinArgs.length == 0) {
        runArg.stdin = "piped";
      } else if (stdinArgs.length == 1 && stdinArgs[0] == null) {
        runArg.stdin = "null";
      } else {
        stdinArgs = stdinArgs.filter((each2) => each2 != null);
        if (stdinArgs.length == 0) {
          throw Error(`when calling run() with the command: 
    ${JSON.stringify(runArg.cmd)}
An Stdin() was given, but it wasn't given any arguments
if you want Stdin to be nothing (instead of the default Stdin(Deno.stdin)) put Stdin(null)

`);
        } else {
          runArg.stdin = "piped";
          if (stdinArgs.every((each2) => typeof each2 == "string" || each2 instanceof Uint8Array)) {
            const allUint8Arrays = stdinArgs.map((each2) => typeof each2 != "string" ? each2 : new TextEncoder().encode(each2));
            stdinWriter = concatUint8Arrays(allUint8Arrays);
          } else {
            const first = stdinArgs[0];
            let prev;
            if (typeof first == "string") {
              stdinWriter = readableStreamFromReader(new StringReader(first));
              prev = "string";
            } else if (first instanceof Uint8Array) {
              stdinWriter = readableStreamFromReader(new Buffer(first));
              prev = "uint8array";
            } else if (first instanceof ReadableStream) {
              stdinWriter = first;
              prev = "readableStream";
            } else if (isReadable(first)) {
              stdinWriter = readableStreamFromReader(first);
              prev = "readable";
            } else {
              throw Error(`when calling run() with the command: 
    ${JSON.stringify(runArg.cmd)}
An Stdin() was given, but there was a problem with one of the arguments.
The argument can be a string, a file (Deno.open("./path")), bytes (Uint8Array), or any readable object (like Deno.stdin or the .stdout of another run command)
but instead of any of those I received:
    ${first}

`);
            }
            for (const each2 of stdinArgs.slice(1)) {
              if (each2 === mergeInto || each2 === zipInto) {
                prev = each2;
                continue;
              }
              let newStream;
              if (typeof each2 == "string") {
                newStream = readableStreamFromReader(new StringReader(each2));
                current = "string";
              } else if (each2 instanceof Uint8Array) {
                newStream = readableStreamFromReader(new Buffer(each2));
                current = "uint8";
              } else if (each2 instanceof ReadableStream) {
                newStream = each2;
                current = "readableStream";
              } else if (isReadable(each2)) {
                newStream = readableStreamFromReader(each2);
                current = "readable";
              } else {
                throw Error(`when calling run() with the command: 
    ${JSON.stringify(runArg.cmd)}
An Stdin() was given, but there was a problem with one of the arguments.
The argument can be a string, a file (Deno.open("./path")), bytes (Uint8Array), or any readable object (like Deno.stdin or the .stdout of another run command)
but instead of any of those I received:
    ${each2}

`);
              }
              if (prev !== zipInto && (prev === mergeInto || prev == "string" || prev == "uint8array" || current == "string" || current == "uint8array")) {
                stdinWriter = stdinWriter.mergeReadableStreams(stdinWriter, newStream);
              } else {
                stdinWriter = stdinWriter.zipReadableStreams(stdinWriter, newStream);
              }
            }
          }
        }
      }
    }
    const outStreamNames = ["stdout", "stderr"];
    if (commandMetaData.outAndError.length > 0) {
      for (const each2 of outStreamNames) {
        if (!(commandMetaData[each2] instanceof Array)) {
          commandMetaData[each2] = [];
        }
        commandMetaData[each2] = commandMetaData[each2].concat(commandMetaData.outAndError);
      }
    }
    for (const each2 of outStreamNames) {
      if (commandMetaData[each2] !== void 0) {
        if (commandMetaData[each2].length == 0) {
          runArg[each2] = "piped";
        } else if (commandMetaData[each2].length == 1 && commandMetaData[each2][0] === null) {
          runArg[each2] = "null";
        } else {
          runArg[each2] = "piped";
          commandMetaData[each2] = [...new Set(commandMetaData[each2].filter((each3) => each3 != null))];
        }
      }
    }
    const openFiles = {};
    const convertReturnStreamArg = async (arg) => {
      if (arg === returnAsString) {
        return arg;
      }
      if (arg instanceof Array) {
        if (typeof arg[0] == "symbol") {
          let [symbol, value] = arg;
          if (symbol === overwriteSymbol) {
            if (typeof value == "string") {
              const path10 = FileSystem.makeAbsolutePath(value);
              if (!openFiles[path10]) {
                await FileSystem.clearAPathFor(value, { overwrite: true });
                openFiles[path10] = await Deno.open(value, { write: true, truncate: true, create: true });
              }
              value = openFiles[path10];
            }
            if (value instanceof Deno.File) {
              value.truncate();
            } else {
              throw Error(`
When running command:
    ${JSON.stringify(runArg.cmd)}
it was given one of:
    Stdout(Overwrite(arg))
    Stdin(Overwrite(arg))
    Out(Overwrite(arg))
However the given arg was not a string path or a file object.
Here's what I know about the argument:${debugValueAsString(value)}

`);
            }
          } else if (symbol === appendSymbol) {
            if (typeof value == "string") {
              const path10 = FileSystem.makeAbsolutePath(value);
              if (!openFiles[path10]) {
                await FileSystem.ensureIsFolder(FileSystem.parentPath(value));
                openFiles[path10] = await Deno.open(value, { write: true, create: true });
              }
              value = openFiles[path10];
            }
            if (value instanceof Deno.File) {
              await Deno.seek(value.rid, 0, Deno.SeekMode.End);
            } else {
              throw Error(`
When running command:
    ${JSON.stringify(runArg.cmd)}
it was given one of:
    Stdout(AppendTo(arg))
    Stdin(AppendTo(arg))
    Out(AppendTo(arg))
However the given arg was not a string path or a file object.
Here's what I know about the argument:${debugValueAsString(value)}

`);
            }
          }
          arg = value;
        }
      }
      if (arg instanceof WritableStream) {
        return arg;
      } else if (isWritable(arg)) {
        return writableStreamFromWriter(arg);
      } else if (typeof arg == "string") {
        throw Error(`
When running command:
    ${JSON.stringify(runArg.cmd)}
it was given one of:
    Stdout(${JSON.stringify(arg)})
    Stdin(${JSON.stringify(arg)})
    Out(${JSON.stringify(arg)})
if you want to have them write to a file:
    dont:    Out(${JSON.stringify(arg)})
    instead: Out(Overwrite(${JSON.stringify(arg)}))
    or:      Out(AppendTo(${JSON.stringify(arg)}))

`);
      }
    };
    const alreadyComputed = /* @__PURE__ */ new Map();
    const convertArgsToWritables = (...args2) => args2.map((eachArg) => {
      let key;
      if (eachArg instanceof Array) {
        key = JSON.stringify(eachArg.map((each2) => {
          if (typeof each2 == "symbol") {
            return each2.toString();
          } else if (each2 instanceof Deno.File) {
            if (ridToPath[each2.id]) {
              return FileSystem.makeAbsolutePath(ridToPath[each2.id]);
            }
            return `Deno.File(${each2.rid})`;
          } else if (typeof each2 == "string") {
            return FileSystem.makeAbsolutePath(each2);
          } else {
            return JSON.stringify(each2);
          }
        }));
      } else {
        key = JSON.stringify(eachArg) + Deno.inspect(eachArg);
      }
      if (alreadyComputed.has(key)) {
        return alreadyComputed.get(key);
      } else {
        const output2 = convertReturnStreamArg(eachArg);
        alreadyComputed.set(key, output2);
        return output2;
      }
    });
    const stdoutWritables = await Promise.all(convertArgsToWritables(...commandMetaData.stdout || []));
    const stderrWritables = await Promise.all(convertArgsToWritables(...commandMetaData.stderr || []));
    let process = {};
    try {
      process = Deno.run(runArg);
    } catch (error) {
      const rejection = new Promise((resolve15, reject) => reject(`
${error}
This was from a run() call, which was converted to Deno.run(${JSON.stringify(runArg, 0, 4)})`));
      return [rejection, rejection, rejection];
    }
    if (commandMetaData.timeout.gentlyBy) {
      let outcome = false;
      process.status().then(() => outcome = true);
      setTimeout(async () => {
        if (!outcome) {
          process.kill("SIGINT");
          setTimeout(() => {
            if (!outcome) {
              process.kill("SIGKILL");
            }
          }, commandMetaData.timeout.waitBeforeUsingForce);
        }
      }, commandMetaData.timeout.gentlyBy);
    }
    let hasReturnString = false;
    let stdoutAndStderrDoneWritingPromise = { then(func2) {
      func2();
    } };
    const returnStringChunks = [];
    if (runArg.stdout == "piped" || runArg.stderr == "piped") {
      stdoutAndStderrDoneWritingPromise = deferredPromise();
      let stdoutIsDone = false;
      let stderrIsDone = false;
      const writableToWriter = /* @__PURE__ */ new Map();
      for (const eachWritable of stdoutWritables.concat(stderrWritables)) {
        if (!writableToWriter.has(eachWritable)) {
          if (eachWritable == returnAsString) {
            hasReturnString = true;
            const decoder3 = new TextDecoder();
            writableToWriter.set(eachWritable, {
              write(value) {
                const stringValue = decoder3.decode(value);
                returnStringChunks.push(stringValue);
              }
            });
          } else {
            if (eachWritable != null) {
              const writer = eachWritable.getWriter();
              writableToWriter.set(eachWritable, writer);
            }
          }
        }
      }
      const stdoutWriters = stdoutWritables.map((each2) => writableToWriter.get(each2));
      const stderrWriters = stderrWritables.map((each2) => writableToWriter.get(each2));
      if (runArg.stdout != "piped") {
        stdoutIsDone = true;
      } else {
        const reader = readableStreamFromReader(process.stdout).getReader();
        setTimeout(async () => {
          while (1) {
            const { value, done } = await reader.read();
            if (done) {
              stdoutIsDone = true;
              if (stderrIsDone) {
                stdoutAndStderrDoneWritingPromise.resolve();
              }
              break;
            }
            for (const each2 of stdoutWriters) {
              each2.write(value);
            }
          }
        });
      }
      if (runArg.stderr != "piped") {
        stderrIsDone = true;
      } else {
        const reader = readableStreamFromReader(process.stderr).getReader();
        setTimeout(async () => {
          while (1) {
            const { value, done } = await reader.read();
            if (done) {
              stderrIsDone = true;
              if (stdoutIsDone) {
                stdoutAndStderrDoneWritingPromise.resolve();
              }
              break;
            }
            for (const each2 of stderrWriters) {
              each2.write(value);
            }
          }
        });
      }
    }
    if (runArg.stdin == "piped") {
      if (stdinWriter instanceof Uint8Array) {
        process.stdin.write(stdinWriter).then(() => process.stdin.close());
      } else if (stdinWriter instanceof ReadableStream) {
        writableStreamFromWriter(process.stdin);
      }
    }
    let statusPromise2 = process.status();
    statusPromise2.then(({ code: code2, success }) => {
      syncStatus.done = true;
      syncStatus.exitCode = code2;
      syncStatus.success = success;
    });
    let processFinishedValue;
    if (hasReturnString) {
      processFinishedValue = statusPromise2.then(() => stdoutAndStderrDoneWritingPromise.then(() => returnStringChunks.join("")));
    } else {
      processFinishedValue = statusPromise2.then(({ success, code: code2 }) => {
        return {
          isDone: true,
          status: syncStatus,
          sendSignal: () => 0,
          success,
          exitCode: code2,
          pid: process.pid,
          rid: process.rid,
          kill: () => 0,
          close: process.close,
          stdin: runArg.stdin == "null" ? null : process.stdin || Deno.stdin,
          stdout: process.stdout || Deno.stdout,
          stderr: process.stderr || Deno.stderr
        };
      });
    }
    const returnValueOrError = new Promise(async (resolve15, reject) => {
      if (commandMetaData.throwIfFails) {
        const status = await statusPromise2;
        if (!status.success) {
          reject(await processFinishedValue);
          return;
        }
      }
      resolve15(processFinishedValue);
    });
    return [process, returnValueOrError, statusPromise2];
  };
  const asyncPartPromise = asyncPart();
  const processPromise = asyncPartPromise.then(([process, processFinishedValue, statusPromise2]) => process).catch((err) => err);
  const statusPromise = asyncPartPromise.then(([process, processFinishedValue, statusPromise2]) => statusPromise2).catch((err) => err);
  const returnValuePromise = asyncPartPromise.then(([process, processFinishedValue, statusPromise2]) => processFinishedValue);
  Object.defineProperties(returnValuePromise, {
    status: { get() {
      return syncStatus;
    } },
    isDone: { get() {
      return syncStatus.done;
    } },
    sendSignal: { get() {
      return (...args2) => processPromise.then((process) => process.kill(...args2)).catch((error) => error);
    } },
    kill: { get() {
      return (signal = "SIGKILL") => processPromise.then((process) => process.kill(signal));
    } },
    close: { get() {
      return (...args2) => processPromise.then((process) => process.close(...args2));
    } },
    success: { get() {
      return statusPromise.then(({ success }) => success);
    } },
    exitCode: { get() {
      return statusPromise.then(({ code: code2 }) => code2);
    } },
    outcome: { get() {
      return statusPromise;
    } },
    rid: { get() {
      return processPromise.then(({ rid }) => rid);
    } },
    pid: { get() {
      return processPromise.then(({ pid }) => pid);
    } },
    stdout: { get() {
      return processPromise.then(({ stdout }) => stdout || Deno.stdout);
    } },
    stderr: { get() {
      return processPromise.then(({ stderr }) => stderr || Deno.stderr);
    } },
    stdin: {
      get() {
        const realStdinPromise = processPromise.then(({ stdin }) => stdin || Deno.stdin);
        return {
          send(rawDataOrString) {
            if (typeof rawDataOrString == "string") {
              return { ...realStdinPromise.then((realStdin) => realStdin.write(new TextEncoder().encode(rawDataOrString))), ...this };
            } else {
              return { ...realStdinPromise.then((realStdin) => realStdin.write(rawDataOrString)), ...this };
            }
          },
          close(...args2) {
            return realStdinPromise.then((realStdin) => (realStdin.close(...args2), this));
          }
        };
      }
    }
  });
  return returnValuePromise;
};
run2.Timeout = Timeout;
run2.Env = Env;
run2.Cwd = Cwd;
run2.Stdin = Stdin;
run2.Stdout = Stdout;
run2.Stderr = Stderr;
run2.Out = Out;
run2.Overwrite = Overwrite;
run2.AppendTo = AppendTo;
run2.zipInto = zipInto;
run2.mergeInto = mergeInto;
run2.returnAsString = returnAsString;

// https://deno.land/x/good@1.5.1.0/string.js
var indent3 = ({ string: string2, by = "    ", noLead = false }) => (noLead ? "" : by) + string2.replace(/\n/g, "\n" + by);
var toString2 = (value) => {
  if (typeof value == "symbol") {
    return toRepresentation3(value);
  } else if (!(value instanceof Object)) {
    return value != null ? value.toString() : `${value}`;
  } else {
    return toRepresentation3(value);
  }
};
var reprSymbol2 = Symbol.for("representation");
var denoInspectSymbol2 = Symbol.for("Deno.customInspect");
var toRepresentation3 = (item) => {
  const alreadySeen = /* @__PURE__ */ new Set();
  const recursionWrapper = (item2) => {
    if (item2 instanceof Object) {
      if (alreadySeen.has(item2)) {
        return `[Self Reference]`;
      } else {
        alreadySeen.add(item2);
      }
    }
    let output2;
    if (item2 === void 0) {
      output2 = "undefined";
    } else if (item2 === null) {
      output2 = "null";
    } else if (typeof item2 == "string") {
      output2 = JSON.stringify(item2);
    } else if (typeof item2 == "symbol") {
      if (!item2.description) {
        output2 = "Symbol()";
      } else {
        const globalVersion = Symbol.for(item2.description);
        if (globalVersion == item2) {
          output2 = `Symbol.for(${JSON.stringify(item2.description)})`;
        } else {
          output2 = `Symbol(${JSON.stringify(item2.description)})`;
        }
      }
    } else if (item2 instanceof Date) {
      output2 = `new Date(${item2.getTime()})`;
    } else if (item2 instanceof Array) {
      output2 = `[${item2.map((each2) => recursionWrapper(each2)).join(",")}]`;
    } else if (item2 instanceof Set) {
      output2 = `new Set(${[...item2].map((each2) => recursionWrapper(each2)).join(",")})`;
    } else if (item2 instanceof Object && item2.constructor == Object) {
      output2 = pureObjectRepr(item2);
    } else if (item2 instanceof Map) {
      let string2 = "new Map(";
      for (const [key, value] of item2.entries()) {
        const stringKey = recursionWrapper(key);
        const stringValue = recursionWrapper(value);
        if (!stringKey.match(/\n/g)) {
          string2 += `
  [${stringKey}, ${indent3({ string: stringValue, by: "  ", noLead: true })}],`;
        } else {
          string2 += `
  [${indent3({ string: stringKey, by: "  ", noLead: true })},
  ${indent3({ string: stringValue, by: "    ", noLead: true })}],`;
        }
      }
      string2 += "\n)";
      output2 = string2;
    } else {
      if (item2[reprSymbol2] instanceof Function) {
        try {
          output2 = item2[reprSymbol2]();
          return output2;
        } catch (error) {
        }
      }
      if (item2[denoInspectSymbol2] instanceof Function) {
        try {
          output2 = item2[denoInspectSymbol2]();
          return output2;
        } catch (error) {
        }
      }
      try {
        output2 = item2.toString();
        if (output2 !== "[object Object]") {
          return output2;
        }
      } catch (error) {
      }
      try {
        if (item2.constructor instanceof Function && item2.prototype && typeof item2.name == "string") {
          output2 = `class ${item2.name} { /*...*/ }`;
          return output2;
        }
      } catch (error) {
      }
      try {
        if (item2.constructor instanceof Function && typeof item2.constructor.name == "string") {
          output2 = `new ${item2.constructor.name}(${pureObjectRepr(item2)})`;
          return output2;
        }
      } catch (error) {
      }
      return pureObjectRepr(item2);
    }
    return output2;
  };
  const pureObjectRepr = (item2) => {
    let string2 = "{";
    for (const [key, value] of Object.entries(item2)) {
      const stringKey = recursionWrapper(key);
      const stringValue = recursionWrapper(value);
      string2 += `
  ${stringKey}: ${indent3({ string: stringValue, by: "  ", noLead: true })},`;
    }
    string2 += "\n}";
    return string2;
  };
  return recursionWrapper(item);
};
var wordList = (str2) => {
  const addedSeperator = str2.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/[^a-zA-Z0-9 _.-]/, "_").toLowerCase();
  const words = addedSeperator.split(/[ _.-]+/g);
  return words;
};
var toCamelCase = (str2) => {
  const words = wordList(str2);
  const capatalizedWords = words.map((each2) => each2.replace(/^\w/, (group0) => group0.toUpperCase()));
  capatalizedWords[0] = capatalizedWords[0].toLowerCase();
  return capatalizedWords.join("");
};
var reservedCharMap = {
  "&": "\\x26",
  "!": "\\x21",
  "#": "\\x23",
  "$": "\\$",
  "%": "\\x25",
  "*": "\\*",
  "+": "\\+",
  ",": "\\x2c",
  ".": "\\.",
  ":": "\\x3a",
  ";": "\\x3b",
  "<": "\\x3c",
  "=": "\\x3d",
  ">": "\\x3e",
  "?": "\\?",
  "@": "\\x40",
  "^": "\\^",
  "`": "\\x60",
  "~": "\\x7e",
  "(": "\\(",
  ")": "\\)",
  "[": "\\[",
  "]": "\\]",
  "{": "\\{",
  "}": "\\}",
  "/": "\\/",
  "-": "\\x2d",
  "\\": "\\\\",
  "|": "\\|"
};
var RX_REGEXP_ESCAPE = new RegExp(
  `[${Object.values(reservedCharMap).join("")}]`,
  "gu"
);
function escapeRegexMatch2(str2) {
  return str2.replaceAll(
    RX_REGEXP_ESCAPE,
    (m) => reservedCharMap[m]
  );
}
var regexpProxy2 = Symbol("regexpProxy");
var realExec2 = RegExp.prototype.exec;
RegExp.prototype.exec = function(...args) {
  if (this[regexpProxy2]) {
    return realExec2.apply(this[regexpProxy2], args);
  }
  return realExec2.apply(this, args);
};
var proxyRegExp2;
var regexProxyOptions2 = Object.freeze({
  get(original, key) {
    if (typeof key == "string" && key.match(/^[igmusyv]+$/)) {
      return proxyRegExp2(original, key);
    }
    if (key == regexpProxy2) {
      return original;
    }
    return original[key];
  },
  set(original, key, value) {
    original[key] = value;
    return true;
  }
});
proxyRegExp2 = (parent, flags) => {
  const regex3 = new RegExp(parent, flags);
  const output2 = new Proxy(regex3, regexProxyOptions2);
  Object.setPrototypeOf(output2, Object.getPrototypeOf(regex3));
  return output2;
};
function regexWithStripWarning2(shouldStrip) {
  return (strings, ...values) => {
    let newRegexString = "";
    for (const [string2, value] of zip(strings, values)) {
      newRegexString += string2;
      if (value instanceof RegExp) {
        if (!shouldStrip && value.flags.replace(/g/, "").length > 0) {
          console.warn(`Warning: flags inside of regex:
    The RegExp trigging this warning is: ${value}
    When calling the regex interpolater (e.g. regex\`something\${stuff}\`)
    one of the \${} values (the one above) was a RegExp with a flag enabled
    e.g. /stuff/i  <- i = ignoreCase flag enabled
    When the /stuff/i gets interpolated, its going to loose its flags
    (thats what I'm warning you about)
    
    To disable/ignore this warning do:
        regex.stripFlags\`something\${/stuff/i}\`
    If you want to add flags to the output of regex\`something\${stuff}\` do:
        regex\`something\${stuff}\`.i   // ignoreCase
        regex\`something\${stuff}\`.ig  // ignoreCase and global
        regex\`something\${stuff}\`.gi  // functionally equivlent
`);
        }
        newRegexString += `(?:${value.source})`;
      } else if (value != null) {
        newRegexString += escapeRegexMatch2(toString2(value));
      }
    }
    return proxyRegExp2(newRegexString, "");
  };
}
var regex2 = regexWithStripWarning2(false);
regex2.stripFlags = regexWithStripWarning2(true);
var textDecoder2 = new TextDecoder("utf-8");
var textEncoder2 = new TextEncoder("utf-8");
var utf8BytesToString2 = textDecoder2.decode.bind(textDecoder2);
var stringToUtf8Bytes2 = textEncoder2.encode.bind(textEncoder2);

// https://deno.land/std@0.168.0/encoding/_yaml/error.ts
var YAMLError = class extends Error {
  constructor(message = "(unknown reason)", mark = "") {
    super(`${message} ${mark}`);
    this.mark = mark;
    this.name = this.constructor.name;
  }
  toString(_compact) {
    return `${this.name}: ${this.message} ${this.mark}`;
  }
};

// https://deno.land/std@0.168.0/encoding/_yaml/utils.ts
function isBoolean(value) {
  return typeof value === "boolean" || value instanceof Boolean;
}
function isObject(value) {
  return value !== null && typeof value === "object";
}
function repeat(str2, count4) {
  let result2 = "";
  for (let cycle = 0; cycle < count4; cycle++) {
    result2 += str2;
  }
  return result2;
}
function isNegativeZero(i2) {
  return i2 === 0 && Number.NEGATIVE_INFINITY === 1 / i2;
}

// https://deno.land/std@0.168.0/encoding/_yaml/mark.ts
var Mark = class {
  constructor(name, buffer, position, line, column) {
    this.name = name;
    this.buffer = buffer;
    this.position = position;
    this.line = line;
    this.column = column;
  }
  getSnippet(indent4 = 4, maxLength2 = 75) {
    if (!this.buffer)
      return null;
    let head = "";
    let start = this.position;
    while (start > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(start - 1)) === -1) {
      start -= 1;
      if (this.position - start > maxLength2 / 2 - 1) {
        head = " ... ";
        start += 5;
        break;
      }
    }
    let tail = "";
    let end = this.position;
    while (end < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1) {
      end += 1;
      if (end - this.position > maxLength2 / 2 - 1) {
        tail = " ... ";
        end -= 5;
        break;
      }
    }
    const snippet = this.buffer.slice(start, end);
    return `${repeat(" ", indent4)}${head}${snippet}${tail}
${repeat(
      " ",
      indent4 + this.position - start + head.length
    )}^`;
  }
  toString(compact) {
    let snippet, where = "";
    if (this.name) {
      where += `in "${this.name}" `;
    }
    where += `at line ${this.line + 1}, column ${this.column + 1}`;
    if (!compact) {
      snippet = this.getSnippet();
      if (snippet) {
        where += `:
${snippet}`;
      }
    }
    return where;
  }
};

// https://deno.land/std@0.168.0/encoding/_yaml/schema.ts
function compileList(schema, name, result2) {
  const exclude = [];
  for (const includedSchema of schema.include) {
    result2 = compileList(includedSchema, name, result2);
  }
  for (const currentType of schema[name]) {
    for (let previousIndex = 0; previousIndex < result2.length; previousIndex++) {
      const previousType = result2[previousIndex];
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
        exclude.push(previousIndex);
      }
    }
    result2.push(currentType);
  }
  return result2.filter((_type, index) => !exclude.includes(index));
}
function compileMap(...typesList) {
  const result2 = {
    fallback: {},
    mapping: {},
    scalar: {},
    sequence: {}
  };
  for (const types of typesList) {
    for (const type of types) {
      if (type.kind !== null) {
        result2[type.kind][type.tag] = result2["fallback"][type.tag] = type;
      }
    }
  }
  return result2;
}
var Schema = class _Schema {
  static SCHEMA_DEFAULT;
  implicit;
  explicit;
  include;
  compiledImplicit;
  compiledExplicit;
  compiledTypeMap;
  constructor(definition) {
    this.explicit = definition.explicit || [];
    this.implicit = definition.implicit || [];
    this.include = definition.include || [];
    for (const type of this.implicit) {
      if (type.loadKind && type.loadKind !== "scalar") {
        throw new YAMLError(
          "There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported."
        );
      }
    }
    this.compiledImplicit = compileList(this, "implicit", []);
    this.compiledExplicit = compileList(this, "explicit", []);
    this.compiledTypeMap = compileMap(
      this.compiledImplicit,
      this.compiledExplicit
    );
  }
  /* Returns a new extended schema from current schema */
  extend(definition) {
    return new _Schema({
      implicit: [
        .../* @__PURE__ */ new Set([...this.implicit, ...definition?.implicit ?? []])
      ],
      explicit: [
        .../* @__PURE__ */ new Set([...this.explicit, ...definition?.explicit ?? []])
      ],
      include: [.../* @__PURE__ */ new Set([...this.include, ...definition?.include ?? []])]
    });
  }
  static create() {
  }
};

// https://deno.land/std@0.168.0/encoding/_yaml/type.ts
var DEFAULT_RESOLVE = () => true;
var DEFAULT_CONSTRUCT = (data) => data;
function checkTagFormat(tag) {
  return tag;
}
var Type2 = class {
  tag;
  kind = null;
  instanceOf;
  predicate;
  represent;
  defaultStyle;
  styleAliases;
  loadKind;
  constructor(tag, options) {
    this.tag = checkTagFormat(tag);
    if (options) {
      this.kind = options.kind;
      this.resolve = options.resolve || DEFAULT_RESOLVE;
      this.construct = options.construct || DEFAULT_CONSTRUCT;
      this.instanceOf = options.instanceOf;
      this.predicate = options.predicate;
      this.represent = options.represent;
      this.defaultStyle = options.defaultStyle;
      this.styleAliases = options.styleAliases;
    }
  }
  resolve = () => true;
  construct = (data) => data;
};

// https://deno.land/std@0.168.0/_util/asserts.ts
var DenoStdInternalError5 = class extends Error {
  constructor(message) {
    super(message);
    this.name = "DenoStdInternalError";
  }
};
function assert8(expr, msg = "") {
  if (!expr) {
    throw new DenoStdInternalError5(msg);
  }
}

// https://deno.land/std@0.168.0/bytes/copy.ts
function copy6(src, dst, off = 0) {
  off = Math.max(0, Math.min(off, dst.byteLength));
  const dstBytesAvailable = dst.byteLength - off;
  if (src.byteLength > dstBytesAvailable) {
    src = src.subarray(0, dstBytesAvailable);
  }
  dst.set(src, off);
  return src.byteLength;
}

// https://deno.land/std@0.168.0/io/buf_reader.ts
var CR4 = "\r".charCodeAt(0);
var LF4 = "\n".charCodeAt(0);

// https://deno.land/std@0.168.0/io/buffer.ts
var MIN_READ3 = 32 * 1024;
var MAX_SIZE3 = 2 ** 32 - 2;
var Buffer4 = class {
  #buf;
  // contents are the bytes buf[off : len(buf)]
  #off = 0;
  // read at buf[off], write at buf[buf.byteLength]
  constructor(ab) {
    this.#buf = ab === void 0 ? new Uint8Array(0) : new Uint8Array(ab);
  }
  /** Returns a slice holding the unread portion of the buffer.
   *
   * The slice is valid for use only until the next buffer modification (that
   * is, only until the next call to a method like `read()`, `write()`,
   * `reset()`, or `truncate()`). If `options.copy` is false the slice aliases the buffer content at
   * least until the next buffer modification, so immediate changes to the
   * slice will affect the result of future reads.
   * @param [options={ copy: true }]
   */
  bytes(options = { copy: true }) {
    if (options.copy === false)
      return this.#buf.subarray(this.#off);
    return this.#buf.slice(this.#off);
  }
  /** Returns whether the unread portion of the buffer is empty. */
  empty() {
    return this.#buf.byteLength <= this.#off;
  }
  /** A read only number of bytes of the unread portion of the buffer. */
  get length() {
    return this.#buf.byteLength - this.#off;
  }
  /** The read only capacity of the buffer's underlying byte slice, that is,
   * the total space allocated for the buffer's data. */
  get capacity() {
    return this.#buf.buffer.byteLength;
  }
  /** Discards all but the first `n` unread bytes from the buffer but
   * continues to use the same allocated storage. It throws if `n` is
   * negative or greater than the length of the buffer. */
  truncate(n) {
    if (n === 0) {
      this.reset();
      return;
    }
    if (n < 0 || n > this.length) {
      throw Error("bytes.Buffer: truncation out of range");
    }
    this.#reslice(this.#off + n);
  }
  reset() {
    this.#reslice(0);
    this.#off = 0;
  }
  #tryGrowByReslice(n) {
    const l2 = this.#buf.byteLength;
    if (n <= this.capacity - l2) {
      this.#reslice(l2 + n);
      return l2;
    }
    return -1;
  }
  #reslice(len) {
    assert8(len <= this.#buf.buffer.byteLength);
    this.#buf = new Uint8Array(this.#buf.buffer, 0, len);
  }
  /** Reads the next `p.length` bytes from the buffer or until the buffer is
   * drained. Returns the number of bytes read. If the buffer has no data to
   * return, the return is EOF (`null`). */
  readSync(p) {
    if (this.empty()) {
      this.reset();
      if (p.byteLength === 0) {
        return 0;
      }
      return null;
    }
    const nread = copy6(this.#buf.subarray(this.#off), p);
    this.#off += nread;
    return nread;
  }
  /** Reads the next `p.length` bytes from the buffer or until the buffer is
   * drained. Resolves to the number of bytes read. If the buffer has no
   * data to return, resolves to EOF (`null`).
   *
   * NOTE: This methods reads bytes synchronously; it's provided for
   * compatibility with `Reader` interfaces.
   */
  read(p) {
    const rr = this.readSync(p);
    return Promise.resolve(rr);
  }
  writeSync(p) {
    const m = this.#grow(p.byteLength);
    return copy6(p, this.#buf, m);
  }
  /** NOTE: This methods writes bytes synchronously; it's provided for
   * compatibility with `Writer` interface. */
  write(p) {
    const n = this.writeSync(p);
    return Promise.resolve(n);
  }
  #grow(n) {
    const m = this.length;
    if (m === 0 && this.#off !== 0) {
      this.reset();
    }
    const i2 = this.#tryGrowByReslice(n);
    if (i2 >= 0) {
      return i2;
    }
    const c = this.capacity;
    if (n <= Math.floor(c / 2) - m) {
      copy6(this.#buf.subarray(this.#off), this.#buf);
    } else if (c + n > MAX_SIZE3) {
      throw new Error("The buffer cannot be grown beyond the maximum size.");
    } else {
      const buf = new Uint8Array(Math.min(2 * c + n, MAX_SIZE3));
      copy6(this.#buf.subarray(this.#off), buf);
      this.#buf = buf;
    }
    this.#off = 0;
    this.#reslice(Math.min(m + n, MAX_SIZE3));
    return m;
  }
  /** Grows the buffer's capacity, if necessary, to guarantee space for
   * another `n` bytes. After `.grow(n)`, at least `n` bytes can be written to
   * the buffer without another allocation. If `n` is negative, `.grow()` will
   * throw. If the buffer can't grow it will throw an error.
   *
   * Based on Go Lang's
   * [Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow). */
  grow(n) {
    if (n < 0) {
      throw Error("Buffer.grow: negative count");
    }
    const m = this.#grow(n);
    this.#reslice(m);
  }
  /** Reads data from `r` until EOF (`null`) and appends it to the buffer,
   * growing the buffer as needed. It resolves to the number of bytes read.
   * If the buffer becomes too large, `.readFrom()` will reject with an error.
   *
   * Based on Go Lang's
   * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */
  async readFrom(r) {
    let n = 0;
    const tmp = new Uint8Array(MIN_READ3);
    while (true) {
      const shouldGrow = this.capacity - this.length < MIN_READ3;
      const buf = shouldGrow ? tmp : new Uint8Array(this.#buf.buffer, this.length);
      const nread = await r.read(buf);
      if (nread === null) {
        return n;
      }
      if (shouldGrow)
        this.writeSync(buf.subarray(0, nread));
      else
        this.#reslice(this.length + nread);
      n += nread;
    }
  }
  /** Reads data from `r` until EOF (`null`) and appends it to the buffer,
   * growing the buffer as needed. It returns the number of bytes read. If the
   * buffer becomes too large, `.readFromSync()` will throw an error.
   *
   * Based on Go Lang's
   * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */
  readFromSync(r) {
    let n = 0;
    const tmp = new Uint8Array(MIN_READ3);
    while (true) {
      const shouldGrow = this.capacity - this.length < MIN_READ3;
      const buf = shouldGrow ? tmp : new Uint8Array(this.#buf.buffer, this.length);
      const nread = r.readSync(buf);
      if (nread === null) {
        return n;
      }
      if (shouldGrow)
        this.writeSync(buf.subarray(0, nread));
      else
        this.#reslice(this.length + nread);
      n += nread;
    }
  }
};

// https://deno.land/std@0.168.0/encoding/_yaml/type/binary.ts
var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
function resolveYamlBinary(data) {
  if (data === null)
    return false;
  let code2;
  let bitlen = 0;
  const max = data.length;
  const map2 = BASE64_MAP;
  for (let idx = 0; idx < max; idx++) {
    code2 = map2.indexOf(data.charAt(idx));
    if (code2 > 64)
      continue;
    if (code2 < 0)
      return false;
    bitlen += 6;
  }
  return bitlen % 8 === 0;
}
function constructYamlBinary(data) {
  const input = data.replace(/[\r\n=]/g, "");
  const max = input.length;
  const map2 = BASE64_MAP;
  const result2 = [];
  let bits = 0;
  for (let idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result2.push(bits >> 16 & 255);
      result2.push(bits >> 8 & 255);
      result2.push(bits & 255);
    }
    bits = bits << 6 | map2.indexOf(input.charAt(idx));
  }
  const tailbits = max % 4 * 6;
  if (tailbits === 0) {
    result2.push(bits >> 16 & 255);
    result2.push(bits >> 8 & 255);
    result2.push(bits & 255);
  } else if (tailbits === 18) {
    result2.push(bits >> 10 & 255);
    result2.push(bits >> 2 & 255);
  } else if (tailbits === 12) {
    result2.push(bits >> 4 & 255);
  }
  return new Buffer4(new Uint8Array(result2));
}
function representYamlBinary(object) {
  const max = object.length;
  const map2 = BASE64_MAP;
  let result2 = "";
  let bits = 0;
  for (let idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result2 += map2[bits >> 18 & 63];
      result2 += map2[bits >> 12 & 63];
      result2 += map2[bits >> 6 & 63];
      result2 += map2[bits & 63];
    }
    bits = (bits << 8) + object[idx];
  }
  const tail = max % 3;
  if (tail === 0) {
    result2 += map2[bits >> 18 & 63];
    result2 += map2[bits >> 12 & 63];
    result2 += map2[bits >> 6 & 63];
    result2 += map2[bits & 63];
  } else if (tail === 2) {
    result2 += map2[bits >> 10 & 63];
    result2 += map2[bits >> 4 & 63];
    result2 += map2[bits << 2 & 63];
    result2 += map2[64];
  } else if (tail === 1) {
    result2 += map2[bits >> 2 & 63];
    result2 += map2[bits << 4 & 63];
    result2 += map2[64];
    result2 += map2[64];
  }
  return result2;
}
function isBinary(obj) {
  if (typeof obj?.readSync !== "function") {
    return false;
  }
  const buf = new Buffer4();
  try {
    if (0 > buf.readFromSync(obj))
      return true;
    return false;
  } catch {
    return false;
  } finally {
    buf.reset();
  }
}
var binary = new Type2("tag:yaml.org,2002:binary", {
  construct: constructYamlBinary,
  kind: "scalar",
  predicate: isBinary,
  represent: representYamlBinary,
  resolve: resolveYamlBinary
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/bool.ts
function resolveYamlBoolean(data) {
  const max = data.length;
  return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
}
function constructYamlBoolean(data) {
  return data === "true" || data === "True" || data === "TRUE";
}
var bool = new Type2("tag:yaml.org,2002:bool", {
  construct: constructYamlBoolean,
  defaultStyle: "lowercase",
  kind: "scalar",
  predicate: isBoolean,
  represent: {
    lowercase(object) {
      return object ? "true" : "false";
    },
    uppercase(object) {
      return object ? "TRUE" : "FALSE";
    },
    camelcase(object) {
      return object ? "True" : "False";
    }
  },
  resolve: resolveYamlBoolean
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/float.ts
var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  "^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
);
function resolveYamlFloat(data) {
  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === "_") {
    return false;
  }
  return true;
}
function constructYamlFloat(data) {
  let value = data.replace(/_/g, "").toLowerCase();
  const sign = value[0] === "-" ? -1 : 1;
  const digits = [];
  if ("+-".indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }
  if (value === ".inf") {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  }
  if (value === ".nan") {
    return NaN;
  }
  if (value.indexOf(":") >= 0) {
    value.split(":").forEach((v) => {
      digits.unshift(parseFloat(v));
    });
    let valueNb = 0;
    let base = 1;
    digits.forEach((d) => {
      valueNb += d * base;
      base *= 60;
    });
    return sign * valueNb;
  }
  return sign * parseFloat(value);
}
var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
function representYamlFloat(object, style) {
  if (isNaN(object)) {
    switch (style) {
      case "lowercase":
        return ".nan";
      case "uppercase":
        return ".NAN";
      case "camelcase":
        return ".NaN";
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return ".inf";
      case "uppercase":
        return ".INF";
      case "camelcase":
        return ".Inf";
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return "-.inf";
      case "uppercase":
        return "-.INF";
      case "camelcase":
        return "-.Inf";
    }
  } else if (isNegativeZero(object)) {
    return "-0.0";
  }
  const res = object.toString(10);
  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
}
function isFloat(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || isNegativeZero(object));
}
var float = new Type2("tag:yaml.org,2002:float", {
  construct: constructYamlFloat,
  defaultStyle: "lowercase",
  kind: "scalar",
  predicate: isFloat,
  represent: representYamlFloat,
  resolve: resolveYamlFloat
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/function.ts
function reconstructFunction(code2) {
  const func2 = new Function(`return ${code2}`)();
  if (!(func2 instanceof Function)) {
    throw new TypeError(`Expected function but got ${typeof func2}: ${code2}`);
  }
  return func2;
}
var func = new Type2("tag:yaml.org,2002:js/function", {
  kind: "scalar",
  resolve(data) {
    if (data === null) {
      return false;
    }
    try {
      reconstructFunction(`${data}`);
      return true;
    } catch (_err) {
      return false;
    }
  },
  construct(data) {
    return reconstructFunction(data);
  },
  predicate(object) {
    return object instanceof Function;
  },
  represent(object) {
    return object.toString();
  }
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/int.ts
function isHexCode(c) {
  return 48 <= /* 0 */
  c && c <= 57 || 65 <= /* A */
  c && c <= 70 || 97 <= /* a */
  c && c <= 102;
}
function isOctCode(c) {
  return 48 <= /* 0 */
  c && c <= 55;
}
function isDecCode(c) {
  return 48 <= /* 0 */
  c && c <= 57;
}
function resolveYamlInteger(data) {
  const max = data.length;
  let index = 0;
  let hasDigits = false;
  if (!max)
    return false;
  let ch = data[index];
  if (ch === "-" || ch === "+") {
    ch = data[++index];
  }
  if (ch === "0") {
    if (index + 1 === max)
      return true;
    ch = data[++index];
    if (ch === "b") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (ch !== "0" && ch !== "1")
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "x") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isHexCode(data.charCodeAt(index)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    for (; index < max; index++) {
      ch = data[index];
      if (ch === "_")
        continue;
      if (!isOctCode(data.charCodeAt(index)))
        return false;
      hasDigits = true;
    }
    return hasDigits && ch !== "_";
  }
  if (ch === "_")
    return false;
  for (; index < max; index++) {
    ch = data[index];
    if (ch === "_")
      continue;
    if (ch === ":")
      break;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }
  if (!hasDigits || ch === "_")
    return false;
  if (ch !== ":")
    return true;
  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
}
function constructYamlInteger(data) {
  let value = data;
  const digits = [];
  if (value.indexOf("_") !== -1) {
    value = value.replace(/_/g, "");
  }
  let sign = 1;
  let ch = value[0];
  if (ch === "-" || ch === "+") {
    if (ch === "-")
      sign = -1;
    value = value.slice(1);
    ch = value[0];
  }
  if (value === "0")
    return 0;
  if (ch === "0") {
    if (value[1] === "b")
      return sign * parseInt(value.slice(2), 2);
    if (value[1] === "x")
      return sign * parseInt(value, 16);
    return sign * parseInt(value, 8);
  }
  if (value.indexOf(":") !== -1) {
    value.split(":").forEach((v) => {
      digits.unshift(parseInt(v, 10));
    });
    let valueInt = 0;
    let base = 1;
    digits.forEach((d) => {
      valueInt += d * base;
      base *= 60;
    });
    return sign * valueInt;
  }
  return sign * parseInt(value, 10);
}
function isInteger(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && object % 1 === 0 && !isNegativeZero(object);
}
var int = new Type2("tag:yaml.org,2002:int", {
  construct: constructYamlInteger,
  defaultStyle: "decimal",
  kind: "scalar",
  predicate: isInteger,
  represent: {
    binary(obj) {
      return obj >= 0 ? `0b${obj.toString(2)}` : `-0b${obj.toString(2).slice(1)}`;
    },
    octal(obj) {
      return obj >= 0 ? `0${obj.toString(8)}` : `-0${obj.toString(8).slice(1)}`;
    },
    decimal(obj) {
      return obj.toString(10);
    },
    hexadecimal(obj) {
      return obj >= 0 ? `0x${obj.toString(16).toUpperCase()}` : `-0x${obj.toString(16).toUpperCase().slice(1)}`;
    }
  },
  resolve: resolveYamlInteger,
  styleAliases: {
    binary: [2, "bin"],
    decimal: [10, "dec"],
    hexadecimal: [16, "hex"],
    octal: [8, "oct"]
  }
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/map.ts
var map = new Type2("tag:yaml.org,2002:map", {
  construct(data) {
    return data !== null ? data : {};
  },
  kind: "mapping"
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/merge.ts
function resolveYamlMerge(data) {
  return data === "<<" || data === null;
}
var merge = new Type2("tag:yaml.org,2002:merge", {
  kind: "scalar",
  resolve: resolveYamlMerge
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/nil.ts
function resolveYamlNull(data) {
  const max = data.length;
  return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
}
function constructYamlNull() {
  return null;
}
function isNull(object) {
  return object === null;
}
var nil = new Type2("tag:yaml.org,2002:null", {
  construct: constructYamlNull,
  defaultStyle: "lowercase",
  kind: "scalar",
  predicate: isNull,
  represent: {
    canonical() {
      return "~";
    },
    lowercase() {
      return "null";
    },
    uppercase() {
      return "NULL";
    },
    camelcase() {
      return "Null";
    }
  },
  resolve: resolveYamlNull
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/omap.ts
var { hasOwn } = Object;
var _toString = Object.prototype.toString;
function resolveYamlOmap(data) {
  const objectKeys = [];
  let pairKey = "";
  let pairHasKey = false;
  for (const pair of data) {
    pairHasKey = false;
    if (_toString.call(pair) !== "[object Object]")
      return false;
    for (pairKey in pair) {
      if (hasOwn(pair, pairKey)) {
        if (!pairHasKey)
          pairHasKey = true;
        else
          return false;
      }
    }
    if (!pairHasKey)
      return false;
    if (objectKeys.indexOf(pairKey) === -1)
      objectKeys.push(pairKey);
    else
      return false;
  }
  return true;
}
function constructYamlOmap(data) {
  return data !== null ? data : [];
}
var omap = new Type2("tag:yaml.org,2002:omap", {
  construct: constructYamlOmap,
  kind: "sequence",
  resolve: resolveYamlOmap
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/pairs.ts
var _toString2 = Object.prototype.toString;
function resolveYamlPairs(data) {
  const result2 = Array.from({ length: data.length });
  for (let index = 0; index < data.length; index++) {
    const pair = data[index];
    if (_toString2.call(pair) !== "[object Object]")
      return false;
    const keys = Object.keys(pair);
    if (keys.length !== 1)
      return false;
    result2[index] = [keys[0], pair[keys[0]]];
  }
  return true;
}
function constructYamlPairs(data) {
  if (data === null)
    return [];
  const result2 = Array.from({ length: data.length });
  for (let index = 0; index < data.length; index += 1) {
    const pair = data[index];
    const keys = Object.keys(pair);
    result2[index] = [keys[0], pair[keys[0]]];
  }
  return result2;
}
var pairs = new Type2("tag:yaml.org,2002:pairs", {
  construct: constructYamlPairs,
  kind: "sequence",
  resolve: resolveYamlPairs
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/regexp.ts
var REGEXP = /^\/(?<regexp>[\s\S]+)\/(?<modifiers>[gismuy]*)$/;
var regexp = new Type2("tag:yaml.org,2002:js/regexp", {
  kind: "scalar",
  resolve(data) {
    if (data === null || !data.length) {
      return false;
    }
    const regexp2 = `${data}`;
    if (regexp2.charAt(0) === "/") {
      if (!REGEXP.test(data)) {
        return false;
      }
      const modifiers = [...regexp2.match(REGEXP)?.groups?.modifiers ?? ""];
      if (new Set(modifiers).size < modifiers.length) {
        return false;
      }
    }
    return true;
  },
  construct(data) {
    const { regexp: regexp2 = `${data}`, modifiers = "" } = `${data}`.match(REGEXP)?.groups ?? {};
    return new RegExp(regexp2, modifiers);
  },
  predicate(object) {
    return object instanceof RegExp;
  },
  represent(object) {
    return object.toString();
  }
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/seq.ts
var seq = new Type2("tag:yaml.org,2002:seq", {
  construct(data) {
    return data !== null ? data : [];
  },
  kind: "sequence"
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/set.ts
var { hasOwn: hasOwn2 } = Object;
function resolveYamlSet(data) {
  if (data === null)
    return true;
  for (const key in data) {
    if (hasOwn2(data, key)) {
      if (data[key] !== null)
        return false;
    }
  }
  return true;
}
function constructYamlSet(data) {
  return data !== null ? data : {};
}
var set = new Type2("tag:yaml.org,2002:set", {
  construct: constructYamlSet,
  kind: "mapping",
  resolve: resolveYamlSet
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/str.ts
var str = new Type2("tag:yaml.org,2002:str", {
  construct(data) {
    return data !== null ? data : "";
  },
  kind: "scalar"
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/timestamp.ts
var YAML_DATE_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
  // [3] day
);
var YAML_TIMESTAMP_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
  // [11] tz_minute
);
function resolveYamlTimestamp(data) {
  if (data === null)
    return false;
  if (YAML_DATE_REGEXP.exec(data) !== null)
    return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
    return true;
  return false;
}
function constructYamlTimestamp(data) {
  let match = YAML_DATE_REGEXP.exec(data);
  if (match === null)
    match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null)
    throw new Error("Date resolve error");
  const year = +match[1];
  const month = +match[2] - 1;
  const day = +match[3];
  if (!match[4]) {
    return new Date(Date.UTC(year, month, day));
  }
  const hour = +match[4];
  const minute = +match[5];
  const second = +match[6];
  let fraction = 0;
  if (match[7]) {
    let partFraction = match[7].slice(0, 3);
    while (partFraction.length < 3) {
      partFraction += "0";
    }
    fraction = +partFraction;
  }
  let delta = null;
  if (match[9]) {
    const tzHour = +match[10];
    const tzMinute = +(match[11] || 0);
    delta = (tzHour * 60 + tzMinute) * 6e4;
    if (match[9] === "-")
      delta = -delta;
  }
  const date = new Date(
    Date.UTC(year, month, day, hour, minute, second, fraction)
  );
  if (delta)
    date.setTime(date.getTime() - delta);
  return date;
}
function representYamlTimestamp(date) {
  return date.toISOString();
}
var timestamp = new Type2("tag:yaml.org,2002:timestamp", {
  construct: constructYamlTimestamp,
  instanceOf: Date,
  kind: "scalar",
  represent: representYamlTimestamp,
  resolve: resolveYamlTimestamp
});

// https://deno.land/std@0.168.0/encoding/_yaml/type/undefined.ts
var undefinedType = new Type2("tag:yaml.org,2002:js/undefined", {
  kind: "scalar",
  resolve() {
    return true;
  },
  construct() {
    return void 0;
  },
  predicate(object) {
    return typeof object === "undefined";
  },
  represent() {
    return "";
  }
});

// https://deno.land/std@0.168.0/encoding/_yaml/schema/failsafe.ts
var failsafe = new Schema({
  explicit: [str, seq, map]
});

// https://deno.land/std@0.168.0/encoding/_yaml/schema/json.ts
var json = new Schema({
  implicit: [nil, bool, int, float],
  include: [failsafe]
});

// https://deno.land/std@0.168.0/encoding/_yaml/schema/core.ts
var core = new Schema({
  include: [json]
});

// https://deno.land/std@0.168.0/encoding/_yaml/schema/default.ts
var def = new Schema({
  explicit: [binary, omap, pairs, set],
  implicit: [timestamp, merge],
  include: [core]
});

// https://deno.land/std@0.168.0/encoding/_yaml/schema/extended.ts
var extended = new Schema({
  explicit: [regexp, undefinedType],
  include: [def]
});

// https://deno.land/std@0.168.0/encoding/_yaml/state.ts
var State = class {
  constructor(schema = def) {
    this.schema = schema;
  }
};

// https://deno.land/std@0.168.0/encoding/_yaml/loader/loader_state.ts
var LoaderState = class extends State {
  constructor(input, {
    filename,
    schema,
    onWarning,
    legacy = false,
    json: json2 = false,
    listener = null
  }) {
    super(schema);
    this.input = input;
    this.filename = filename;
    this.onWarning = onWarning;
    this.legacy = legacy;
    this.json = json2;
    this.listener = listener;
    this.implicitTypes = this.schema.compiledImplicit;
    this.typeMap = this.schema.compiledTypeMap;
    this.length = input.length;
  }
  documents = [];
  length;
  lineIndent = 0;
  lineStart = 0;
  position = 0;
  line = 0;
  filename;
  onWarning;
  legacy;
  json;
  listener;
  implicitTypes;
  typeMap;
  version;
  checkLineBreaks;
  tagMap;
  anchorMap;
  tag;
  anchor;
  kind;
  result = "";
};

// https://deno.land/std@0.168.0/encoding/_yaml/loader/loader.ts
var { hasOwn: hasOwn3 } = Object;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = (
  // deno-lint-ignore no-control-regex
  /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/
);
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function isEOL(c) {
  return c === 10 || /* LF */
  c === 13;
}
function isWhiteSpace(c) {
  return c === 9 || /* Tab */
  c === 32;
}
function isWsOrEol(c) {
  return c === 9 || c === 32 || c === 10 || c === 13;
}
function isFlowIndicator(c) {
  return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
}
function fromHexCode(c) {
  if (48 <= /* 0 */
  c && c <= 57) {
    return c - 48;
  }
  const lc = c | 32;
  if (97 <= /* a */
  lc && lc <= 102) {
    return lc - 97 + 10;
  }
  return -1;
}
function escapedHexLen(c) {
  if (c === 120) {
    return 2;
  }
  if (c === 117) {
    return 4;
  }
  if (c === 85) {
    return 8;
  }
  return 0;
}
function fromDecimalCode(c) {
  if (48 <= /* 0 */
  c && c <= 57) {
    return c - 48;
  }
  return -1;
}
function simpleEscapeSequence(c) {
  return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
}
function charFromCodepoint(c) {
  if (c <= 65535) {
    return String.fromCharCode(c);
  }
  return String.fromCharCode(
    (c - 65536 >> 10) + 55296,
    (c - 65536 & 1023) + 56320
  );
}
var simpleEscapeCheck = Array.from({ length: 256 });
var simpleEscapeMap = Array.from({ length: 256 });
for (let i2 = 0; i2 < 256; i2++) {
  simpleEscapeCheck[i2] = simpleEscapeSequence(i2) ? 1 : 0;
  simpleEscapeMap[i2] = simpleEscapeSequence(i2);
}
function generateError(state, message) {
  return new YAMLError(
    message,
    new Mark(
      state.filename,
      state.input,
      state.position,
      state.line,
      state.position - state.lineStart
    )
  );
}
function throwError(state, message) {
  throw generateError(state, message);
}
function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}
var directiveHandlers = {
  YAML(state, _name, ...args) {
    if (state.version !== null) {
      return throwError(state, "duplication of %YAML directive");
    }
    if (args.length !== 1) {
      return throwError(state, "YAML directive accepts exactly one argument");
    }
    const match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
    if (match === null) {
      return throwError(state, "ill-formed argument of the YAML directive");
    }
    const major = parseInt(match[1], 10);
    const minor = parseInt(match[2], 10);
    if (major !== 1) {
      return throwError(state, "unacceptable YAML version of the document");
    }
    state.version = args[0];
    state.checkLineBreaks = minor < 2;
    if (minor !== 1 && minor !== 2) {
      return throwWarning(state, "unsupported YAML version of the document");
    }
  },
  TAG(state, _name, ...args) {
    if (args.length !== 2) {
      return throwError(state, "TAG directive accepts exactly two arguments");
    }
    const handle = args[0];
    const prefix = args[1];
    if (!PATTERN_TAG_HANDLE.test(handle)) {
      return throwError(
        state,
        "ill-formed tag handle (first argument) of the TAG directive"
      );
    }
    if (state.tagMap && hasOwn3(state.tagMap, handle)) {
      return throwError(
        state,
        `there is a previously declared suffix for "${handle}" tag handle`
      );
    }
    if (!PATTERN_TAG_URI.test(prefix)) {
      return throwError(
        state,
        "ill-formed tag prefix (second argument) of the TAG directive"
      );
    }
    if (typeof state.tagMap === "undefined") {
      state.tagMap = {};
    }
    state.tagMap[handle] = prefix;
  }
};
function captureSegment(state, start, end, checkJson) {
  let result2;
  if (start < end) {
    result2 = state.input.slice(start, end);
    if (checkJson) {
      for (let position = 0, length = result2.length; position < length; position++) {
        const character = result2.charCodeAt(position);
        if (!(character === 9 || 32 <= character && character <= 1114111)) {
          return throwError(state, "expected valid JSON character");
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(result2)) {
      return throwError(state, "the stream contains non-printable characters");
    }
    state.result += result2;
  }
}
function mergeMappings(state, destination, source, overridableKeys) {
  if (!isObject(source)) {
    return throwError(
      state,
      "cannot merge mappings; the provided source object is unacceptable"
    );
  }
  const keys = Object.keys(source);
  for (let i2 = 0, len = keys.length; i2 < len; i2++) {
    const key = keys[i2];
    if (!hasOwn3(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}
function storeMappingPair(state, result2, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);
    for (let index = 0, quantity = keyNode.length; index < quantity; index++) {
      if (Array.isArray(keyNode[index])) {
        return throwError(state, "nested arrays are not supported inside keys");
      }
      if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
        keyNode[index] = "[object Object]";
      }
    }
  }
  if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
    keyNode = "[object Object]";
  }
  keyNode = String(keyNode);
  if (result2 === null) {
    result2 = {};
  }
  if (keyTag === "tag:yaml.org,2002:merge") {
    if (Array.isArray(valueNode)) {
      for (let index = 0, quantity = valueNode.length; index < quantity; index++) {
        mergeMappings(state, result2, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, result2, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !hasOwn3(overridableKeys, keyNode) && hasOwn3(result2, keyNode)) {
      state.line = startLine || state.line;
      state.position = startPos || state.position;
      return throwError(state, "duplicated mapping key");
    }
    result2[keyNode] = valueNode;
    delete overridableKeys[keyNode];
  }
  return result2;
}
function readLineBreak(state) {
  const ch = state.input.charCodeAt(state.position);
  if (ch === 10) {
    state.position++;
  } else if (ch === 13) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 10) {
      state.position++;
    }
  } else {
    return throwError(state, "a line break is expected");
  }
  state.line += 1;
  state.lineStart = state.position;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
  let lineBreaks = 0, ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    while (isWhiteSpace(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    if (allowComments && ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 10 && /* LF */
      ch !== 13 && /* CR */
      ch !== 0);
    }
    if (isEOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;
      while (ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }
  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, "deficient indentation");
  }
  return lineBreaks;
}
function testDocumentSeparator(state) {
  let _position = state.position;
  let ch = state.input.charCodeAt(_position);
  if ((ch === 45 || /* - */
  ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);
    if (ch === 0 || isWsOrEol(ch)) {
      return true;
    }
  }
  return false;
}
function writeFoldedLines(state, count4) {
  if (count4 === 1) {
    state.result += " ";
  } else if (count4 > 1) {
    state.result += repeat("\n", count4 - 1);
  }
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  const kind = state.kind;
  const result2 = state.result;
  let ch = state.input.charCodeAt(state.position);
  if (isWsOrEol(ch) || isFlowIndicator(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
    return false;
  }
  let following;
  if (ch === 63 || /* ? */
  ch === 45) {
    following = state.input.charCodeAt(state.position + 1);
    if (isWsOrEol(following) || withinFlowCollection && isFlowIndicator(following)) {
      return false;
    }
  }
  state.kind = "scalar";
  state.result = "";
  let captureEnd, captureStart = captureEnd = state.position;
  let hasPendingContent = false;
  let line = 0;
  while (ch !== 0) {
    if (ch === 58) {
      following = state.input.charCodeAt(state.position + 1);
      if (isWsOrEol(following) || withinFlowCollection && isFlowIndicator(following)) {
        break;
      }
    } else if (ch === 35) {
      const preceding = state.input.charCodeAt(state.position - 1);
      if (isWsOrEol(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && isFlowIndicator(ch)) {
      break;
    } else if (isEOL(ch)) {
      line = state.line;
      const lineStart = state.lineStart;
      const lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);
      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = line;
        state.lineStart = lineStart;
        state.lineIndent = lineIndent;
        break;
      }
    }
    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }
    if (!isWhiteSpace(ch)) {
      captureEnd = state.position + 1;
    }
    ch = state.input.charCodeAt(++state.position);
  }
  captureSegment(state, captureStart, captureEnd, false);
  if (state.result) {
    return true;
  }
  state.kind = kind;
  state.result = result2;
  return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
  let ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 39) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 39) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (ch === 39) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (isEOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      return throwError(
        state,
        "unexpected end of the document within a single quoted scalar"
      );
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  return throwError(
    state,
    "unexpected end of the stream within a single quoted scalar"
  );
}
function readDoubleQuotedScalar(state, nodeIndent) {
  let ch = state.input.charCodeAt(state.position);
  if (ch !== 34) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  let captureEnd, captureStart = captureEnd = state.position;
  let tmp;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 34) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    }
    if (ch === 92) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (isEOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        let hexLength = tmp;
        let hexResult = 0;
        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);
          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            return throwError(state, "expected hexadecimal character");
          }
        }
        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        return throwError(state, "unknown escape sequence");
      }
      captureStart = captureEnd = state.position;
    } else if (isEOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      return throwError(
        state,
        "unexpected end of the document within a double quoted scalar"
      );
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  return throwError(
    state,
    "unexpected end of the stream within a double quoted scalar"
  );
}
function readFlowCollection(state, nodeIndent) {
  let ch = state.input.charCodeAt(state.position);
  let terminator;
  let isMapping = true;
  let result2 = {};
  if (ch === 91) {
    terminator = 93;
    isMapping = false;
    result2 = [];
  } else if (ch === 123) {
    terminator = 125;
  } else {
    return false;
  }
  if (state.anchor !== null && typeof state.anchor != "undefined" && typeof state.anchorMap != "undefined") {
    state.anchorMap[state.anchor] = result2;
  }
  ch = state.input.charCodeAt(++state.position);
  const tag = state.tag, anchor = state.anchor;
  let readNext = true;
  let valueNode, keyNode, keyTag = keyNode = valueNode = null, isExplicitPair, isPair = isExplicitPair = false;
  let following = 0, line = 0;
  const overridableKeys = {};
  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === terminator) {
      state.position++;
      state.tag = tag;
      state.anchor = anchor;
      state.kind = isMapping ? "mapping" : "sequence";
      state.result = result2;
      return true;
    }
    if (!readNext) {
      return throwError(state, "missed comma between flow collection entries");
    }
    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;
    if (ch === 63) {
      following = state.input.charCodeAt(state.position + 1);
      if (isWsOrEol(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }
    line = state.line;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag || null;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if ((isExplicitPair || state.line === line) && ch === 58) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }
    if (isMapping) {
      storeMappingPair(
        state,
        result2,
        overridableKeys,
        keyTag,
        keyNode,
        valueNode
      );
    } else if (isPair) {
      result2.push(
        storeMappingPair(
          state,
          null,
          overridableKeys,
          keyTag,
          keyNode,
          valueNode
        )
      );
    } else {
      result2.push(keyNode);
    }
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === 44) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }
  return throwError(
    state,
    "unexpected end of the stream within a flow collection"
  );
}
function readBlockScalar(state, nodeIndent) {
  let chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false;
  let ch = state.input.charCodeAt(state.position);
  let folding = false;
  if (ch === 124) {
    folding = false;
  } else if (ch === 62) {
    folding = true;
  } else {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  let tmp = 0;
  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);
    if (ch === 43 || /* + */
    ch === 45) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        return throwError(state, "repeat of a chomping mode identifier");
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        return throwError(
          state,
          "bad explicit indentation width of a block scalar; it cannot be less than one"
        );
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        return throwError(state, "repeat of an indentation width identifier");
      }
    } else {
      break;
    }
  }
  if (isWhiteSpace(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (isWhiteSpace(ch));
    if (ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!isEOL(ch) && ch !== 0);
    }
  }
  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);
    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }
    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }
    if (isEOL(ch)) {
      emptyLines++;
      continue;
    }
    if (state.lineIndent < textIndent) {
      if (chomping === CHOMPING_KEEP) {
        state.result += repeat(
          "\n",
          didReadContent ? 1 + emptyLines : emptyLines
        );
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          state.result += "\n";
        }
      }
      break;
    }
    if (folding) {
      if (isWhiteSpace(ch)) {
        atMoreIndented = true;
        state.result += repeat(
          "\n",
          didReadContent ? 1 + emptyLines : emptyLines
        );
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += repeat("\n", emptyLines + 1);
      } else if (emptyLines === 0) {
        if (didReadContent) {
          state.result += " ";
        }
      } else {
        state.result += repeat("\n", emptyLines);
      }
    } else {
      state.result += repeat(
        "\n",
        didReadContent ? 1 + emptyLines : emptyLines
      );
    }
    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    const captureStart = state.position;
    while (!isEOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, state.position, false);
  }
  return true;
}
function readBlockSequence(state, nodeIndent) {
  let line, following, detected = false, ch;
  const tag = state.tag, anchor = state.anchor, result2 = [];
  if (state.anchor !== null && typeof state.anchor !== "undefined" && typeof state.anchorMap !== "undefined") {
    state.anchorMap[state.anchor] = result2;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (ch !== 45) {
      break;
    }
    following = state.input.charCodeAt(state.position + 1);
    if (!isWsOrEol(following)) {
      break;
    }
    detected = true;
    state.position++;
    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        result2.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }
    line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    result2.push(state.result);
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if ((state.line === line || state.lineIndent > nodeIndent) && ch !== 0) {
      return throwError(state, "bad indentation of a sequence entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (detected) {
    state.tag = tag;
    state.anchor = anchor;
    state.kind = "sequence";
    state.result = result2;
    return true;
  }
  return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
  const tag = state.tag, anchor = state.anchor, result2 = {}, overridableKeys = {};
  let following, allowCompact = false, line, pos, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
  if (state.anchor !== null && typeof state.anchor !== "undefined" && typeof state.anchorMap !== "undefined") {
    state.anchorMap[state.anchor] = result2;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    following = state.input.charCodeAt(state.position + 1);
    line = state.line;
    pos = state.position;
    if ((ch === 63 || /* ? */
    ch === 58) && /* : */
    isWsOrEol(following)) {
      if (ch === 63) {
        if (atExplicitKey) {
          storeMappingPair(
            state,
            result2,
            overridableKeys,
            keyTag,
            keyNode,
            null
          );
          keyTag = keyNode = valueNode = null;
        }
        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        atExplicitKey = false;
        allowCompact = true;
      } else {
        return throwError(
          state,
          "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"
        );
      }
      state.position += 1;
      ch = following;
    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
      if (state.line === line) {
        ch = state.input.charCodeAt(state.position);
        while (isWhiteSpace(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 58) {
          ch = state.input.charCodeAt(++state.position);
          if (!isWsOrEol(ch)) {
            return throwError(
              state,
              "a whitespace character is expected after the key-value separator within a block mapping"
            );
          }
          if (atExplicitKey) {
            storeMappingPair(
              state,
              result2,
              overridableKeys,
              keyTag,
              keyNode,
              null
            );
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          return throwError(
            state,
            "can not read an implicit mapping pair; a colon is missed"
          );
        } else {
          state.tag = tag;
          state.anchor = anchor;
          return true;
        }
      } else if (detected) {
        return throwError(
          state,
          "can not read a block mapping entry; a multiline key may not be an implicit key"
        );
      } else {
        state.tag = tag;
        state.anchor = anchor;
        return true;
      }
    } else {
      break;
    }
    if (state.line === line || state.lineIndent > nodeIndent) {
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }
      if (!atExplicitKey) {
        storeMappingPair(
          state,
          result2,
          overridableKeys,
          keyTag,
          keyNode,
          valueNode,
          line,
          pos
        );
        keyTag = keyNode = valueNode = null;
      }
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }
    if (state.lineIndent > nodeIndent && ch !== 0) {
      return throwError(state, "bad indentation of a mapping entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (atExplicitKey) {
    storeMappingPair(
      state,
      result2,
      overridableKeys,
      keyTag,
      keyNode,
      null
    );
  }
  if (detected) {
    state.tag = tag;
    state.anchor = anchor;
    state.kind = "mapping";
    state.result = result2;
  }
  return detected;
}
function readTagProperty(state) {
  let position, isVerbatim = false, isNamed = false, tagHandle = "", tagName, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 33)
    return false;
  if (state.tag !== null) {
    return throwError(state, "duplication of a tag property");
  }
  ch = state.input.charCodeAt(++state.position);
  if (ch === 60) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 33) {
    isNamed = true;
    tagHandle = "!!";
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = "!";
  }
  position = state.position;
  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 62);
    if (state.position < state.length) {
      tagName = state.input.slice(position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      return throwError(
        state,
        "unexpected end of the stream within a verbatim tag"
      );
    }
  } else {
    while (ch !== 0 && !isWsOrEol(ch)) {
      if (ch === 33) {
        if (!isNamed) {
          tagHandle = state.input.slice(position - 1, state.position + 1);
          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            return throwError(
              state,
              "named tag handle cannot contain such characters"
            );
          }
          isNamed = true;
          position = state.position + 1;
        } else {
          return throwError(
            state,
            "tag suffix cannot contain exclamation marks"
          );
        }
      }
      ch = state.input.charCodeAt(++state.position);
    }
    tagName = state.input.slice(position, state.position);
    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      return throwError(
        state,
        "tag suffix cannot contain flow indicator characters"
      );
    }
  }
  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    return throwError(
      state,
      `tag name cannot contain such characters: ${tagName}`
    );
  }
  if (isVerbatim) {
    state.tag = tagName;
  } else if (typeof state.tagMap !== "undefined" && hasOwn3(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === "!") {
    state.tag = `!${tagName}`;
  } else if (tagHandle === "!!") {
    state.tag = `tag:yaml.org,2002:${tagName}`;
  } else {
    return throwError(state, `undeclared tag handle "${tagHandle}"`);
  }
  return true;
}
function readAnchorProperty(state) {
  let ch = state.input.charCodeAt(state.position);
  if (ch !== 38)
    return false;
  if (state.anchor !== null) {
    return throwError(state, "duplication of an anchor property");
  }
  ch = state.input.charCodeAt(++state.position);
  const position = state.position;
  while (ch !== 0 && !isWsOrEol(ch) && !isFlowIndicator(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === position) {
    return throwError(
      state,
      "name of an anchor node must contain at least one character"
    );
  }
  state.anchor = state.input.slice(position, state.position);
  return true;
}
function readAlias(state) {
  let ch = state.input.charCodeAt(state.position);
  if (ch !== 42)
    return false;
  ch = state.input.charCodeAt(++state.position);
  const _position = state.position;
  while (ch !== 0 && !isWsOrEol(ch) && !isFlowIndicator(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    return throwError(
      state,
      "name of an alias node must contain at least one character"
    );
  }
  const alias = state.input.slice(_position, state.position);
  if (typeof state.anchorMap !== "undefined" && !hasOwn3(state.anchorMap, alias)) {
    return throwError(state, `unidentified alias "${alias}"`);
  }
  if (typeof state.anchorMap !== "undefined") {
    state.result = state.anchorMap[alias];
  }
  skipSeparationSpace(state, true, -1);
  return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  let allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, type, flowIndent, blockIndent;
  if (state.listener && state.listener !== null) {
    state.listener("open", state);
  }
  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  const allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;
      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }
  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }
  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }
  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    const cond = CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext;
    flowIndent = cond ? parentIndent : parentIndent + 1;
    blockIndent = state.position - state.lineStart;
    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;
          if (state.tag !== null || state.anchor !== null) {
            return throwError(
              state,
              "alias node should not have Any properties"
            );
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;
          if (state.tag === null) {
            state.tag = "?";
          }
        }
        if (state.anchor !== null && typeof state.anchorMap !== "undefined") {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }
  if (state.tag !== null && state.tag !== "!") {
    if (state.tag === "?") {
      for (let typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex++) {
        type = state.implicitTypes[typeIndex];
        if (type.resolve(state.result)) {
          state.result = type.construct(state.result);
          state.tag = type.tag;
          if (state.anchor !== null && typeof state.anchorMap !== "undefined") {
            state.anchorMap[state.anchor] = state.result;
          }
          break;
        }
      }
    } else if (hasOwn3(state.typeMap[state.kind || "fallback"], state.tag)) {
      type = state.typeMap[state.kind || "fallback"][state.tag];
      if (state.result !== null && type.kind !== state.kind) {
        return throwError(
          state,
          `unacceptable node kind for !<${state.tag}> tag; it should be "${type.kind}", not "${state.kind}"`
        );
      }
      if (!type.resolve(state.result)) {
        return throwError(
          state,
          `cannot resolve a node with !<${state.tag}> explicit tag`
        );
      } else {
        state.result = type.construct(state.result);
        if (state.anchor !== null && typeof state.anchorMap !== "undefined") {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else {
      return throwError(state, `unknown tag !<${state.tag}>`);
    }
  }
  if (state.listener && state.listener !== null) {
    state.listener("close", state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}
function readDocument(state) {
  const documentStart = state.position;
  let position, directiveName, directiveArgs, hasDirectives = false, ch;
  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = {};
  state.anchorMap = {};
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if (state.lineIndent > 0 || ch !== 37) {
      break;
    }
    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    position = state.position;
    while (ch !== 0 && !isWsOrEol(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    directiveName = state.input.slice(position, state.position);
    directiveArgs = [];
    if (directiveName.length < 1) {
      return throwError(
        state,
        "directive name must not be less than one character in length"
      );
    }
    while (ch !== 0) {
      while (isWhiteSpace(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !isEOL(ch));
        break;
      }
      if (isEOL(ch))
        break;
      position = state.position;
      while (ch !== 0 && !isWsOrEol(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveArgs.push(state.input.slice(position, state.position));
    }
    if (ch !== 0)
      readLineBreak(state);
    if (hasOwn3(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, ...directiveArgs);
    } else {
      throwWarning(state, `unknown document directive "${directiveName}"`);
    }
  }
  skipSeparationSpace(state, true, -1);
  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    return throwError(state, "directives end mark is expected");
  }
  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);
  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(
    state.input.slice(documentStart, state.position)
  )) {
    throwWarning(state, "non-ASCII line breaks are interpreted as content");
  }
  state.documents.push(state.result);
  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 46) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }
  if (state.position < state.length - 1) {
    return throwError(
      state,
      "end of the stream or a document separator is expected"
    );
  } else {
    return;
  }
}
function loadDocuments(input, options) {
  input = String(input);
  options = options || {};
  if (input.length !== 0) {
    if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
      input += "\n";
    }
    if (input.charCodeAt(0) === 65279) {
      input = input.slice(1);
    }
  }
  const state = new LoaderState(input, options);
  state.input += "\0";
  while (state.input.charCodeAt(state.position) === 32) {
    state.lineIndent += 1;
    state.position += 1;
  }
  while (state.position < state.length - 1) {
    readDocument(state);
  }
  return state.documents;
}
function load(input, options) {
  const documents = loadDocuments(input, options);
  if (documents.length === 0) {
    return;
  }
  if (documents.length === 1) {
    return documents[0];
  }
  throw new YAMLError(
    "expected a single document in the stream, but found more"
  );
}

// https://deno.land/std@0.168.0/encoding/_yaml/parse.ts
function parse12(content, options) {
  return load(content, options);
}

// https://deno.land/std@0.168.0/encoding/_yaml/dumper/dumper_state.ts
var { hasOwn: hasOwn4 } = Object;

// https://deno.land/std@0.168.0/encoding/_yaml/dumper/dumper.ts
var { hasOwn: hasOwn5 } = Object;
var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0] = "\\0";
ESCAPE_SEQUENCES[7] = "\\a";
ESCAPE_SEQUENCES[8] = "\\b";
ESCAPE_SEQUENCES[9] = "\\t";
ESCAPE_SEQUENCES[10] = "\\n";
ESCAPE_SEQUENCES[11] = "\\v";
ESCAPE_SEQUENCES[12] = "\\f";
ESCAPE_SEQUENCES[13] = "\\r";
ESCAPE_SEQUENCES[27] = "\\e";
ESCAPE_SEQUENCES[34] = '\\"';
ESCAPE_SEQUENCES[92] = "\\\\";
ESCAPE_SEQUENCES[133] = "\\N";
ESCAPE_SEQUENCES[160] = "\\_";
ESCAPE_SEQUENCES[8232] = "\\L";
ESCAPE_SEQUENCES[8233] = "\\P";

// subrepos/cliffy/ansi/ansi_escapes.ts
var ansi_escapes_exports = {};
__export(ansi_escapes_exports, {
  bel: () => bel,
  clearScreen: () => clearScreen,
  clearTerminal: () => clearTerminal,
  cursorBackward: () => cursorBackward,
  cursorDown: () => cursorDown,
  cursorForward: () => cursorForward,
  cursorHide: () => cursorHide,
  cursorLeft: () => cursorLeft,
  cursorMove: () => cursorMove,
  cursorNextLine: () => cursorNextLine,
  cursorPosition: () => cursorPosition,
  cursorPrevLine: () => cursorPrevLine,
  cursorRestore: () => cursorRestore,
  cursorSave: () => cursorSave,
  cursorShow: () => cursorShow,
  cursorTo: () => cursorTo,
  cursorUp: () => cursorUp,
  eraseDown: () => eraseDown,
  eraseLine: () => eraseLine,
  eraseLineEnd: () => eraseLineEnd,
  eraseLineStart: () => eraseLineStart,
  eraseLines: () => eraseLines,
  eraseScreen: () => eraseScreen,
  eraseUp: () => eraseUp,
  image: () => image,
  link: () => link,
  scrollDown: () => scrollDown,
  scrollUp: () => scrollUp
});

// https://deno.land/std@0.196.0/encoding/base64.ts
var base64abc = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "+",
  "/"
];
function encode(data) {
  const uint8 = typeof data === "string" ? new TextEncoder().encode(data) : data instanceof Uint8Array ? data : new Uint8Array(data);
  let result2 = "", i2;
  const l2 = uint8.length;
  for (i2 = 2; i2 < l2; i2 += 3) {
    result2 += base64abc[uint8[i2 - 2] >> 2];
    result2 += base64abc[(uint8[i2 - 2] & 3) << 4 | uint8[i2 - 1] >> 4];
    result2 += base64abc[(uint8[i2 - 1] & 15) << 2 | uint8[i2] >> 6];
    result2 += base64abc[uint8[i2] & 63];
  }
  if (i2 === l2 + 1) {
    result2 += base64abc[uint8[i2 - 2] >> 2];
    result2 += base64abc[(uint8[i2 - 2] & 3) << 4];
    result2 += "==";
  }
  if (i2 === l2) {
    result2 += base64abc[uint8[i2 - 2] >> 2];
    result2 += base64abc[(uint8[i2 - 2] & 3) << 4 | uint8[i2 - 1] >> 4];
    result2 += base64abc[(uint8[i2 - 1] & 15) << 2];
    result2 += "=";
  }
  return result2;
}

// subrepos/cliffy/ansi/ansi_escapes.ts
var ESC = "\x1B";
var CSI = `${ESC}[`;
var OSC = `${ESC}]`;
var SEP5 = ";";
var bel = "\x07";
var cursorPosition = `${CSI}6n`;
function cursorTo(x, y) {
  if (typeof y !== "number") {
    return `${CSI}${x}G`;
  }
  return `${CSI}${y};${x}H`;
}
function cursorMove(x, y) {
  let ret = "";
  if (x < 0) {
    ret += `${CSI}${-x}D`;
  } else if (x > 0) {
    ret += `${CSI}${x}C`;
  }
  if (y < 0) {
    ret += `${CSI}${-y}A`;
  } else if (y > 0) {
    ret += `${CSI}${y}B`;
  }
  return ret;
}
function cursorUp(count4 = 1) {
  return `${CSI}${count4}A`;
}
function cursorDown(count4 = 1) {
  return `${CSI}${count4}B`;
}
function cursorForward(count4 = 1) {
  return `${CSI}${count4}C`;
}
function cursorBackward(count4 = 1) {
  return `${CSI}${count4}D`;
}
function cursorNextLine(count4 = 1) {
  return `${CSI}E`.repeat(count4);
}
function cursorPrevLine(count4 = 1) {
  return `${CSI}F`.repeat(count4);
}
var cursorLeft = `${CSI}G`;
var cursorHide = `${CSI}?25l`;
var cursorShow = `${CSI}?25h`;
var cursorSave = `${ESC}7`;
var cursorRestore = `${ESC}8`;
function scrollUp(count4 = 1) {
  return `${CSI}S`.repeat(count4);
}
function scrollDown(count4 = 1) {
  return `${CSI}T`.repeat(count4);
}
var eraseScreen = `${CSI}2J`;
function eraseUp(count4 = 1) {
  return `${CSI}1J`.repeat(count4);
}
function eraseDown(count4 = 1) {
  return `${CSI}0J`.repeat(count4);
}
var eraseLine = `${CSI}2K`;
var eraseLineEnd = `${CSI}0K`;
var eraseLineStart = `${CSI}1K`;
function eraseLines(count4) {
  let clear = "";
  for (let i2 = 0; i2 < count4; i2++) {
    clear += eraseLine + (i2 < count4 - 1 ? cursorUp() : "");
  }
  clear += cursorLeft;
  return clear;
}
var clearScreen = "\x1Bc";
var clearTerminal = Deno.build.os === "windows" ? `${eraseScreen}${CSI}0f` : `${eraseScreen}${CSI}3J${CSI}H`;
function link(text, url) {
  return [
    OSC,
    "8",
    SEP5,
    SEP5,
    url,
    bel,
    text,
    OSC,
    "8",
    SEP5,
    SEP5,
    bel
  ].join("");
}
function image(buffer, options) {
  let ret = `${OSC}1337;File=inline=1`;
  if (options?.width) {
    ret += `;width=${options.width}`;
  }
  if (options?.height) {
    ret += `;height=${options.height}`;
  }
  if (options?.preserveAspectRatio === false) {
    ret += ";preserveAspectRatio=0";
  }
  return ret + ":" + encode(buffer) + bel;
}

// subrepos/cliffy/ansi/cursor_position.ts
var encoder = new TextEncoder();
var decoder2 = new TextDecoder();
function getCursorPosition({
  reader = Deno.stdin,
  writer = Deno.stdout
} = {}) {
  const data = new Uint8Array(8);
  reader.setRaw(true);
  writer.writeSync(encoder.encode(cursorPosition));
  reader.readSync(data);
  reader.setRaw(false);
  const [y, x] = decoder2.decode(data).match(/\[(\d+);(\d+)R/)?.slice(1, 3).map(Number) ?? [0, 0];
  return { x, y };
}

// subrepos/cliffy/ansi/tty.ts
var tty = factory();
var encoder2 = new TextEncoder();
function factory(options) {
  let result2 = "";
  let stack = [];
  const writer = options?.writer ?? Deno.stdout;
  const reader = options?.reader ?? Deno.stdin;
  const tty2 = function(...args) {
    if (this) {
      update(args);
      writer.writeSync(encoder2.encode(result2));
      return this;
    }
    return factory(args[0] ?? options);
  };
  tty2.text = function(text) {
    stack.push([text, []]);
    update();
    writer.writeSync(encoder2.encode(result2));
    return this;
  };
  tty2.getCursorPosition = () => getCursorPosition({ writer, reader });
  const methodList = Object.entries(
    ansi_escapes_exports
  );
  for (const [name, method] of methodList) {
    if (name === "cursorPosition") {
      continue;
    }
    Object.defineProperty(tty2, name, {
      get() {
        stack.push([method, []]);
        return this;
      }
    });
  }
  return tty2;
  function update(args) {
    if (!stack.length) {
      return;
    }
    if (args) {
      stack[stack.length - 1][1] = args;
    }
    result2 = stack.reduce(
      (prev, [cur, args2]) => prev + (typeof cur === "string" ? cur : cur.call(tty2, ...args2)),
      ""
    );
    stack = [];
  }
}

// subrepos/cliffy/keycode/_key_codes.ts
var KeyMap = {
  /* xterm/gnome ESC [ letter (with modifier) */
  "[P": "f1",
  "[Q": "f2",
  "[R": "f3",
  "[S": "f4",
  /* xterm/gnome ESC O letter (without modifier) */
  "OP": "f1",
  "OQ": "f2",
  "OR": "f3",
  "OS": "f4",
  /* xterm/rxvt ESC [ number ~ */
  "[11~": "f1",
  "[12~": "f2",
  "[13~": "f3",
  "[14~": "f4",
  /* from Cygwin and used in libuv */
  "[[A": "f1",
  "[[B": "f2",
  "[[C": "f3",
  "[[D": "f4",
  "[[E": "f5",
  /* common */
  "[15~": "f5",
  "[17~": "f6",
  "[18~": "f7",
  "[19~": "f8",
  "[20~": "f9",
  "[21~": "f10",
  "[23~": "f11",
  "[24~": "f12",
  /* xterm ESC [ letter */
  "[A": "up",
  "[B": "down",
  "[C": "right",
  "[D": "left",
  "[E": "clear",
  "[F": "end",
  "[H": "home",
  /* xterm/gnome ESC O letter */
  "OA": "up",
  "OB": "down",
  "OC": "right",
  "OD": "left",
  "OE": "clear",
  "OF": "end",
  "OH": "home",
  /* xterm/rxvt ESC [ number ~ */
  "[1~": "home",
  "[2~": "insert",
  "[3~": "delete",
  "[4~": "end",
  "[5~": "pageup",
  "[6~": "pagedown",
  /* putty */
  "[[5~": "pageup",
  "[[6~": "pagedown",
  /* rxvt */
  "[7~": "home",
  "[8~": "end"
};
var KeyMapShift = {
  /* rxvt keys with modifiers */
  "[a": "up",
  "[b": "down",
  "[c": "right",
  "[d": "left",
  "[e": "clear",
  "[2$": "insert",
  "[3$": "delete",
  "[5$": "pageup",
  "[6$": "pagedown",
  "[7$": "home",
  "[8$": "end",
  "[Z": "tab"
};
var KeyMapCtrl = {
  /* rxvt keys with modifiers */
  "Oa": "up",
  "Ob": "down",
  "Oc": "right",
  "Od": "left",
  "Oe": "clear",
  "[2^": "insert",
  "[3^": "delete",
  "[5^": "pageup",
  "[6^": "pagedown",
  "[7^": "home",
  "[8^": "end"
};
var SpecialKeyMap = {
  "\r": "return",
  "\n": "enter",
  "	": "tab",
  "\b": "backspace",
  "\x7F": "backspace",
  "\x1B": "escape",
  " ": "space"
};

// subrepos/cliffy/keycode/key_code.ts
var kUTF16SurrogateThreshold = 65536;
var kEscape = "\x1B";
function parse13(data) {
  let index = -1;
  const keys = [];
  const input = data instanceof Uint8Array ? new TextDecoder().decode(data) : data;
  const hasNext = () => input.length - 1 >= index + 1;
  const next = () => input[++index];
  parseNext();
  return keys;
  function parseNext() {
    let ch = next();
    let s = ch;
    let escaped = false;
    const key = {
      name: void 0,
      char: void 0,
      sequence: void 0,
      code: void 0,
      ctrl: false,
      meta: false,
      shift: false
    };
    if (ch === kEscape && hasNext()) {
      escaped = true;
      s += ch = next();
      if (ch === kEscape) {
        s += ch = next();
      }
    }
    if (escaped && (ch === "O" || ch === "[")) {
      let code2 = ch;
      let modifier = 0;
      if (ch === "O") {
        s += ch = next();
        if (ch >= "0" && ch <= "9") {
          modifier = (Number(ch) >> 0) - 1;
          s += ch = next();
        }
        code2 += ch;
      } else if (ch === "[") {
        s += ch = next();
        if (ch === "[") {
          code2 += ch;
          s += ch = next();
        }
        const cmdStart = s.length - 1;
        if (ch >= "0" && ch <= "9") {
          s += ch = next();
          if (ch >= "0" && ch <= "9") {
            s += ch = next();
          }
        }
        if (ch === ";") {
          s += ch = next();
          if (ch >= "0" && ch <= "9") {
            s += next();
          }
        }
        const cmd = s.slice(cmdStart);
        let match;
        if (match = cmd.match(/^(\d\d?)(;(\d))?([~^$])$/)) {
          code2 += match[1] + match[4];
          modifier = (Number(match[3]) || 1) - 1;
        } else if (match = cmd.match(/^((\d;)?(\d))?([A-Za-z])$/)) {
          code2 += match[4];
          modifier = (Number(match[3]) || 1) - 1;
        } else {
          code2 += cmd;
        }
      }
      key.ctrl = !!(modifier & 4);
      key.meta = !!(modifier & 10);
      key.shift = !!(modifier & 1);
      key.code = code2;
      if (code2 in KeyMap) {
        key.name = KeyMap[code2];
      } else if (code2 in KeyMapShift) {
        key.name = KeyMapShift[code2];
        key.shift = true;
      } else if (code2 in KeyMapCtrl) {
        key.name = KeyMapCtrl[code2];
        key.ctrl = true;
      } else {
        key.name = "undefined";
      }
    } else if (ch in SpecialKeyMap) {
      key.name = SpecialKeyMap[ch];
      key.meta = escaped;
      if (key.name === "space") {
        key.char = ch;
      }
    } else if (!escaped && ch <= "") {
      key.name = String.fromCharCode(
        ch.charCodeAt(0) + "a".charCodeAt(0) - 1
      );
      key.ctrl = true;
      key.char = key.name;
    } else if (/^[0-9A-Za-z]$/.test(ch)) {
      key.name = ch.toLowerCase();
      key.shift = /^[A-Z]$/.test(ch);
      key.meta = escaped;
      key.char = ch;
    } else if (escaped) {
      key.name = ch.length ? void 0 : "escape";
      key.meta = true;
    } else {
      key.name = ch;
      key.char = ch;
    }
    key.sequence = s;
    if (s.length !== 0 && (key.name !== void 0 || escaped) || charLengthAt(s, 0) === s.length) {
      keys.push(key);
    } else {
      throw new Error("Unrecognized or broken escape sequence");
    }
    if (hasNext()) {
      parseNext();
    }
  }
}
function charLengthAt(str2, i2) {
  const pos = str2.codePointAt(i2);
  if (typeof pos === "undefined") {
    return 1;
  }
  return pos >= kUTF16SurrogateThreshold ? 2 : 1;
}

// https://deno.land/std@0.196.0/_util/os.ts
var osType5 = (() => {
  const { Deno: Deno4 } = globalThis;
  if (typeof Deno4?.build?.os === "string") {
    return Deno4.build.os;
  }
  const { navigator } = globalThis;
  if (navigator?.appVersion?.includes?.("Win")) {
    return "windows";
  }
  return "linux";
})();
var isWindows6 = osType5 === "windows";

// https://deno.land/std@0.196.0/path/win32.ts
var win32_exports5 = {};
__export(win32_exports5, {
  basename: () => basename12,
  delimiter: () => delimiter12,
  dirname: () => dirname12,
  extname: () => extname12,
  format: () => format12,
  fromFileUrl: () => fromFileUrl12,
  isAbsolute: () => isAbsolute12,
  join: () => join16,
  normalize: () => normalize16,
  parse: () => parse14,
  relative: () => relative12,
  resolve: () => resolve12,
  sep: () => sep12,
  toFileUrl: () => toFileUrl12,
  toNamespacedPath: () => toNamespacedPath12
});

// https://deno.land/std@0.196.0/path/_constants.ts
var CHAR_UPPERCASE_A5 = 65;
var CHAR_LOWERCASE_A5 = 97;
var CHAR_UPPERCASE_Z5 = 90;
var CHAR_LOWERCASE_Z5 = 122;
var CHAR_DOT5 = 46;
var CHAR_FORWARD_SLASH5 = 47;
var CHAR_BACKWARD_SLASH5 = 92;
var CHAR_COLON5 = 58;
var CHAR_QUESTION_MARK5 = 63;

// https://deno.land/std@0.196.0/path/_util.ts
function assertPath5(path10) {
  if (typeof path10 !== "string") {
    throw new TypeError(
      `Path must be a string. Received ${JSON.stringify(path10)}`
    );
  }
}
function isPosixPathSeparator5(code2) {
  return code2 === CHAR_FORWARD_SLASH5;
}
function isPathSeparator5(code2) {
  return isPosixPathSeparator5(code2) || code2 === CHAR_BACKWARD_SLASH5;
}
function isWindowsDeviceRoot5(code2) {
  return code2 >= CHAR_LOWERCASE_A5 && code2 <= CHAR_LOWERCASE_Z5 || code2 >= CHAR_UPPERCASE_A5 && code2 <= CHAR_UPPERCASE_Z5;
}
function normalizeString5(path10, allowAboveRoot, separator, isPathSeparator6) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code2;
  for (let i2 = 0, len = path10.length; i2 <= len; ++i2) {
    if (i2 < len)
      code2 = path10.charCodeAt(i2);
    else if (isPathSeparator6(code2))
      break;
    else
      code2 = CHAR_FORWARD_SLASH5;
    if (isPathSeparator6(code2)) {
      if (lastSlash === i2 - 1 || dots === 1) {
      } else if (lastSlash !== i2 - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT5 || res.charCodeAt(res.length - 2) !== CHAR_DOT5) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf(separator);
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
            }
            lastSlash = i2;
            dots = 0;
            continue;
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i2;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += `${separator}..`;
          else
            res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += separator + path10.slice(lastSlash + 1, i2);
        else
          res = path10.slice(lastSlash + 1, i2);
        lastSegmentLength = i2 - lastSlash - 1;
      }
      lastSlash = i2;
      dots = 0;
    } else if (code2 === CHAR_DOT5 && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
function _format5(sep15, pathObject) {
  const dir = pathObject.dir || pathObject.root;
  const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
  if (!dir)
    return base;
  if (base === sep15)
    return dir;
  if (dir === pathObject.root)
    return dir + base;
  return dir + sep15 + base;
}
var WHITESPACE_ENCODINGS5 = {
  "	": "%09",
  "\n": "%0A",
  "\v": "%0B",
  "\f": "%0C",
  "\r": "%0D",
  " ": "%20"
};
function encodeWhitespace5(string2) {
  return string2.replaceAll(/[\s]/g, (c) => {
    return WHITESPACE_ENCODINGS5[c] ?? c;
  });
}
function lastPathSegment2(path10, isSep, start = 0) {
  let matchedNonSeparator = false;
  let end = path10.length;
  for (let i2 = path10.length - 1; i2 >= start; --i2) {
    if (isSep(path10.charCodeAt(i2))) {
      if (matchedNonSeparator) {
        start = i2 + 1;
        break;
      }
    } else if (!matchedNonSeparator) {
      matchedNonSeparator = true;
      end = i2 + 1;
    }
  }
  return path10.slice(start, end);
}
function stripTrailingSeparators2(segment, isSep) {
  if (segment.length <= 1) {
    return segment;
  }
  let end = segment.length;
  for (let i2 = segment.length - 1; i2 > 0; i2--) {
    if (isSep(segment.charCodeAt(i2))) {
      end = i2;
    } else {
      break;
    }
  }
  return segment.slice(0, end);
}
function stripSuffix2(name, suffix) {
  if (suffix.length >= name.length) {
    return name;
  }
  const lenDiff = name.length - suffix.length;
  for (let i2 = suffix.length - 1; i2 >= 0; --i2) {
    if (name.charCodeAt(lenDiff + i2) !== suffix.charCodeAt(i2)) {
      return name;
    }
  }
  return name.slice(0, -suffix.length);
}

// https://deno.land/std@0.196.0/path/win32.ts
var sep12 = "\\";
var delimiter12 = ";";
function resolve12(...pathSegments) {
  let resolvedDevice = "";
  let resolvedTail = "";
  let resolvedAbsolute = false;
  for (let i2 = pathSegments.length - 1; i2 >= -1; i2--) {
    let path10;
    const { Deno: Deno4 } = globalThis;
    if (i2 >= 0) {
      path10 = pathSegments[i2];
    } else if (!resolvedDevice) {
      if (typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a drive-letter-less path without a CWD.");
      }
      path10 = Deno4.cwd();
    } else {
      if (typeof Deno4?.env?.get !== "function" || typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path10 = Deno4.cwd();
      if (path10 === void 0 || path10.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
        path10 = `${resolvedDevice}\\`;
      }
    }
    assertPath5(path10);
    const len = path10.length;
    if (len === 0)
      continue;
    let rootEnd = 0;
    let device = "";
    let isAbsolute15 = false;
    const code2 = path10.charCodeAt(0);
    if (len > 1) {
      if (isPathSeparator5(code2)) {
        isAbsolute15 = true;
        if (isPathSeparator5(path10.charCodeAt(1))) {
          let j = 2;
          let last = j;
          for (; j < len; ++j) {
            if (isPathSeparator5(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            const firstPart = path10.slice(last, j);
            last = j;
            for (; j < len; ++j) {
              if (!isPathSeparator5(path10.charCodeAt(j)))
                break;
            }
            if (j < len && j !== last) {
              last = j;
              for (; j < len; ++j) {
                if (isPathSeparator5(path10.charCodeAt(j)))
                  break;
              }
              if (j === len) {
                device = `\\\\${firstPart}\\${path10.slice(last)}`;
                rootEnd = j;
              } else if (j !== last) {
                device = `\\\\${firstPart}\\${path10.slice(last, j)}`;
                rootEnd = j;
              }
            }
          }
        } else {
          rootEnd = 1;
        }
      } else if (isWindowsDeviceRoot5(code2)) {
        if (path10.charCodeAt(1) === CHAR_COLON5) {
          device = path10.slice(0, 2);
          rootEnd = 2;
          if (len > 2) {
            if (isPathSeparator5(path10.charCodeAt(2))) {
              isAbsolute15 = true;
              rootEnd = 3;
            }
          }
        }
      }
    } else if (isPathSeparator5(code2)) {
      rootEnd = 1;
      isAbsolute15 = true;
    }
    if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      continue;
    }
    if (resolvedDevice.length === 0 && device.length > 0) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = `${path10.slice(rootEnd)}\\${resolvedTail}`;
      resolvedAbsolute = isAbsolute15;
    }
    if (resolvedAbsolute && resolvedDevice.length > 0)
      break;
  }
  resolvedTail = normalizeString5(
    resolvedTail,
    !resolvedAbsolute,
    "\\",
    isPathSeparator5
  );
  return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize16(path10) {
  assertPath5(path10);
  const len = path10.length;
  if (len === 0)
    return ".";
  let rootEnd = 0;
  let device;
  let isAbsolute15 = false;
  const code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator5(code2)) {
      isAbsolute15 = true;
      if (isPathSeparator5(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator5(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          const firstPart = path10.slice(last, j);
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator5(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator5(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              return `\\\\${firstPart}\\${path10.slice(last)}\\`;
            } else if (j !== last) {
              device = `\\\\${firstPart}\\${path10.slice(last, j)}`;
              rootEnd = j;
            }
          }
        }
      } else {
        rootEnd = 1;
      }
    } else if (isWindowsDeviceRoot5(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON5) {
        device = path10.slice(0, 2);
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator5(path10.charCodeAt(2))) {
            isAbsolute15 = true;
            rootEnd = 3;
          }
        }
      }
    }
  } else if (isPathSeparator5(code2)) {
    return "\\";
  }
  let tail;
  if (rootEnd < len) {
    tail = normalizeString5(
      path10.slice(rootEnd),
      !isAbsolute15,
      "\\",
      isPathSeparator5
    );
  } else {
    tail = "";
  }
  if (tail.length === 0 && !isAbsolute15)
    tail = ".";
  if (tail.length > 0 && isPathSeparator5(path10.charCodeAt(len - 1))) {
    tail += "\\";
  }
  if (device === void 0) {
    if (isAbsolute15) {
      if (tail.length > 0)
        return `\\${tail}`;
      else
        return "\\";
    } else if (tail.length > 0) {
      return tail;
    } else {
      return "";
    }
  } else if (isAbsolute15) {
    if (tail.length > 0)
      return `${device}\\${tail}`;
    else
      return `${device}\\`;
  } else if (tail.length > 0) {
    return device + tail;
  } else {
    return device;
  }
}
function isAbsolute12(path10) {
  assertPath5(path10);
  const len = path10.length;
  if (len === 0)
    return false;
  const code2 = path10.charCodeAt(0);
  if (isPathSeparator5(code2)) {
    return true;
  } else if (isWindowsDeviceRoot5(code2)) {
    if (len > 2 && path10.charCodeAt(1) === CHAR_COLON5) {
      if (isPathSeparator5(path10.charCodeAt(2)))
        return true;
    }
  }
  return false;
}
function join16(...paths) {
  const pathsCount = paths.length;
  if (pathsCount === 0)
    return ".";
  let joined;
  let firstPart = null;
  for (let i2 = 0; i2 < pathsCount; ++i2) {
    const path10 = paths[i2];
    assertPath5(path10);
    if (path10.length > 0) {
      if (joined === void 0)
        joined = firstPart = path10;
      else
        joined += `\\${path10}`;
    }
  }
  if (joined === void 0)
    return ".";
  let needsReplace = true;
  let slashCount = 0;
  assert(firstPart != null);
  if (isPathSeparator5(firstPart.charCodeAt(0))) {
    ++slashCount;
    const firstLen = firstPart.length;
    if (firstLen > 1) {
      if (isPathSeparator5(firstPart.charCodeAt(1))) {
        ++slashCount;
        if (firstLen > 2) {
          if (isPathSeparator5(firstPart.charCodeAt(2)))
            ++slashCount;
          else {
            needsReplace = false;
          }
        }
      }
    }
  }
  if (needsReplace) {
    for (; slashCount < joined.length; ++slashCount) {
      if (!isPathSeparator5(joined.charCodeAt(slashCount)))
        break;
    }
    if (slashCount >= 2)
      joined = `\\${joined.slice(slashCount)}`;
  }
  return normalize16(joined);
}
function relative12(from, to) {
  assertPath5(from);
  assertPath5(to);
  if (from === to)
    return "";
  const fromOrig = resolve12(from);
  const toOrig = resolve12(to);
  if (fromOrig === toOrig)
    return "";
  from = fromOrig.toLowerCase();
  to = toOrig.toLowerCase();
  if (from === to)
    return "";
  let fromStart = 0;
  let fromEnd = from.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH5)
      break;
  }
  for (; fromEnd - 1 > fromStart; --fromEnd) {
    if (from.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH5)
      break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 0;
  let toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH5)
      break;
  }
  for (; toEnd - 1 > toStart; --toEnd) {
    if (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH5)
      break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i2 = 0;
  for (; i2 <= length; ++i2) {
    if (i2 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i2) === CHAR_BACKWARD_SLASH5) {
          return toOrig.slice(toStart + i2 + 1);
        } else if (i2 === 2) {
          return toOrig.slice(toStart + i2);
        }
      }
      if (fromLen > length) {
        if (from.charCodeAt(fromStart + i2) === CHAR_BACKWARD_SLASH5) {
          lastCommonSep = i2;
        } else if (i2 === 2) {
          lastCommonSep = 3;
        }
      }
      break;
    }
    const fromCode = from.charCodeAt(fromStart + i2);
    const toCode = to.charCodeAt(toStart + i2);
    if (fromCode !== toCode)
      break;
    else if (fromCode === CHAR_BACKWARD_SLASH5)
      lastCommonSep = i2;
  }
  if (i2 !== length && lastCommonSep === -1) {
    return toOrig;
  }
  let out = "";
  if (lastCommonSep === -1)
    lastCommonSep = 0;
  for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
    if (i2 === fromEnd || from.charCodeAt(i2) === CHAR_BACKWARD_SLASH5) {
      if (out.length === 0)
        out += "..";
      else
        out += "\\..";
    }
  }
  if (out.length > 0) {
    return out + toOrig.slice(toStart + lastCommonSep, toEnd);
  } else {
    toStart += lastCommonSep;
    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH5)
      ++toStart;
    return toOrig.slice(toStart, toEnd);
  }
}
function toNamespacedPath12(path10) {
  if (typeof path10 !== "string")
    return path10;
  if (path10.length === 0)
    return "";
  const resolvedPath = resolve12(path10);
  if (resolvedPath.length >= 3) {
    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH5) {
      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH5) {
        const code2 = resolvedPath.charCodeAt(2);
        if (code2 !== CHAR_QUESTION_MARK5 && code2 !== CHAR_DOT5) {
          return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
        }
      }
    } else if (isWindowsDeviceRoot5(resolvedPath.charCodeAt(0))) {
      if (resolvedPath.charCodeAt(1) === CHAR_COLON5 && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH5) {
        return `\\\\?\\${resolvedPath}`;
      }
    }
  }
  return path10;
}
function dirname12(path10) {
  assertPath5(path10);
  const len = path10.length;
  if (len === 0)
    return ".";
  let rootEnd = -1;
  let end = -1;
  let matchedSlash = true;
  let offset = 0;
  const code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator5(code2)) {
      rootEnd = offset = 1;
      if (isPathSeparator5(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator5(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator5(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator5(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              return path10;
            }
            if (j !== last) {
              rootEnd = offset = j + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot5(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON5) {
        rootEnd = offset = 2;
        if (len > 2) {
          if (isPathSeparator5(path10.charCodeAt(2)))
            rootEnd = offset = 3;
        }
      }
    }
  } else if (isPathSeparator5(code2)) {
    return path10;
  }
  for (let i2 = len - 1; i2 >= offset; --i2) {
    if (isPathSeparator5(path10.charCodeAt(i2))) {
      if (!matchedSlash) {
        end = i2;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1) {
    if (rootEnd === -1)
      return ".";
    else
      end = rootEnd;
  }
  return stripTrailingSeparators2(path10.slice(0, end), isPosixPathSeparator5);
}
function basename12(path10, suffix = "") {
  assertPath5(path10);
  if (path10.length === 0)
    return path10;
  if (typeof suffix !== "string") {
    throw new TypeError(
      `Suffix must be a string. Received ${JSON.stringify(suffix)}`
    );
  }
  let start = 0;
  if (path10.length >= 2) {
    const drive = path10.charCodeAt(0);
    if (isWindowsDeviceRoot5(drive)) {
      if (path10.charCodeAt(1) === CHAR_COLON5)
        start = 2;
    }
  }
  const lastSegment = lastPathSegment2(path10, isPathSeparator5, start);
  const strippedSegment = stripTrailingSeparators2(lastSegment, isPathSeparator5);
  return suffix ? stripSuffix2(strippedSegment, suffix) : strippedSegment;
}
function extname12(path10) {
  assertPath5(path10);
  let start = 0;
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  if (path10.length >= 2 && path10.charCodeAt(1) === CHAR_COLON5 && isWindowsDeviceRoot5(path10.charCodeAt(0))) {
    start = startPart = 2;
  }
  for (let i2 = path10.length - 1; i2 >= start; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (isPathSeparator5(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT5) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path10.slice(startDot, end);
}
function format12(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format5("\\", pathObject);
}
function parse14(path10) {
  assertPath5(path10);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  const len = path10.length;
  if (len === 0)
    return ret;
  let rootEnd = 0;
  let code2 = path10.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator5(code2)) {
      rootEnd = 1;
      if (isPathSeparator5(path10.charCodeAt(1))) {
        let j = 2;
        let last = j;
        for (; j < len; ++j) {
          if (isPathSeparator5(path10.charCodeAt(j)))
            break;
        }
        if (j < len && j !== last) {
          last = j;
          for (; j < len; ++j) {
            if (!isPathSeparator5(path10.charCodeAt(j)))
              break;
          }
          if (j < len && j !== last) {
            last = j;
            for (; j < len; ++j) {
              if (isPathSeparator5(path10.charCodeAt(j)))
                break;
            }
            if (j === len) {
              rootEnd = j;
            } else if (j !== last) {
              rootEnd = j + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot5(code2)) {
      if (path10.charCodeAt(1) === CHAR_COLON5) {
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator5(path10.charCodeAt(2))) {
            if (len === 3) {
              ret.root = ret.dir = path10;
              ret.base = "\\";
              return ret;
            }
            rootEnd = 3;
          }
        } else {
          ret.root = ret.dir = path10;
          return ret;
        }
      }
    }
  } else if (isPathSeparator5(code2)) {
    ret.root = ret.dir = path10;
    ret.base = "\\";
    return ret;
  }
  if (rootEnd > 0)
    ret.root = path10.slice(0, rootEnd);
  let startDot = -1;
  let startPart = rootEnd;
  let end = -1;
  let matchedSlash = true;
  let i2 = path10.length - 1;
  let preDotState = 0;
  for (; i2 >= rootEnd; --i2) {
    code2 = path10.charCodeAt(i2);
    if (isPathSeparator5(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT5) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      ret.base = ret.name = path10.slice(startPart, end);
    }
  } else {
    ret.name = path10.slice(startPart, startDot);
    ret.base = path10.slice(startPart, end);
    ret.ext = path10.slice(startDot, end);
  }
  ret.base = ret.base || "\\";
  if (startPart > 0 && startPart !== rootEnd) {
    ret.dir = path10.slice(0, startPart - 1);
  } else
    ret.dir = ret.root;
  return ret;
}
function fromFileUrl12(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  let path10 = decodeURIComponent(
    url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  ).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
  if (url.hostname != "") {
    path10 = `\\\\${url.hostname}${path10}`;
  }
  return path10;
}
function toFileUrl12(path10) {
  if (!isAbsolute12(path10)) {
    throw new TypeError("Must be an absolute path.");
  }
  const [, hostname, pathname] = path10.match(
    /^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/
  );
  const url = new URL("file:///");
  url.pathname = encodeWhitespace5(pathname.replace(/%/g, "%25"));
  if (hostname != null && hostname != "localhost") {
    url.hostname = hostname;
    if (!url.hostname) {
      throw new TypeError("Invalid hostname.");
    }
  }
  return url;
}

// https://deno.land/std@0.196.0/path/posix.ts
var posix_exports5 = {};
__export(posix_exports5, {
  basename: () => basename13,
  delimiter: () => delimiter13,
  dirname: () => dirname13,
  extname: () => extname13,
  format: () => format13,
  fromFileUrl: () => fromFileUrl13,
  isAbsolute: () => isAbsolute13,
  join: () => join17,
  normalize: () => normalize17,
  parse: () => parse15,
  relative: () => relative13,
  resolve: () => resolve13,
  sep: () => sep13,
  toFileUrl: () => toFileUrl13,
  toNamespacedPath: () => toNamespacedPath13
});
var sep13 = "/";
var delimiter13 = ":";
function resolve13(...pathSegments) {
  let resolvedPath = "";
  let resolvedAbsolute = false;
  for (let i2 = pathSegments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
    let path10;
    if (i2 >= 0)
      path10 = pathSegments[i2];
    else {
      const { Deno: Deno4 } = globalThis;
      if (typeof Deno4?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path10 = Deno4.cwd();
    }
    assertPath5(path10);
    if (path10.length === 0) {
      continue;
    }
    resolvedPath = `${path10}/${resolvedPath}`;
    resolvedAbsolute = isPosixPathSeparator5(path10.charCodeAt(0));
  }
  resolvedPath = normalizeString5(
    resolvedPath,
    !resolvedAbsolute,
    "/",
    isPosixPathSeparator5
  );
  if (resolvedAbsolute) {
    if (resolvedPath.length > 0)
      return `/${resolvedPath}`;
    else
      return "/";
  } else if (resolvedPath.length > 0)
    return resolvedPath;
  else
    return ".";
}
function normalize17(path10) {
  assertPath5(path10);
  if (path10.length === 0)
    return ".";
  const isAbsolute15 = isPosixPathSeparator5(path10.charCodeAt(0));
  const trailingSeparator = isPosixPathSeparator5(
    path10.charCodeAt(path10.length - 1)
  );
  path10 = normalizeString5(path10, !isAbsolute15, "/", isPosixPathSeparator5);
  if (path10.length === 0 && !isAbsolute15)
    path10 = ".";
  if (path10.length > 0 && trailingSeparator)
    path10 += "/";
  if (isAbsolute15)
    return `/${path10}`;
  return path10;
}
function isAbsolute13(path10) {
  assertPath5(path10);
  return path10.length > 0 && isPosixPathSeparator5(path10.charCodeAt(0));
}
function join17(...paths) {
  if (paths.length === 0)
    return ".";
  let joined;
  for (let i2 = 0, len = paths.length; i2 < len; ++i2) {
    const path10 = paths[i2];
    assertPath5(path10);
    if (path10.length > 0) {
      if (!joined)
        joined = path10;
      else
        joined += `/${path10}`;
    }
  }
  if (!joined)
    return ".";
  return normalize17(joined);
}
function relative13(from, to) {
  assertPath5(from);
  assertPath5(to);
  if (from === to)
    return "";
  from = resolve13(from);
  to = resolve13(to);
  if (from === to)
    return "";
  let fromStart = 1;
  const fromEnd = from.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (!isPosixPathSeparator5(from.charCodeAt(fromStart)))
      break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 1;
  const toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (!isPosixPathSeparator5(to.charCodeAt(toStart)))
      break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i2 = 0;
  for (; i2 <= length; ++i2) {
    if (i2 === length) {
      if (toLen > length) {
        if (isPosixPathSeparator5(to.charCodeAt(toStart + i2))) {
          return to.slice(toStart + i2 + 1);
        } else if (i2 === 0) {
          return to.slice(toStart + i2);
        }
      } else if (fromLen > length) {
        if (isPosixPathSeparator5(from.charCodeAt(fromStart + i2))) {
          lastCommonSep = i2;
        } else if (i2 === 0) {
          lastCommonSep = 0;
        }
      }
      break;
    }
    const fromCode = from.charCodeAt(fromStart + i2);
    const toCode = to.charCodeAt(toStart + i2);
    if (fromCode !== toCode)
      break;
    else if (isPosixPathSeparator5(fromCode))
      lastCommonSep = i2;
  }
  let out = "";
  for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2) {
    if (i2 === fromEnd || isPosixPathSeparator5(from.charCodeAt(i2))) {
      if (out.length === 0)
        out += "..";
      else
        out += "/..";
    }
  }
  if (out.length > 0)
    return out + to.slice(toStart + lastCommonSep);
  else {
    toStart += lastCommonSep;
    if (isPosixPathSeparator5(to.charCodeAt(toStart)))
      ++toStart;
    return to.slice(toStart);
  }
}
function toNamespacedPath13(path10) {
  return path10;
}
function dirname13(path10) {
  if (path10.length === 0)
    return ".";
  let end = -1;
  let matchedNonSeparator = false;
  for (let i2 = path10.length - 1; i2 >= 1; --i2) {
    if (isPosixPathSeparator5(path10.charCodeAt(i2))) {
      if (matchedNonSeparator) {
        end = i2;
        break;
      }
    } else {
      matchedNonSeparator = true;
    }
  }
  if (end === -1) {
    return isPosixPathSeparator5(path10.charCodeAt(0)) ? "/" : ".";
  }
  return stripTrailingSeparators2(
    path10.slice(0, end),
    isPosixPathSeparator5
  );
}
function basename13(path10, suffix = "") {
  assertPath5(path10);
  if (path10.length === 0)
    return path10;
  if (typeof suffix !== "string") {
    throw new TypeError(
      `Suffix must be a string. Received ${JSON.stringify(suffix)}`
    );
  }
  const lastSegment = lastPathSegment2(path10, isPosixPathSeparator5);
  const strippedSegment = stripTrailingSeparators2(
    lastSegment,
    isPosixPathSeparator5
  );
  return suffix ? stripSuffix2(strippedSegment, suffix) : strippedSegment;
}
function extname13(path10) {
  assertPath5(path10);
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  for (let i2 = path10.length - 1; i2 >= 0; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (isPosixPathSeparator5(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT5) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path10.slice(startDot, end);
}
function format13(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format5("/", pathObject);
}
function parse15(path10) {
  assertPath5(path10);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  if (path10.length === 0)
    return ret;
  const isAbsolute15 = isPosixPathSeparator5(path10.charCodeAt(0));
  let start;
  if (isAbsolute15) {
    ret.root = "/";
    start = 1;
  } else {
    start = 0;
  }
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let i2 = path10.length - 1;
  let preDotState = 0;
  for (; i2 >= start; --i2) {
    const code2 = path10.charCodeAt(i2);
    if (isPosixPathSeparator5(code2)) {
      if (!matchedSlash) {
        startPart = i2 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i2 + 1;
    }
    if (code2 === CHAR_DOT5) {
      if (startDot === -1)
        startDot = i2;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      if (startPart === 0 && isAbsolute15) {
        ret.base = ret.name = path10.slice(1, end);
      } else {
        ret.base = ret.name = path10.slice(startPart, end);
      }
    }
    ret.base = ret.base || "/";
  } else {
    if (startPart === 0 && isAbsolute15) {
      ret.name = path10.slice(1, startDot);
      ret.base = path10.slice(1, end);
    } else {
      ret.name = path10.slice(startPart, startDot);
      ret.base = path10.slice(startPart, end);
    }
    ret.ext = path10.slice(startDot, end);
  }
  if (startPart > 0) {
    ret.dir = stripTrailingSeparators2(
      path10.slice(0, startPart - 1),
      isPosixPathSeparator5
    );
  } else if (isAbsolute15)
    ret.dir = "/";
  return ret;
}
function fromFileUrl13(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  return decodeURIComponent(
    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  );
}
function toFileUrl13(path10) {
  if (!isAbsolute13(path10)) {
    throw new TypeError("Must be an absolute path.");
  }
  const url = new URL("file:///");
  url.pathname = encodeWhitespace5(
    path10.replace(/%/g, "%25").replace(/\\/g, "%5C")
  );
  return url;
}

// https://deno.land/std@0.196.0/path/glob.ts
var path8 = isWindows6 ? win32_exports5 : posix_exports5;
var { join: join18, normalize: normalize18 } = path8;

// https://deno.land/std@0.196.0/path/mod.ts
var path9 = isWindows6 ? win32_exports5 : posix_exports5;
var {
  basename: basename14,
  delimiter: delimiter14,
  dirname: dirname14,
  extname: extname14,
  format: format14,
  fromFileUrl: fromFileUrl14,
  isAbsolute: isAbsolute14,
  join: join19,
  normalize: normalize19,
  parse: parse16,
  relative: relative14,
  resolve: resolve14,
  toFileUrl: toFileUrl14,
  toNamespacedPath: toNamespacedPath14
} = path9;

// subrepos/cliffy/prompt/_figures.ts
var main = {
  ARROW_UP: "\u2191",
  ARROW_DOWN: "\u2193",
  ARROW_LEFT: "\u2190",
  ARROW_RIGHT: "\u2192",
  ARROW_UP_LEFT: "\u2196",
  ARROW_UP_RIGHT: "\u2197",
  ARROW_DOWN_RIGHT: "\u2198",
  ARROW_DOWN_LEFT: "\u2199",
  RADIO_ON: "\u25C9",
  RADIO_OFF: "\u25EF",
  TICK: "\u2714",
  CROSS: "\u2718",
  ELLIPSIS: "\u2026",
  POINTER_SMALL: "\u203A",
  POINTER_SMALL_LEFT: "\u2039",
  LINE: "\u2500",
  POINTER: "\u276F",
  POINTER_LEFT: "\u276E",
  INFO: "\u2139",
  TAB_LEFT: "\u21E4",
  TAB_RIGHT: "\u21E5",
  ESCAPE: "\u238B",
  BACKSPACE: "\u232B",
  PAGE_UP: "\u21DE",
  PAGE_DOWN: "\u21DF",
  ENTER: "\u21B5",
  SEARCH: "\u{1F50E}",
  FOLDER: "\u{1F4C1}",
  FOLDER_OPEN: "\u{1F4C2}"
};
var win = {
  ...main,
  RADIO_ON: "(*)",
  RADIO_OFF: "( )",
  TICK: "\u221A",
  CROSS: "\xD7",
  POINTER_SMALL: "\xBB"
};
var Figures = Deno.build.os === "windows" ? win : main;
var keyMap = {
  up: "ARROW_UP",
  down: "ARROW_DOWN",
  left: "ARROW_LEFT",
  right: "ARROW_RIGHT",
  pageup: "PAGE_UP",
  pagedown: "PAGE_DOWN",
  tab: "TAB_RIGHT",
  enter: "ENTER",
  return: "ENTER"
};
function getFiguresByKeys(keys) {
  const figures = [];
  for (const key of keys) {
    const figure = Figures[keyMap[key]] ?? key;
    if (!figures.includes(figure)) {
      figures.push(figure);
    }
  }
  return figures;
}

// subrepos/cliffy/prompt/_generic_prompt.ts
var GenericPrompt = class _GenericPrompt {
  static injectedValue;
  cursor = {
    x: 0,
    y: 0
  };
  #value;
  #lastError;
  #isFirstRun = true;
  #encoder = new TextEncoder();
  /**
   * Inject prompt value. If called, the prompt doesn't prompt for an input and
   * returns immediately the injected value. Can be used for unit tests or pre
   * selections.
   *
   * @param value Input value.
   */
  static inject(value) {
    _GenericPrompt.injectedValue = value;
  }
  getDefaultSettings(options) {
    return {
      ...options,
      tty: tty({
        // Stdin is only used by getCursorPosition which we don't need.
        reader: Deno.stdin,
        writer: options.writer ?? Deno.stdout
      }),
      cbreak: options.cbreak ?? false,
      reader: options.reader ?? Deno.stdin,
      writer: options.writer ?? Deno.stdout,
      pointer: options.pointer ?? brightBlue(Figures.POINTER_SMALL),
      prefix: options.prefix ?? yellow("? "),
      indent: options.indent ?? "",
      keys: {
        submit: ["enter", "return"],
        ...options.keys ?? {}
      }
    };
  }
  /** Execute the prompt. */
  async prompt() {
    try {
      return await this.#execute();
    } finally {
      this.settings.tty.cursorShow();
    }
  }
  /** Clear prompt output. */
  clear() {
    this.settings.tty.cursorLeft.eraseDown();
  }
  /** Execute the prompt. */
  #execute = async () => {
    if (typeof _GenericPrompt.injectedValue !== "undefined" && this.#lastError) {
      throw new Error(this.error());
    }
    await this.render();
    this.#lastError = void 0;
    if (!await this.read()) {
      return this.#execute();
    }
    if (typeof this.#value === "undefined") {
      throw new Error("internal error: failed to read value");
    }
    this.clear();
    const successMessage = this.success(this.#value);
    if (successMessage) {
      this.settings.writer.writeSync(
        this.#encoder.encode(successMessage + "\n")
      );
    }
    _GenericPrompt.injectedValue = void 0;
    this.settings.tty.cursorShow();
    return this.#value;
  };
  /** Render prompt. */
  async render() {
    const result2 = await Promise.all([
      this.message(),
      this.body?.(),
      this.footer()
    ]);
    const content = result2.filter(Boolean).join("\n");
    const lines = content.split("\n");
    const columns = getColumns();
    const linesCount = columns ? lines.reduce((prev, next) => {
      const length = stripColor(next).length;
      return prev + (length > columns ? Math.ceil(length / columns) : 1);
    }, 0) : content.split("\n").length;
    const y = linesCount - this.cursor.y - 1;
    if (!this.#isFirstRun || this.#lastError) {
      this.clear();
    }
    this.#isFirstRun = false;
    this.settings.writer.writeSync(this.#encoder.encode(content));
    if (y) {
      this.settings.tty.cursorUp(y);
    }
    this.settings.tty.cursorTo(this.cursor.x);
  }
  /** Read user input from stdin, handle events and validate user input. */
  async read() {
    if (typeof _GenericPrompt.injectedValue !== "undefined") {
      const value = _GenericPrompt.injectedValue;
      await this.#validateValue(value);
    } else {
      const events = await this.#readKey();
      if (!events.length) {
        return false;
      }
      for (const event of events) {
        await this.handleEvent(event);
      }
    }
    return typeof this.#value !== "undefined";
  }
  submit() {
    return this.#validateValue(this.getValue());
  }
  message() {
    return `${this.settings.indent}${this.settings.prefix}` + bold(this.settings.message) + this.defaults();
  }
  defaults() {
    let defaultMessage = "";
    if (typeof this.settings.default !== "undefined" && !this.settings.hideDefault) {
      defaultMessage += dim(` (${this.format(this.settings.default)})`);
    }
    return defaultMessage;
  }
  /** Get prompt success message. */
  success(value) {
    return `${this.settings.indent}${this.settings.prefix}` + bold(this.settings.message) + this.defaults() + " " + this.settings.pointer + " " + green(this.format(value));
  }
  footer() {
    return this.error() ?? this.hint();
  }
  error() {
    return this.#lastError ? this.settings.indent + red(bold(`${Figures.CROSS} `) + this.#lastError) : void 0;
  }
  hint() {
    return this.settings.hint ? this.settings.indent + italic(brightBlue(dim(`${Figures.POINTER} `) + this.settings.hint)) : void 0;
  }
  setErrorMessage(message) {
    this.#lastError = message;
  }
  /**
   * Handle user input event.
   * @param event Key event.
   */
  async handleEvent(event) {
    switch (true) {
      case (event.name === "c" && event.ctrl):
        this.clear();
        this.settings.tty.cursorShow();
        Deno.exit(130);
        return;
      case this.isKey(this.settings.keys, "submit", event):
        await this.submit();
        break;
    }
  }
  /** Read user input from stdin and pars ansi codes. */
  #readKey = async () => {
    const data = await this.#readChar();
    return data.length ? parse13(data) : [];
  };
  /** Read user input from stdin. */
  #readChar = async () => {
    const buffer = new Uint8Array(8);
    const isTty = Deno.isatty(this.settings.reader.rid);
    if (isTty) {
      this.settings.reader.setRaw(
        true,
        { cbreak: this.settings.cbreak }
      );
    }
    const nread = await this.settings.reader.read(buffer);
    if (isTty) {
      this.settings.reader.setRaw(false);
    }
    if (nread === null) {
      return buffer;
    }
    return buffer.subarray(0, nread);
  };
  /**
   * Map input value to output value. If a custom transform handler ist set, the
   * custom handler will be executed, otherwise the default transform handler
   * from the prompt will be executed.
   * @param value The value to transform.
   */
  #transformValue = (value) => {
    return this.settings.transform ? this.settings.transform(value) : this.transform(value);
  };
  /**
   * Validate input value. Set error message if validation fails and transform
   * output value on success.
   * If a default value is set, the default will be used as value without any
   * validation.
   * If a custom validation handler ist set, the custom handler will
   * be executed, otherwise a prompt specific default validation handler will be
   * executed.
   * @param value The value to validate.
   */
  #validateValue = async (value) => {
    if (!value && typeof this.settings.default !== "undefined") {
      this.#value = this.settings.default;
      return;
    }
    this.#value = void 0;
    this.#lastError = void 0;
    const validation = await (this.settings.validate ? this.settings.validate(value) : this.validate(value));
    if (validation === false) {
      this.#lastError = `Invalid answer.`;
    } else if (typeof validation === "string") {
      this.#lastError = validation;
    } else {
      this.#value = this.#transformValue(value);
    }
  };
  /**
   * Check if key event has given name or sequence.
   * @param keys  Key map.
   * @param name  Key name.
   * @param event Key event.
   */
  isKey(keys, name, event) {
    const keyNames = keys?.[name];
    return typeof keyNames !== "undefined" && (typeof event.name !== "undefined" && keyNames.indexOf(event.name) !== -1 || typeof event.sequence !== "undefined" && keyNames.indexOf(event.sequence) !== -1);
  }
};
function getColumns() {
  try {
    return Deno.consoleSize().columns ?? null;
  } catch (_error) {
    return null;
  }
}

// subrepos/cliffy/prompt/_generic_input.ts
var GenericInput = class extends GenericPrompt {
  inputValue = "";
  inputIndex = 0;
  getDefaultSettings(options) {
    const settings = super.getDefaultSettings(options);
    return {
      ...settings,
      keys: {
        moveCursorLeft: ["left"],
        moveCursorRight: ["right"],
        deleteCharLeft: ["backspace"],
        deleteCharRight: ["delete"],
        ...settings.keys ?? {}
      }
    };
  }
  getCurrentInputValue() {
    return this.inputValue;
  }
  message() {
    const message = super.message() + " " + this.settings.pointer + " ";
    this.cursor.x = stripColor(message).length + this.inputIndex + 1;
    return message + this.input();
  }
  input() {
    return underline(this.inputValue);
  }
  highlight(value, color1 = dim, color2 = brightBlue) {
    value = value.toString();
    const inputLowerCase = this.getCurrentInputValue().toLowerCase();
    const valueLowerCase = value.toLowerCase();
    const index = valueLowerCase.indexOf(inputLowerCase);
    const matched = value.slice(index, index + inputLowerCase.length);
    return index >= 0 ? color1(value.slice(0, index)) + color2(matched) + color1(value.slice(index + inputLowerCase.length)) : value;
  }
  /**
   * Handle user input event.
   * @param event Key event.
   */
  async handleEvent(event) {
    switch (true) {
      case this.isKey(this.settings.keys, "moveCursorLeft", event):
        this.moveCursorLeft();
        break;
      case this.isKey(this.settings.keys, "moveCursorRight", event):
        this.moveCursorRight();
        break;
      case this.isKey(this.settings.keys, "deleteCharRight", event):
        this.deleteCharRight();
        break;
      case this.isKey(this.settings.keys, "deleteCharLeft", event):
        this.deleteChar();
        break;
      case (event.char && !event.meta && !event.ctrl):
        this.addChar(event.char);
        break;
      default:
        await super.handleEvent(event);
    }
  }
  /** Add character to current input. */
  addChar(char) {
    this.inputValue = this.inputValue.slice(0, this.inputIndex) + char + this.inputValue.slice(this.inputIndex);
    this.inputIndex++;
  }
  /** Move prompt cursor left. */
  moveCursorLeft() {
    if (this.inputIndex > 0) {
      this.inputIndex--;
    }
  }
  /** Move prompt cursor right. */
  moveCursorRight() {
    if (this.inputIndex < this.inputValue.length) {
      this.inputIndex++;
    }
  }
  /** Delete char left. */
  deleteChar() {
    if (this.inputIndex > 0) {
      this.inputIndex--;
      this.deleteCharRight();
    }
  }
  /** Delete char right. */
  deleteCharRight() {
    if (this.inputIndex < this.inputValue.length) {
      this.inputValue = this.inputValue.slice(0, this.inputIndex) + this.inputValue.slice(this.inputIndex + 1);
    }
  }
};

// subrepos/cliffy/_utils/distance.ts
function distance2(a, b) {
  let aFlakeIndex = a.indexOf("\u2744\uFE0F");
  if (aFlakeIndex != -1) {
    a = a.slice(0, aFlakeIndex - 1);
  }
  let bFlakeIndex = b.indexOf("\u2744\uFE0F");
  if (bFlakeIndex != -1) {
    b = b.slice(0, bFlakeIndex - 1);
  }
  if (a.length == 0) {
    return b.length;
  }
  if (b.length == 0) {
    return a.length;
  }
  const matrix = [];
  for (let i2 = 0; i2 <= b.length; i2++) {
    matrix[i2] = [i2];
  }
  for (let j = 0; j <= a.length; j++) {
    matrix[0][j] = j;
  }
  for (let i2 = 1; i2 <= b.length; i2++) {
    for (let j = 1; j <= a.length; j++) {
      if (b.charAt(i2 - 1) == a.charAt(j - 1)) {
        matrix[i2][j] = matrix[i2 - 1][j - 1];
      } else {
        matrix[i2][j] = Math.min(
          matrix[i2 - 1][j - 1] + 1,
          Math.min(matrix[i2][j - 1] + 1, matrix[i2 - 1][j] + 1)
        );
      }
    }
  }
  return matrix[b.length][a.length];
}

// subrepos/cliffy/prompt/_generic_suggestions.ts
var sep14 = Deno.build.os === "windows" ? "\\" : "/";
var GenericSuggestions = class extends GenericInput {
  suggestionsIndex = -1;
  suggestionsOffset = 0;
  suggestions = [];
  suggestionDescriptions = [];
  #hasReadPermissions;
  getDefaultSettings(options) {
    const settings = super.getDefaultSettings(options);
    return {
      completeOnSubmit: false,
      ...settings,
      listPointer: options.listPointer ?? brightBlue(Figures.POINTER),
      maxRows: options.maxRows ?? 8,
      keys: {
        submit: ["enter", "return"],
        complete: ["tab"],
        next: ["up"],
        previous: ["down"],
        nextPage: ["pageup"],
        previousPage: ["pagedown"],
        ...settings.keys ?? {}
      }
    };
  }
  get localStorage() {
    if (this.settings.id && "localStorage" in window) {
      try {
        return window.localStorage;
      } catch (_) {
      }
    }
    return null;
  }
  loadSuggestions() {
    if (this.settings.id) {
      const json2 = this.localStorage?.getItem(this.settings.id);
      const suggestions = json2 ? JSON.parse(json2) : [];
      if (!Array.isArray(suggestions)) {
        return [];
      }
      return suggestions;
    }
    return [];
  }
  saveSuggestions(...suggestions) {
    if (this.settings.id) {
      this.localStorage?.setItem(
        this.settings.id,
        JSON.stringify([
          ...suggestions,
          ...this.loadSuggestions()
        ].filter(uniqueSuggestions))
      );
    }
  }
  async render() {
    if (this.settings.files && this.#hasReadPermissions === void 0) {
      const status = await Deno.permissions.request({ name: "read" });
      this.#hasReadPermissions = status.state === "granted";
    }
    await this.match();
    return super.render();
  }
  async match() {
    this.suggestions = await this.getSuggestions();
    this.suggestionsIndex = Math.max(
      this.getCurrentInputValue().trim().length === 0 ? -1 : 0,
      Math.min(this.suggestions.length - 1, this.suggestionsIndex)
    );
    this.suggestionsOffset = Math.max(
      0,
      Math.min(
        this.suggestions.length - this.getListHeight(),
        this.suggestionsOffset
      )
    );
  }
  input() {
    return super.input() + dim(this.getSuggestion());
  }
  getSuggestion() {
    return this.suggestions[this.suggestionsIndex]?.toString().substr(
      this.getCurrentInputValue().length
    ) ?? "";
  }
  async getUserSuggestions(input) {
    return typeof this.settings.suggestions === "function" ? await this.settings.suggestions(input) : this.settings.suggestions ?? [];
  }
  #isFileModeEnabled() {
    return !!this.settings.files && this.#hasReadPermissions === true;
  }
  async getFileSuggestions(input) {
    if (!this.#isFileModeEnabled()) {
      return [];
    }
    const path10 = await Deno.stat(input).then((file) => file.isDirectory ? input : dirname14(input)).catch(() => dirname14(input));
    return await listDir(path10, this.settings.files);
  }
  async getSuggestions() {
    const input = this.getCurrentInputValue();
    const suggestions = [
      ...this.loadSuggestions(),
      ...await this.getUserSuggestions(input),
      ...await this.getFileSuggestions(input)
    ].filter(uniqueSuggestions);
    if (!input.length) {
      return suggestions;
    }
    return suggestions.filter(
      (value) => stripColor(value.toString()).toLowerCase().startsWith(input.toLowerCase())
    ).sort(
      (a, b) => distance2((a || a).toString(), input) - distance2((b || b).toString(), input)
    );
  }
  body() {
    return this.getList() + this.getInfo();
  }
  getInfo() {
    if (!this.settings.info) {
      return "";
    }
    const selected = this.suggestionsIndex + 1;
    const matched = this.suggestions.length;
    const actions = [];
    if (this.suggestions.length) {
      if (this.settings.list) {
        actions.push(
          ["Next", getFiguresByKeys(this.settings.keys?.next ?? [])],
          ["Previous", getFiguresByKeys(this.settings.keys?.previous ?? [])],
          ["Next Page", getFiguresByKeys(this.settings.keys?.nextPage ?? [])],
          [
            "Previous Page",
            getFiguresByKeys(this.settings.keys?.previousPage ?? [])
          ]
        );
      } else {
        actions.push(
          ["Next", getFiguresByKeys(this.settings.keys?.next ?? [])],
          ["Previous", getFiguresByKeys(this.settings.keys?.previous ?? [])]
        );
      }
      actions.push(
        ["Complete", getFiguresByKeys(this.settings.keys?.complete ?? [])]
      );
    }
    actions.push(
      ["Submit", getFiguresByKeys(this.settings.keys?.submit ?? [])]
    );
    let info = this.settings.indent;
    if (this.suggestions.length) {
      info += brightBlue(Figures.INFO) + bold(` ${selected}/${matched} `);
    }
    info += actions.map((cur) => `${cur[0]}: ${bold(cur[1].join(" "))}`).join(", ");
    return info;
  }
  getList() {
    if (!this.suggestions.length || !this.settings.list) {
      return "";
    }
    const suggestionToDescription = Object.fromEntries(zip2(this.settings.suggestions || [], this.settings.suggestionDescriptions || []));
    const list = [];
    const height = this.getListHeight();
    for (let i2 = this.suggestionsOffset; i2 < this.suggestionsOffset + height; i2++) {
      list.push(
        this.getListItem(
          `${this.suggestions[i2]}`.replace(/❄️(.+)/, reset(cyan("\u2744\uFE0F")) + dim(green("$1"))),
          this.suggestionsIndex === i2,
          suggestionToDescription[this.suggestions[i2]]
        )
      );
    }
    if (list.length && this.settings.info) {
      list.push("");
    }
    return list.join("\n");
  }
  /**
   * Render option.
   * @param value        Option.
   * @param isSelected  Set to true if option is selected.
   */
  getListItem(value, isSelected, description) {
    let line = this.settings.indent ?? "";
    line += isSelected ? `${this.settings.listPointer} ` : "  ";
    if (isSelected) {
      line += underline(this.highlight(value));
    } else {
      line += this.highlight(value);
    }
    if (description) {
      line += dim(`${description}`);
    }
    return line;
  }
  /** Get suggestions row height. */
  getListHeight(suggestions = this.suggestions) {
    return Math.min(
      suggestions.length,
      this.settings.maxRows || suggestions.length
    );
  }
  /**
   * Handle user input event.
   * @param event Key event.
   */
  async handleEvent(event) {
    switch (true) {
      case this.isKey(this.settings.keys, "next", event):
        if (this.settings.list) {
          this.selectPreviousSuggestion();
        } else {
          this.selectNextSuggestion();
        }
        break;
      case this.isKey(this.settings.keys, "previous", event):
        if (this.settings.list) {
          this.selectNextSuggestion();
        } else {
          this.selectPreviousSuggestion();
        }
        break;
      case this.isKey(this.settings.keys, "nextPage", event):
        if (this.settings.list) {
          this.selectPreviousSuggestionsPage();
        } else {
          this.selectNextSuggestionsPage();
        }
        break;
      case this.isKey(this.settings.keys, "previousPage", event):
        if (this.settings.list) {
          this.selectNextSuggestionsPage();
        } else {
          this.selectPreviousSuggestionsPage();
        }
        break;
      case this.isKey(this.settings.keys, "complete", event):
        await this.#completeValue();
        break;
      case this.isKey(this.settings.keys, "moveCursorRight", event):
        if (this.inputIndex < this.inputValue.length) {
          this.moveCursorRight();
        } else {
          await this.#completeValue();
        }
        break;
      case this.isKey(this.settings.keys, "submit", event):
        if (this.settings.completeOnSubmit || this.getCurrentInputValue().trim().length == 0 && this.suggestionsIndex != -1) {
          await this.#completeValue();
        }
        await this.submit();
        break;
      default:
        await super.handleEvent(event);
    }
  }
  /** Delete char right. */
  deleteCharRight() {
    if (this.inputIndex < this.inputValue.length) {
      super.deleteCharRight();
      if (!this.getCurrentInputValue().length) {
        this.suggestionsIndex = -1;
        this.suggestionsOffset = 0;
      }
    }
  }
  async #completeValue() {
    this.inputValue = await this.complete();
    this.inputIndex = this.inputValue.length;
    this.suggestionsIndex = 0;
    this.suggestionsOffset = 0;
  }
  async complete() {
    let input = this.getCurrentInputValue();
    const suggestion = this.suggestions[this.suggestionsIndex]?.toString();
    if (this.settings.complete) {
      input = await this.settings.complete(input, suggestion);
    } else if (this.#isFileModeEnabled() && input.at(-1) !== sep14 && await isDirectory(input) && (this.getCurrentInputValue().at(-1) !== "." || this.getCurrentInputValue().endsWith(".."))) {
      input += sep14;
    } else if (suggestion) {
      input = suggestion;
    }
    return this.#isFileModeEnabled() ? normalize19(input) : input;
  }
  /** Select previous suggestion. */
  selectPreviousSuggestion() {
    if (this.suggestions.length) {
      if (this.suggestionsIndex > -1) {
        this.suggestionsIndex--;
        if (this.suggestionsIndex < this.suggestionsOffset) {
          this.suggestionsOffset--;
        }
      }
    }
  }
  /** Select next suggestion. */
  selectNextSuggestion() {
    if (this.suggestions.length) {
      if (this.suggestionsIndex < this.suggestions.length - 1) {
        this.suggestionsIndex++;
        if (this.suggestionsIndex >= this.suggestionsOffset + this.getListHeight()) {
          this.suggestionsOffset++;
        }
      }
    }
  }
  /** Select previous suggestions page. */
  selectPreviousSuggestionsPage() {
    if (this.suggestions.length) {
      const height = this.getListHeight();
      if (this.suggestionsOffset >= height) {
        this.suggestionsIndex -= height;
        this.suggestionsOffset -= height;
      } else if (this.suggestionsOffset > 0) {
        this.suggestionsIndex -= this.suggestionsOffset;
        this.suggestionsOffset = 0;
      }
    }
  }
  /** Select next suggestions page. */
  selectNextSuggestionsPage() {
    if (this.suggestions.length) {
      const height = this.getListHeight();
      if (this.suggestionsOffset + height + height < this.suggestions.length) {
        this.suggestionsIndex += height;
        this.suggestionsOffset += height;
      } else if (this.suggestionsOffset + height < this.suggestions.length) {
        const offset = this.suggestions.length - height;
        this.suggestionsIndex += offset - this.suggestionsOffset;
        this.suggestionsOffset = offset;
      }
    }
  }
};
function uniqueSuggestions(value, index, self) {
  return typeof value !== "undefined" && value !== "" && self.indexOf(value) === index;
}
function isDirectory(path10) {
  return Deno.stat(path10).then((file) => file.isDirectory).catch(() => false);
}
async function listDir(path10, mode) {
  const fileNames = [];
  for await (const file of Deno.readDir(path10 || ".")) {
    if (mode === true && (file.name.startsWith(".") || file.name.endsWith("~"))) {
      continue;
    }
    const filePath = join19(path10, file.name);
    if (mode instanceof RegExp && !mode.test(filePath)) {
      continue;
    }
    fileNames.push(filePath);
  }
  return fileNames.sort(function(a, b) {
    return a.toLowerCase().localeCompare(b.toLowerCase());
  });
}

// subrepos/cliffy/prompt/input.ts
var Input = class extends GenericSuggestions {
  settings;
  /** Execute the prompt with provided options. */
  static prompt(options) {
    return new this(options).prompt();
  }
  /**
   * Inject prompt value. If called, the prompt doesn't prompt for an input and
   * returns immediately the injected value. Can be used for unit tests or pre
   * selections.
   *
   * @param value Input value.
   */
  static inject(value) {
    GenericPrompt.inject(value);
  }
  constructor(options) {
    super();
    if (typeof options === "string") {
      options = { message: options };
    }
    this.settings = this.getDefaultSettings(options);
  }
  getDefaultSettings(options) {
    return {
      ...super.getDefaultSettings(options),
      minLength: options.minLength ?? 0,
      maxLength: options.maxLength ?? Infinity
    };
  }
  success(value) {
    this.saveSuggestions(value);
    return super.success(value);
  }
  /** Get input value. */
  getValue() {
    return this.settings.files ? normalize19(this.inputValue) : this.inputValue;
  }
  /**
   * Validate input value.
   * @param value User input value.
   * @return True on success, false or error message on error.
   */
  validate(value) {
    if (typeof value !== "string") {
      return false;
    }
    if (value.length < this.settings.minLength) {
      return `Value must be longer than ${this.settings.minLength} but has a length of ${value.length}.`;
    }
    if (value.length > this.settings.maxLength) {
      return `Value can't be longer than ${this.settings.maxLength} but has a length of ${value.length}.`;
    }
    return true;
  }
  /**
   * Map input value to output value.
   * @param value Input value.
   * @return Output value.
   */
  transform(value) {
    return value.trim();
  }
  /**
   * Format output value.
   * @param value Output value.
   */
  format(value) {
    return value;
  }
};

// tools/input_tools.js
function selectOne({ message, showList, showInfo, options, optionDescriptions, autocompleteOnSubmit = true }) {
  let optionStrings;
  if (options instanceof Array) {
    optionStrings = options;
    options = Object.fromEntries(optionStrings.map((each2) => [each2, each2]));
  } else {
    optionStrings = Object.keys(options);
  }
  const { rows, columns } = Deno.consoleSize();
  const maxOptionWidth = columns - 3;
  const longest2 = Math.max(...optionStrings.map((each2) => each2.length));
  const operations = {};
  const suggestions = optionStrings;
  const suggestionDescriptions = [];
  if (optionDescriptions) {
    for (let [suggestion, description] of zip2(suggestions, optionDescriptions)) {
      let offset = 2;
      if (suggestion.indexOf("\u2744\uFE0F") != -1) {
        offset = 3;
      }
      suggestionDescriptions.push(
        stripColor(suggestion.padEnd(longest2 + offset, " ") + ": " + description).slice(0, maxOptionWidth).slice(suggestion.length + 2)
      );
    }
  }
  return Input.prompt({
    message,
    list: showList,
    info: showInfo,
    suggestions,
    suggestionDescriptions,
    completeOnSubmit: autocompleteOnSubmit
  }).then((answer) => {
    if (!autocompleteOnSubmit) {
      return answer;
    }
    if (optionStrings.includes(answer)) {
      return options[answer];
    } else {
      optionStrings = optionStrings.filter(
        (value) => stripColor(value.toString()).toLowerCase().startsWith(answer)
      ).sort(
        (a, b) => distance2((a || a).toString(), answer) - distance2((b || b).toString(), answer)
      );
      return options[optionStrings[0]];
    }
  });
}

// https://deno.land/x/deno_dom@v0.1.43/build/deno-wasm/deno-wasm.js
var wasm;
var WASM_VECTOR_LEN = 0;
var cachegetUint8Memory0 = null;
function getUint8Memory0() {
  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
  }
  return cachegetUint8Memory0;
}
var cachedTextEncoder = new TextEncoder("utf-8");
var encodeString = typeof cachedTextEncoder.encodeInto === "function" ? function(arg, view) {
  return cachedTextEncoder.encodeInto(arg, view);
} : function(arg, view) {
  const buf = cachedTextEncoder.encode(arg);
  view.set(buf);
  return {
    read: arg.length,
    written: buf.length
  };
};
function passStringToWasm0(arg, malloc, realloc) {
  if (realloc === void 0) {
    const buf = cachedTextEncoder.encode(arg);
    const ptr2 = malloc(buf.length);
    getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);
    WASM_VECTOR_LEN = buf.length;
    return ptr2;
  }
  let len = arg.length;
  let ptr = malloc(len);
  const mem = getUint8Memory0();
  let offset = 0;
  for (; offset < len; offset++) {
    const code2 = arg.charCodeAt(offset);
    if (code2 > 127)
      break;
    mem[ptr + offset] = code2;
  }
  if (offset !== len) {
    if (offset !== 0) {
      arg = arg.slice(offset);
    }
    ptr = realloc(ptr, len, len = offset + arg.length * 3);
    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
    const ret = encodeString(arg, view);
    offset += ret.written;
  }
  WASM_VECTOR_LEN = offset;
  return ptr;
}
var cachegetInt32Memory0 = null;
function getInt32Memory0() {
  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
  }
  return cachegetInt32Memory0;
}
var cachedTextDecoder = new TextDecoder("utf-8", {
  ignoreBOM: true,
  fatal: true
});
cachedTextDecoder.decode();
function getStringFromWasm0(ptr, len) {
  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}
function parse17(html) {
  try {
    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
    var ptr0 = passStringToWasm0(
      html,
      wasm.__wbindgen_malloc,
      wasm.__wbindgen_realloc
    );
    var len0 = WASM_VECTOR_LEN;
    wasm.parse(retptr, ptr0, len0);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    return getStringFromWasm0(r0, r1);
  } finally {
    wasm.__wbindgen_add_to_stack_pointer(16);
    wasm.__wbindgen_free(r0, r1);
  }
}
function parse_frag(html, context_local_name) {
  try {
    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
    var ptr0 = passStringToWasm0(
      html,
      wasm.__wbindgen_malloc,
      wasm.__wbindgen_realloc
    );
    var len0 = WASM_VECTOR_LEN;
    var ptr1 = passStringToWasm0(
      context_local_name,
      wasm.__wbindgen_malloc,
      wasm.__wbindgen_realloc
    );
    var len1 = WASM_VECTOR_LEN;
    wasm.parse_frag(retptr, ptr0, len0, ptr1, len1);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    return getStringFromWasm0(r0, r1);
  } finally {
    wasm.__wbindgen_add_to_stack_pointer(16);
    wasm.__wbindgen_free(r0, r1);
  }
}
async function load2(module2, imports) {
  if (typeof Response === "function" && module2 instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming === "function") {
      try {
        return await WebAssembly.instantiateStreaming(module2, imports);
      } catch (e) {
        if (module2.headers.get("Content-Type") != "application/wasm") {
          console.warn(
            "`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",
            e
          );
        } else {
          throw e;
        }
      }
    }
    const bytes = await module2.arrayBuffer();
    return await WebAssembly.instantiate(bytes, imports);
  } else {
    const instance = await WebAssembly.instantiate(module2, imports);
    if (instance instanceof WebAssembly.Instance) {
      return { instance, module: module2 };
    } else {
      return instance;
    }
  }
}
async function init(input) {
  if (typeof input === "undefined") {
    input = new URL("deno-wasm_bg.wasm", import.meta.url);
  }
  const imports = {};
  imports.env = { now() {
  } };
  input = Uint8Array.from(
    atob(
      ""
    ),
    (c) => c.charCodeAt(0)
  );
  const { instance, module: module2 } = await load2(input, imports);
  wasm = instance.exports;
  init.__wbindgen_wasm_module = module2;
  return wasm;
}
var deno_wasm_default = init;

// https://deno.land/x/deno_dom@v0.1.43/src/parser.ts
var parse18 = (_html) => {
  console.error("Error: deno-dom: No parser registered");
  Deno.exit(1);
};
var parseFrag = (_html, _contextLocalName) => {
  console.error("Error: deno-dom: No parser registered");
  Deno.exit(1);
};
var originalParse = parse18;
function register(func2, fragFunc) {
  if (parse18 !== originalParse) {
    return;
  }
  parse18 = func2;
  parseFrag = fragFunc;
}

// https://deno.land/x/deno_dom@v0.1.43/src/constructor-lock.ts
var CTOR_KEY = Symbol();

// https://deno.land/x/deno_dom@v0.1.43/src/dom/html-collection.ts
var HTMLCollectionFakeClass = (() => {
  return class HTMLCollection {
    constructor() {
      throw new TypeError("Illegal constructor");
    }
    static [Symbol.hasInstance](value) {
      return value.constructor === HTMLCollectionClass;
    }
  };
})();
var HTMLCollectionMutatorSym = Symbol();
var HTMLCollectionClass = (() => {
  class HTMLCollection2 extends Array {
    // @ts-ignore
    forEach(cb, thisArg = void 0) {
      super.forEach(cb, thisArg);
    }
    item(index) {
      return this[index] ?? null;
    }
    [HTMLCollectionMutatorSym]() {
      return {
        push: Array.prototype.push.bind(this),
        splice: Array.prototype.splice.bind(this),
        indexOf: Array.prototype.indexOf.bind(this)
      };
    }
    toString() {
      return "[object HTMLCollection]";
    }
  }
  return HTMLCollection2;
})();
for (const staticMethod of [
  "from",
  "isArray",
  "of"
]) {
  HTMLCollectionClass[staticMethod] = void 0;
}
for (const instanceMethod of [
  "concat",
  "copyWithin",
  "every",
  "fill",
  "filter",
  "find",
  "findIndex",
  "flat",
  "flatMap",
  "includes",
  "indexOf",
  "join",
  "lastIndexOf",
  "map",
  "pop",
  "push",
  "reduce",
  "reduceRight",
  "reverse",
  "shift",
  "slice",
  "some",
  "sort",
  "splice",
  "toLocaleString",
  "unshift",
  // Unlike NodeList, HTMLCollection also doesn't implement these
  "entries",
  "forEach",
  "keys",
  "values"
]) {
  HTMLCollectionClass.prototype[instanceMethod] = void 0;
}
var HTMLCollection = HTMLCollectionClass;

// https://deno.land/x/deno_dom@v0.1.43/src/dom/node-list.ts
var NodeListFakeClass = (() => {
  return class NodeList {
    constructor() {
      throw new TypeError("Illegal constructor");
    }
    static [Symbol.hasInstance](value) {
      return value.constructor === NodeListClass;
    }
  };
})();
var nodeListMutatorSym = Symbol();
var nodeListCachedMutator = Symbol();
var { push, splice, slice, indexOf, filter } = Array.prototype;
var NodeListMutatorImpl = class {
  constructor(arrayInstance) {
    this.arrayInstance = arrayInstance;
  }
  // There should only ever be one elementView per element. Element views
  // are basically just the source of HTMLCollections/.children properties
  // on elements that are always in sync with their .childNodes counterpart.
  elementViews = [];
  push(...items) {
    for (const view of this.elementViews) {
      for (const item of items) {
        if (item.nodeType === Node.ELEMENT_NODE) {
          push.call(view, item);
        }
      }
    }
    return push.call(this.arrayInstance, ...items);
  }
  splice(index, deleteCount = 0, ...items) {
    for (const view of this.elementViews) {
      const toDelete = filter.call(
        slice.call(this.arrayInstance, index, index + deleteCount),
        (item) => item.nodeType === Node.ELEMENT_NODE
      );
      const toInsert = items.filter(
        (item) => item.nodeType === Node.ELEMENT_NODE
      );
      let elementViewSpliceIndex = -1;
      for (let idx = index; idx < this.arrayInstance.length; idx++) {
        const item = this.arrayInstance[idx];
        if (item.nodeType === Node.ELEMENT_NODE) {
          elementViewSpliceIndex = indexOf.call(view, item);
          break;
        }
      }
      if (elementViewSpliceIndex === -1) {
        elementViewSpliceIndex = view.length;
      }
      if (toDelete.length) {
        splice.call(view, elementViewSpliceIndex, toDelete.length);
      }
      splice.call(view, elementViewSpliceIndex, 0, ...toInsert);
    }
    return splice.call(this.arrayInstance, index, deleteCount, ...items);
  }
  indexOf(item, fromIndex = 0) {
    return indexOf.call(this.arrayInstance, item, fromIndex);
  }
  indexOfElementsView(item, fromIndex = 0) {
    return indexOf.call(this.elementsView(), item, fromIndex);
  }
  // Return the elements-only view for this NodeList. Creates one if
  // it doesn't already exist.
  elementsView() {
    let view = this.elementViews[0];
    if (!view) {
      view = new HTMLCollection();
      this.elementViews.push(view);
      push.call(
        view,
        ...filter.call(
          this.arrayInstance,
          (item) => item.nodeType === Node.ELEMENT_NODE
        )
      );
    }
    return view;
  }
};
var NodeListClass = (() => {
  class NodeList2 extends Array {
    // @ts-ignore
    forEach(cb, thisArg = void 0) {
      super.forEach(cb, thisArg);
    }
    item(index) {
      return this[index] ?? null;
    }
    [nodeListMutatorSym]() {
      const cachedMutator = this[nodeListCachedMutator];
      if (cachedMutator) {
        return cachedMutator;
      } else {
        const cachedMutator2 = new NodeListMutatorImpl(this);
        this[nodeListCachedMutator] = cachedMutator2;
        return cachedMutator2;
      }
    }
    toString() {
      return "[object NodeList]";
    }
  }
  return NodeList2;
})();
for (const staticMethod of [
  "from",
  "isArray",
  "of"
]) {
  NodeListClass[staticMethod] = void 0;
}
for (const instanceMethod of [
  "concat",
  "copyWithin",
  "every",
  "fill",
  "filter",
  "find",
  "findIndex",
  "flat",
  "flatMap",
  "includes",
  "indexOf",
  "join",
  "lastIndexOf",
  "map",
  "pop",
  "push",
  "reduce",
  "reduceRight",
  "reverse",
  "shift",
  "slice",
  "some",
  "sort",
  "splice",
  "toLocaleString",
  "unshift"
]) {
  NodeListClass.prototype[instanceMethod] = void 0;
}
var NodeList = NodeListClass;

// https://deno.land/x/deno_dom@v0.1.43/src/dom/utils-types.ts
var utils_types_default = {
  Element: null,
  Document: null,
  DocumentFragment: null
};

// https://deno.land/x/deno_dom@v0.1.43/src/dom/utils.ts
var upperCaseCharRe = /[A-Z]/;
var lowerCaseCharRe = /[a-z]/;
function getDatasetHtmlAttrName(name) {
  let attributeName = "data-";
  for (const char of name) {
    if (upperCaseCharRe.test(char)) {
      attributeName += "-" + char.toLowerCase();
    } else {
      attributeName += char;
    }
  }
  return attributeName;
}
function getDatasetJavascriptName(name) {
  let javascriptName = "";
  let prevChar = "";
  for (const char of name.slice("data-".length)) {
    if (prevChar === "-" && lowerCaseCharRe.test(char)) {
      javascriptName += char.toUpperCase();
      prevChar = "";
    } else {
      javascriptName += prevChar;
      prevChar = char;
    }
  }
  return javascriptName + prevChar;
}
function getElementsByClassName(element, className, search2) {
  for (const child of element.childNodes) {
    if (child.nodeType === 1 /* ELEMENT_NODE */) {
      const classList = className.trim().split(/\s+/);
      let matchesCount = 0;
      for (const singleClassName of classList) {
        if (child.classList.contains(singleClassName)) {
          matchesCount++;
        }
      }
      if (matchesCount === classList.length) {
        search2.push(child);
      }
      getElementsByClassName(child, className, search2);
    }
  }
  return search2;
}
function getOuterHTMLOpeningTag(parentElement) {
  return "<" + parentElement.localName + getElementAttributesString(parentElement) + ">";
}
var voidElements = /* @__PURE__ */ new Set([
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
function getOuterOrInnerHtml(parentElement, asOuterHtml) {
  let outerHTMLOpeningTag = "";
  let outerHTMLClosingTag = "";
  let innerHTML = "";
  if (asOuterHtml) {
    outerHTMLOpeningTag = getOuterHTMLOpeningTag(parentElement);
    outerHTMLClosingTag = `</${parentElement.localName}>`;
    if (voidElements.has(parentElement.localName)) {
      return outerHTMLOpeningTag;
    }
  }
  const initialChildNodes = parentElement.localName === "template" ? parentElement.content.childNodes : parentElement.childNodes;
  const childNodeDepth = [initialChildNodes];
  const indexDepth = [0];
  const closingTagDepth = [outerHTMLClosingTag];
  let depth = 0;
  depthLoop:
    while (depth > -1) {
      const child = childNodeDepth[depth][indexDepth[depth]];
      if (child) {
        switch (child.nodeType) {
          case 1 /* ELEMENT_NODE */: {
            innerHTML += getOuterHTMLOpeningTag(child);
            const childLocalName = child.localName;
            if (!voidElements.has(childLocalName)) {
              if (childLocalName === "template") {
                childNodeDepth.push(
                  child.content.childNodes
                );
              } else {
                childNodeDepth.push(child.childNodes);
              }
              indexDepth.push(0);
              closingTagDepth.push(`</${childLocalName}>`);
              depth++;
              continue depthLoop;
            }
            break;
          }
          case 8 /* COMMENT_NODE */:
            innerHTML += `<!--${child.data}-->`;
            break;
          case 3 /* TEXT_NODE */:
            switch (child.parentNode.localName) {
              case "style":
              case "script":
              case "xmp":
              case "iframe":
              case "noembed":
              case "noframes":
              case "plaintext":
                innerHTML += child.data;
                break;
              default:
                innerHTML += child.data.replace(/&/g, "&amp;").replace(/\xA0/g, "&nbsp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                break;
            }
            break;
        }
      } else {
        depth--;
        indexDepth.pop();
        childNodeDepth.pop();
        innerHTML += closingTagDepth.pop();
      }
      indexDepth[depth]++;
    }
  return outerHTMLOpeningTag + innerHTML;
}
function getElementAttributesString(element) {
  let out = "";
  for (const attribute of element.getAttributeNames()) {
    out += ` ${attribute.toLowerCase()}`;
    out += `="${element.getAttribute(attribute).replace(/&/g, "&amp;").replace(/\xA0/g, "&nbsp;").replace(/"/g, "&quot;")}"`;
  }
  return out;
}
function insertBeforeAfter(node, nodes, before) {
  const parentNode = node.parentNode;
  const mutator = parentNode._getChildNodesMutator();
  let viablePrevNextSibling = null;
  {
    const difference = before ? -1 : 1;
    for (let i2 = mutator.indexOf(node) + difference; 0 <= i2 && i2 < parentNode.childNodes.length; i2 += difference) {
      if (!nodes.includes(parentNode.childNodes[i2])) {
        viablePrevNextSibling = parentNode.childNodes[i2];
        break;
      }
    }
  }
  nodes = nodesAndTextNodes(nodes, parentNode);
  let index;
  if (viablePrevNextSibling) {
    index = mutator.indexOf(viablePrevNextSibling) + (before ? 1 : 0);
  } else {
    index = before ? 0 : parentNode.childNodes.length;
  }
  mutator.splice(index, 0, ...nodes);
}
function isDocumentFragment(node) {
  let obj = node;
  if (!(obj && typeof obj === "object")) {
    return false;
  }
  while (true) {
    switch (obj.constructor) {
      case utils_types_default.DocumentFragment:
        return true;
      case Node:
      case utils_types_default.Element:
        return false;
      case Object:
      case null:
      case void 0:
        return false;
      default:
        obj = Reflect.getPrototypeOf(obj);
    }
  }
}
function moveDocumentFragmentChildren(fragment, newParent) {
  const childCount = fragment.childNodes.length;
  for (const child of fragment.childNodes) {
    child._setParent(newParent);
  }
  const mutator = fragment._getChildNodesMutator();
  mutator.splice(0, childCount);
}

// https://deno.land/x/deno_dom@v0.1.43/src/dom/node.ts
var nodesAndTextNodes = (nodes, parentNode) => {
  return nodes.flatMap((n) => {
    if (isDocumentFragment(n)) {
      const children = Array.from(n.childNodes);
      moveDocumentFragmentChildren(n, parentNode);
      return children;
    } else {
      const node = n instanceof Node ? n : new Text2("" + n);
      if (n === node && parentNode) {
        parentNode._assertNotAncestor(node);
      }
      node._remove(true);
      node._setParent(parentNode, true);
      return [node];
    }
  });
};
var Node = class _Node extends EventTarget {
  constructor(nodeName, nodeType, parentNode, key) {
    if (key !== CTOR_KEY) {
      throw new TypeError("Illegal constructor.");
    }
    super();
    this.nodeName = nodeName;
    this.nodeType = nodeType;
    this.#nodeValue = null;
    this.childNodes = new NodeList();
    this.#childNodesMutator = this.childNodes[nodeListMutatorSym]();
    this.parentElement = parentNode;
    if (parentNode) {
      parentNode.appendChild(this);
    }
  }
  #nodeValue = null;
  childNodes;
  parentNode = null;
  parentElement;
  #childNodesMutator;
  #ownerDocument = null;
  _ancestors = /* @__PURE__ */ new Set();
  // Instance constants defined after Node
  // class body below to avoid clutter
  static ELEMENT_NODE = 1 /* ELEMENT_NODE */;
  static ATTRIBUTE_NODE = 2 /* ATTRIBUTE_NODE */;
  static TEXT_NODE = 3 /* TEXT_NODE */;
  static CDATA_SECTION_NODE = 4 /* CDATA_SECTION_NODE */;
  static ENTITY_REFERENCE_NODE = 5 /* ENTITY_REFERENCE_NODE */;
  static ENTITY_NODE = 6 /* ENTITY_NODE */;
  static PROCESSING_INSTRUCTION_NODE = 7 /* PROCESSING_INSTRUCTION_NODE */;
  static COMMENT_NODE = 8 /* COMMENT_NODE */;
  static DOCUMENT_NODE = 9 /* DOCUMENT_NODE */;
  static DOCUMENT_TYPE_NODE = 10 /* DOCUMENT_TYPE_NODE */;
  static DOCUMENT_FRAGMENT_NODE = 11 /* DOCUMENT_FRAGMENT_NODE */;
  static NOTATION_NODE = 12 /* NOTATION_NODE */;
  _getChildNodesMutator() {
    return this.#childNodesMutator;
  }
  /**
   * Update ancestor chain & owner document for this child
   * and all its children.
   */
  _setParent(newParent, force = false) {
    const sameParent = this.parentNode === newParent;
    const shouldUpdateParentAndAncestors = !sameParent || force;
    if (shouldUpdateParentAndAncestors) {
      this.parentNode = newParent;
      if (newParent) {
        if (!sameParent) {
          if (newParent.nodeType === 1 /* ELEMENT_NODE */) {
            this.parentElement = newParent;
          } else {
            this.parentElement = null;
          }
          this._setOwnerDocument(newParent.#ownerDocument);
        }
        this._ancestors = new Set(newParent._ancestors);
        this._ancestors.add(newParent);
      } else {
        this.parentElement = null;
        this._ancestors.clear();
      }
      for (const child of this.childNodes) {
        child._setParent(this, shouldUpdateParentAndAncestors);
      }
    }
  }
  _assertNotAncestor(child) {
    if (child.contains(this)) {
      throw new DOMException("The new child is an ancestor of the parent");
    }
  }
  _setOwnerDocument(document2) {
    if (this.#ownerDocument !== document2) {
      this.#ownerDocument = document2;
      for (const child of this.childNodes) {
        child._setOwnerDocument(document2);
      }
    }
  }
  contains(child) {
    return child._ancestors.has(this) || child === this;
  }
  get ownerDocument() {
    return this.#ownerDocument;
  }
  get nodeValue() {
    return this.#nodeValue;
  }
  set nodeValue(value) {
  }
  get textContent() {
    let out = "";
    for (const child of this.childNodes) {
      switch (child.nodeType) {
        case 3 /* TEXT_NODE */:
          out += child.nodeValue;
          break;
        case 1 /* ELEMENT_NODE */:
          out += child.textContent;
          break;
      }
    }
    return out;
  }
  set textContent(content) {
    for (const child of this.childNodes) {
      child._setParent(null);
    }
    this._getChildNodesMutator().splice(0, this.childNodes.length);
    this.appendChild(new Text2(content));
  }
  get firstChild() {
    return this.childNodes[0] || null;
  }
  get lastChild() {
    return this.childNodes[this.childNodes.length - 1] || null;
  }
  hasChildNodes() {
    return Boolean(this.childNodes.length);
  }
  cloneNode(deep = false) {
    const copy7 = this._shallowClone();
    copy7._setOwnerDocument(this.ownerDocument);
    if (deep) {
      for (const child of this.childNodes) {
        copy7.appendChild(child.cloneNode(true));
      }
    }
    return copy7;
  }
  _shallowClone() {
    throw new Error("Illegal invocation");
  }
  _remove(skipSetParent = false) {
    const parent = this.parentNode;
    if (parent) {
      const nodeList = parent._getChildNodesMutator();
      const idx = nodeList.indexOf(this);
      nodeList.splice(idx, 1);
      if (!skipSetParent) {
        this._setParent(null);
      }
    }
  }
  appendChild(child) {
    if (isDocumentFragment(child)) {
      const mutator = this._getChildNodesMutator();
      mutator.push(...child.childNodes);
      moveDocumentFragmentChildren(child, this);
      return child;
    } else {
      return child._appendTo(this);
    }
  }
  _appendTo(parentNode) {
    parentNode._assertNotAncestor(this);
    const oldParentNode = this.parentNode;
    if (oldParentNode === parentNode) {
      if (parentNode._getChildNodesMutator().indexOf(this) !== -1) {
        return this;
      }
    } else if (oldParentNode) {
      this._remove();
    }
    this._setParent(parentNode, true);
    parentNode._getChildNodesMutator().push(this);
    return this;
  }
  removeChild(child) {
    if (child && typeof child === "object") {
      if (child.parentNode === this) {
        child._remove();
        return child;
      } else {
        throw new DOMException(
          "Node.removeChild: The node to be removed is not a child of this node"
        );
      }
    } else {
      throw new TypeError("Node.removeChild: Argument 1 is not an object.");
    }
  }
  replaceChild(newChild, oldChild) {
    if (oldChild.parentNode !== this) {
      throw new Error("Old child's parent is not the current node.");
    }
    oldChild._replaceWith(newChild);
    return oldChild;
  }
  insertBefore(newNode, refNode) {
    this._assertNotAncestor(newNode);
    const mutator = this._getChildNodesMutator();
    if (refNode === null) {
      this.appendChild(newNode);
      return newNode;
    }
    const index = mutator.indexOf(refNode);
    if (index === -1) {
      throw new Error(
        "DOMException: Child to insert before is not a child of this node"
      );
    }
    if (isDocumentFragment(newNode)) {
      mutator.splice(index, 0, ...newNode.childNodes);
      moveDocumentFragmentChildren(newNode, this);
    } else {
      const oldParentNode = newNode.parentNode;
      const oldMutator = oldParentNode?._getChildNodesMutator();
      if (oldMutator) {
        oldMutator.splice(oldMutator.indexOf(newNode), 1);
      }
      newNode._setParent(this, oldParentNode !== this);
      mutator.splice(index, 0, newNode);
    }
    return newNode;
  }
  _replaceWith(...nodes) {
    if (this.parentNode) {
      const parentNode = this.parentNode;
      const mutator = parentNode._getChildNodesMutator();
      let viableNextSibling = null;
      {
        const thisIndex = mutator.indexOf(this);
        for (let i2 = thisIndex + 1; i2 < parentNode.childNodes.length; i2++) {
          if (!nodes.includes(parentNode.childNodes[i2])) {
            viableNextSibling = parentNode.childNodes[i2];
            break;
          }
        }
      }
      nodes = nodesAndTextNodes(nodes, parentNode);
      let index = viableNextSibling ? mutator.indexOf(viableNextSibling) : parentNode.childNodes.length;
      let deleteNumber;
      if (parentNode.childNodes[index - 1] === this) {
        index--;
        deleteNumber = 1;
      } else {
        deleteNumber = 0;
      }
      mutator.splice(index, deleteNumber, ...nodes);
      this._setParent(null);
    }
  }
  get nextSibling() {
    const parent = this.parentNode;
    if (!parent) {
      return null;
    }
    const index = parent._getChildNodesMutator().indexOf(this);
    const next = parent.childNodes[index + 1] || null;
    return next;
  }
  get previousSibling() {
    const parent = this.parentNode;
    if (!parent) {
      return null;
    }
    const index = parent._getChildNodesMutator().indexOf(this);
    const prev = parent.childNodes[index - 1] || null;
    return prev;
  }
  // Node.compareDocumentPosition()'s bitmask values
  static DOCUMENT_POSITION_DISCONNECTED = 1;
  static DOCUMENT_POSITION_PRECEDING = 2;
  static DOCUMENT_POSITION_FOLLOWING = 4;
  static DOCUMENT_POSITION_CONTAINS = 8;
  static DOCUMENT_POSITION_CONTAINED_BY = 16;
  static DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
  /**
   * FIXME: Does not implement attribute node checks
   * ref: https://dom.spec.whatwg.org/#dom-node-comparedocumentposition
   * MDN: https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
   */
  compareDocumentPosition(other) {
    if (other === this) {
      return 0;
    }
    if (!(other instanceof _Node)) {
      throw new TypeError(
        "Node.compareDocumentPosition: Argument 1 does not implement interface Node."
      );
    }
    let node1Root = other;
    let node2Root = this;
    const node1Hierarchy = [node1Root];
    const node2Hierarchy = [node2Root];
    while (node1Root.parentNode ?? node2Root.parentNode) {
      node1Root = node1Root.parentNode ? (node1Hierarchy.push(node1Root.parentNode), node1Root.parentNode) : node1Root;
      node2Root = node2Root.parentNode ? (node2Hierarchy.push(node2Root.parentNode), node2Root.parentNode) : node2Root;
    }
    if (node1Root !== node2Root) {
      return _Node.DOCUMENT_POSITION_DISCONNECTED | _Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | _Node.DOCUMENT_POSITION_PRECEDING;
    }
    const longerHierarchy = node1Hierarchy.length > node2Hierarchy.length ? node1Hierarchy : node2Hierarchy;
    const shorterHierarchy = longerHierarchy === node1Hierarchy ? node2Hierarchy : node1Hierarchy;
    if (longerHierarchy[longerHierarchy.length - shorterHierarchy.length] === shorterHierarchy[0]) {
      return longerHierarchy === node1Hierarchy ? _Node.DOCUMENT_POSITION_CONTAINED_BY | _Node.DOCUMENT_POSITION_FOLLOWING : _Node.DOCUMENT_POSITION_CONTAINS | _Node.DOCUMENT_POSITION_PRECEDING;
    }
    const longerStart = longerHierarchy.length - shorterHierarchy.length;
    for (let i2 = shorterHierarchy.length - 1; i2 >= 0; i2--) {
      const shorterHierarchyNode = shorterHierarchy[i2];
      const longerHierarchyNode = longerHierarchy[longerStart + i2];
      if (longerHierarchyNode !== shorterHierarchyNode) {
        const siblings = shorterHierarchyNode.parentNode._getChildNodesMutator();
        if (siblings.indexOf(shorterHierarchyNode) < siblings.indexOf(longerHierarchyNode)) {
          if (shorterHierarchy === node1Hierarchy) {
            return _Node.DOCUMENT_POSITION_PRECEDING;
          } else {
            return _Node.DOCUMENT_POSITION_FOLLOWING;
          }
        } else {
          if (longerHierarchy === node1Hierarchy) {
            return _Node.DOCUMENT_POSITION_PRECEDING;
          } else {
            return _Node.DOCUMENT_POSITION_FOLLOWING;
          }
        }
      }
    }
    return _Node.DOCUMENT_POSITION_FOLLOWING;
  }
  getRootNode(opts = {}) {
    if (this.parentNode) {
      return this.parentNode.getRootNode(opts);
    }
    if (opts.composed && this.host) {
      return this.host.getRootNode(opts);
    }
    return this;
  }
};
Node.prototype.ELEMENT_NODE = 1 /* ELEMENT_NODE */;
Node.prototype.ATTRIBUTE_NODE = 2 /* ATTRIBUTE_NODE */;
Node.prototype.TEXT_NODE = 3 /* TEXT_NODE */;
Node.prototype.CDATA_SECTION_NODE = 4 /* CDATA_SECTION_NODE */;
Node.prototype.ENTITY_REFERENCE_NODE = 5 /* ENTITY_REFERENCE_NODE */;
Node.prototype.ENTITY_NODE = 6 /* ENTITY_NODE */;
Node.prototype.PROCESSING_INSTRUCTION_NODE = 7 /* PROCESSING_INSTRUCTION_NODE */;
Node.prototype.COMMENT_NODE = 8 /* COMMENT_NODE */;
Node.prototype.DOCUMENT_NODE = 9 /* DOCUMENT_NODE */;
Node.prototype.DOCUMENT_TYPE_NODE = 10 /* DOCUMENT_TYPE_NODE */;
Node.prototype.DOCUMENT_FRAGMENT_NODE = 11 /* DOCUMENT_FRAGMENT_NODE */;
Node.prototype.NOTATION_NODE = 12 /* NOTATION_NODE */;
var CharacterData = class extends Node {
  #nodeValue = "";
  constructor(data, nodeName, nodeType, parentNode, key) {
    super(
      nodeName,
      nodeType,
      parentNode,
      key
    );
    this.#nodeValue = data;
  }
  get nodeValue() {
    return this.#nodeValue;
  }
  set nodeValue(value) {
    this.#nodeValue = String(value ?? "");
  }
  get data() {
    return this.#nodeValue;
  }
  set data(value) {
    this.nodeValue = value;
  }
  get textContent() {
    return this.#nodeValue;
  }
  set textContent(value) {
    this.nodeValue = value;
  }
  get length() {
    return this.data.length;
  }
  before(...nodes) {
    if (this.parentNode) {
      insertBeforeAfter(this, nodes, true);
    }
  }
  after(...nodes) {
    if (this.parentNode) {
      insertBeforeAfter(this, nodes, false);
    }
  }
  remove() {
    this._remove();
  }
  replaceWith(...nodes) {
    this._replaceWith(...nodes);
  }
  // TODO: Implement NonDocumentTypeChildNode.nextElementSibling, etc
  // ref: https://developer.mozilla.org/en-US/docs/Web/API/CharacterData
};
var Text2 = class _Text extends CharacterData {
  constructor(text = "") {
    super(
      String(text),
      "#text",
      3 /* TEXT_NODE */,
      null,
      CTOR_KEY
    );
  }
  _shallowClone() {
    return new _Text(this.textContent);
  }
  get textContent() {
    return this.nodeValue;
  }
};
var Comment2 = class _Comment extends CharacterData {
  constructor(text = "") {
    super(
      String(text),
      "#comment",
      8 /* COMMENT_NODE */,
      null,
      CTOR_KEY
    );
  }
  _shallowClone() {
    return new _Comment(this.textContent);
  }
  get textContent() {
    return this.nodeValue;
  }
};

// https://deno.land/x/deno_dom@v0.1.43/src/dom/element.ts
var DOMTokenList = class _DOMTokenList {
  #_value = "";
  get #value() {
    return this.#_value;
  }
  set #value(value) {
    this.#_value = value;
    this.#onChange(value);
  }
  #set = /* @__PURE__ */ new Set();
  #onChange;
  constructor(onChange, key) {
    if (key !== CTOR_KEY) {
      throw new TypeError("Illegal constructor");
    }
    this.#onChange = onChange;
  }
  static #invalidToken(token) {
    return token === "" || /[\t\n\f\r ]/.test(token);
  }
  #setIndices() {
    const classes = Array.from(this.#set);
    for (let i2 = 0; i2 < classes.length; i2++) {
      this[i2] = classes[i2];
    }
  }
  set value(input) {
    this.#value = input;
    this.#set = new Set(
      input.trim().split(/[\t\n\f\r\s]+/g).filter(Boolean)
    );
    this.#setIndices();
  }
  get value() {
    return this.#_value;
  }
  get length() {
    return this.#set.size;
  }
  *entries() {
    const array = Array.from(this.#set);
    for (let i2 = 0; i2 < array.length; i2++) {
      yield [i2, array[i2]];
    }
  }
  *values() {
    yield* this.#set.values();
  }
  *keys() {
    for (let i2 = 0; i2 < this.#set.size; i2++) {
      yield i2;
    }
  }
  *[Symbol.iterator]() {
    yield* this.#set.values();
  }
  item(index) {
    index = Number(index);
    if (Number.isNaN(index) || index === Infinity)
      index = 0;
    return this[Math.trunc(index) % 2 ** 32] ?? null;
  }
  contains(element) {
    return this.#set.has(element);
  }
  add(...elements) {
    for (const element of elements) {
      if (_DOMTokenList.#invalidToken(element)) {
        throw new DOMException(
          "Failed to execute 'add' on 'DOMTokenList': The token provided must not be empty."
        );
      }
      const { size } = this.#set;
      this.#set.add(element);
      if (size < this.#set.size) {
        this[size] = element;
      }
    }
    this.#updateClassString();
  }
  remove(...elements) {
    const { size } = this.#set;
    for (const element of elements) {
      if (_DOMTokenList.#invalidToken(element)) {
        throw new DOMException(
          "Failed to execute 'remove' on 'DOMTokenList': The token provided must not be empty."
        );
      }
      this.#set.delete(element);
    }
    if (size !== this.#set.size) {
      for (let i2 = this.#set.size; i2 < size; i2++) {
        delete this[i2];
      }
      this.#setIndices();
    }
    this.#updateClassString();
  }
  replace(oldToken, newToken) {
    if ([oldToken, newToken].some((v) => _DOMTokenList.#invalidToken(v))) {
      throw new DOMException(
        "Failed to execute 'replace' on 'DOMTokenList': The token provided must not be empty."
      );
    }
    if (!this.#set.has(oldToken)) {
      return false;
    }
    if (this.#set.has(newToken)) {
      this.remove(oldToken);
    } else {
      this.#set.delete(oldToken);
      this.#set.add(newToken);
      this.#setIndices();
      this.#updateClassString();
    }
    return true;
  }
  supports() {
    throw new Error("Not implemented");
  }
  toggle(element, force) {
    if (force !== void 0) {
      const operation = force ? "add" : "remove";
      this[operation](element);
      return false;
    } else {
      const contains = this.contains(element);
      const operation = contains ? "remove" : "add";
      this[operation](element);
      return !contains;
    }
  }
  forEach(callback) {
    for (const [i2, value] of this.entries()) {
      callback(value, i2, this);
    }
  }
  #updateClassString() {
    this.#value = Array.from(this.#set).join(" ");
  }
};
var setNamedNodeMapOwnerElementSym = Symbol();
var setAttrValueSym = Symbol();
var Attr = class _Attr extends Node {
  #namedNodeMap = null;
  #name = "";
  #value = "";
  #ownerElement = null;
  constructor(map2, name, value, key) {
    if (key !== CTOR_KEY) {
      throw new TypeError("Illegal constructor");
    }
    super(name, 2 /* ATTRIBUTE_NODE */, null, CTOR_KEY);
    this.#name = name;
    this.#value = value;
    this.#namedNodeMap = map2;
  }
  [setNamedNodeMapOwnerElementSym](ownerElement) {
    this.#ownerElement = ownerElement;
    this.#namedNodeMap = ownerElement?.attributes ?? null;
    if (ownerElement) {
      this._setOwnerDocument(ownerElement.ownerDocument);
    }
  }
  [setAttrValueSym](value) {
    this.#value = value;
  }
  _shallowClone() {
    const newAttr = new _Attr(null, this.#name, this.#value, CTOR_KEY);
    newAttr._setOwnerDocument(this.ownerDocument);
    return newAttr;
  }
  cloneNode() {
    return super.cloneNode();
  }
  appendChild() {
    throw new DOMException("Cannot add children to an Attribute");
  }
  replaceChild() {
    throw new DOMException("Cannot add children to an Attribute");
  }
  insertBefore() {
    throw new DOMException("Cannot add children to an Attribute");
  }
  removeChild() {
    throw new DOMException(
      "The node to be removed is not a child of this node"
    );
  }
  get name() {
    return this.#name;
  }
  get localName() {
    return this.#name;
  }
  get value() {
    return this.#value;
  }
  set value(value) {
    this.#value = String(value);
    if (this.#namedNodeMap) {
      this.#namedNodeMap[setNamedNodeMapValueSym](
        this.#name,
        this.#value,
        true
      );
    }
  }
  get ownerElement() {
    return this.#ownerElement ?? null;
  }
  get specified() {
    return true;
  }
  // TODO
  get prefix() {
    return null;
  }
};
var setNamedNodeMapValueSym = Symbol();
var getNamedNodeMapValueSym = Symbol();
var getNamedNodeMapAttrNamesSym = Symbol();
var getNamedNodeMapAttrNodeSym = Symbol();
var removeNamedNodeMapAttrSym = Symbol();
var NamedNodeMap = class _NamedNodeMap {
  static #indexedAttrAccess = function(map2, index) {
    if (index + 1 > this.length) {
      return void 0;
    }
    const attribute = Object.keys(map2).filter((attribute2) => map2[attribute2] !== void 0)[index]?.slice(1);
    return this[getNamedNodeMapAttrNodeSym](attribute);
  };
  #onAttrNodeChange;
  constructor(ownerElement, onAttrNodeChange, key) {
    if (key !== CTOR_KEY) {
      throw new TypeError("Illegal constructor.");
    }
    this.#ownerElement = ownerElement;
    this.#onAttrNodeChange = onAttrNodeChange;
  }
  #attrNodeCache = {};
  #map = {};
  #length = 0;
  #capacity = 0;
  #ownerElement = null;
  [getNamedNodeMapAttrNodeSym](attribute) {
    const safeAttrName = "a" + attribute;
    let attrNode = this.#attrNodeCache[safeAttrName];
    if (!attrNode) {
      attrNode = this.#attrNodeCache[safeAttrName] = new Attr(
        this,
        attribute,
        this.#map[safeAttrName],
        CTOR_KEY
      );
      attrNode[setNamedNodeMapOwnerElementSym](this.#ownerElement);
    }
    return attrNode;
  }
  [getNamedNodeMapAttrNamesSym]() {
    const names = [];
    for (const [name, value] of Object.entries(this.#map)) {
      if (value !== void 0) {
        names.push(name.slice(1));
      }
    }
    return names;
  }
  [getNamedNodeMapValueSym](attribute) {
    const safeAttrName = "a" + attribute;
    return this.#map[safeAttrName];
  }
  [setNamedNodeMapValueSym](attribute, value, bubble = false) {
    const safeAttrName = "a" + attribute;
    if (this.#map[safeAttrName] === void 0) {
      this.#length++;
      if (this.#length > this.#capacity) {
        this.#capacity = this.#length;
        const index = this.#capacity - 1;
        Object.defineProperty(this, String(this.#capacity - 1), {
          get: _NamedNodeMap.#indexedAttrAccess.bind(this, this.#map, index)
        });
      }
    } else if (this.#attrNodeCache[safeAttrName]) {
      this.#attrNodeCache[safeAttrName][setAttrValueSym](value);
    }
    this.#map[safeAttrName] = value;
    if (bubble) {
      this.#onAttrNodeChange(attribute, value);
    }
  }
  /**
   * Called when an attribute is removed from
   * an element
   */
  [removeNamedNodeMapAttrSym](attribute) {
    const safeAttrName = "a" + attribute;
    if (this.#map[safeAttrName] !== void 0) {
      this.#length--;
      this.#map[safeAttrName] = void 0;
      this.#onAttrNodeChange(attribute, null);
      const attrNode = this.#attrNodeCache[safeAttrName];
      if (attrNode) {
        attrNode[setNamedNodeMapOwnerElementSym](null);
        this.#attrNodeCache[safeAttrName] = void 0;
      }
    }
  }
  *[Symbol.iterator]() {
    for (let i2 = 0; i2 < this.length; i2++) {
      yield this[i2];
    }
  }
  get length() {
    return this.#length;
  }
  // FIXME: This method should accept anything and basically
  // coerce any non numbers (and Infinity/-Infinity) into 0
  item(index) {
    if (index >= this.#length) {
      return null;
    }
    return this[index];
  }
  getNamedItem(attribute) {
    const safeAttrName = "a" + attribute;
    if (this.#map[safeAttrName] !== void 0) {
      return this[getNamedNodeMapAttrNodeSym](attribute);
    }
    return null;
  }
  setNamedItem(attrNode) {
    if (attrNode.ownerElement) {
      throw new DOMException("Attribute already in use");
    }
    const safeAttrName = "a" + attrNode.name;
    const previousAttr = this.#attrNodeCache[safeAttrName];
    if (previousAttr) {
      previousAttr[setNamedNodeMapOwnerElementSym](null);
      this.#map[safeAttrName] = void 0;
    }
    attrNode[setNamedNodeMapOwnerElementSym](this.#ownerElement);
    this.#attrNodeCache[safeAttrName] = attrNode;
    this[setNamedNodeMapValueSym](attrNode.name, attrNode.value, true);
  }
  removeNamedItem(attribute) {
    const safeAttrName = "a" + attribute;
    if (this.#map[safeAttrName] !== void 0) {
      const attrNode = this[getNamedNodeMapAttrNodeSym](attribute);
      this[removeNamedNodeMapAttrSym](attribute);
      return attrNode;
    }
    throw new DOMException("Node was not found");
  }
};
var XML_NAMESTART_CHAR_RE_SRC = ":A-Za-z_" + String.raw`\u{C0}-\u{D6}\u{D8}-\u{F6}\u{F8}-\u{2FF}\u{370}-\u{37D}` + String.raw`\u{37F}-\u{1FFF}\u{200C}-\u{200D}\u{2070}-\u{218F}\u{2C00}-\u{2FEF}` + String.raw`\u{3001}-\u{D7FF}\u{F900}-\u{FDCF}\u{FDF0}-\u{FFFD}\u{10000}-\u{EFFFF}`;
var XML_NAME_CHAR_RE_SRC = XML_NAMESTART_CHAR_RE_SRC + String.raw`\u{B7}\u{0300}-\u{036F}\u{203F}-\u{2040}0-9.-`;
var xmlNamestartCharRe = new RegExp(`[${XML_NAMESTART_CHAR_RE_SRC}]`, "u");
var xmlNameCharRe = new RegExp(`[${XML_NAME_CHAR_RE_SRC}]`, "u");
var Element2 = class _Element extends Node {
  constructor(tagName, parentNode, attributes, key) {
    super(
      tagName,
      1 /* ELEMENT_NODE */,
      parentNode,
      key
    );
    this.tagName = tagName;
    for (const attr of attributes) {
      this.setAttribute(attr[0], attr[1]);
      switch (attr[0]) {
        case "class":
          this.#classList.value = attr[1];
          break;
        case "id":
          this.#currentId = attr[1];
          break;
      }
    }
    this.tagName = this.nodeName = tagName.toUpperCase();
    this.localName = tagName.toLowerCase();
  }
  localName;
  attributes = new NamedNodeMap(this, (attribute, value) => {
    if (value === null) {
      value = "";
    }
    switch (attribute) {
      case "class":
        this.#classList.value = value;
        break;
      case "id":
        this.#currentId = value;
        break;
    }
  }, CTOR_KEY);
  #datasetProxy = null;
  #currentId = "";
  #classList = new DOMTokenList(
    (className) => {
      if (this.hasAttribute("class") || className !== "") {
        this.attributes[setNamedNodeMapValueSym]("class", className);
      }
    },
    CTOR_KEY
  );
  _shallowClone() {
    const attributes = [];
    for (const attribute of this.getAttributeNames()) {
      attributes.push([attribute, this.getAttribute(attribute)]);
    }
    return new _Element(this.nodeName, null, attributes, CTOR_KEY);
  }
  get childElementCount() {
    return this._getChildNodesMutator().elementsView().length;
  }
  get className() {
    return this.getAttribute("class") ?? "";
  }
  set className(className) {
    this.setAttribute("class", className);
    this.#classList.value = className;
  }
  get classList() {
    return this.#classList;
  }
  get outerHTML() {
    return getOuterOrInnerHtml(this, true);
  }
  set outerHTML(html) {
    if (this.parentNode) {
      const { parentElement, parentNode } = this;
      let contextLocalName = parentElement?.localName;
      switch (parentNode.nodeType) {
        case 9 /* DOCUMENT_NODE */: {
          throw new DOMException(
            "Modifications are not allowed for this document"
          );
        }
        case 11 /* DOCUMENT_FRAGMENT_NODE */: {
          contextLocalName = "body";
        }
        default: {
          const { childNodes: newChildNodes } = fragmentNodesFromString(html, contextLocalName).childNodes[0];
          const mutator = parentNode._getChildNodesMutator();
          const insertionIndex = mutator.indexOf(this);
          for (let i2 = newChildNodes.length - 1; i2 >= 0; i2--) {
            const child = newChildNodes[i2];
            mutator.splice(insertionIndex, 0, child);
            child._setParent(parentNode);
            child._setOwnerDocument(parentNode.ownerDocument);
          }
          this.remove();
        }
      }
    }
  }
  get innerHTML() {
    return getOuterOrInnerHtml(this, false);
  }
  set innerHTML(html) {
    for (const child of this.childNodes) {
      child._setParent(null);
    }
    const mutator = this._getChildNodesMutator();
    mutator.splice(0, this.childNodes.length);
    if (html.length) {
      const parsed = fragmentNodesFromString(html, this.localName);
      for (const child of parsed.childNodes[0].childNodes) {
        mutator.push(child);
      }
      for (const child of this.childNodes) {
        child._setParent(this);
        child._setOwnerDocument(this.ownerDocument);
      }
    }
  }
  get innerText() {
    return this.textContent;
  }
  set innerText(text) {
    this.textContent = text;
  }
  get children() {
    return this._getChildNodesMutator().elementsView();
  }
  get id() {
    return this.#currentId || "";
  }
  set id(id) {
    this.setAttribute("id", this.#currentId = id);
  }
  get dataset() {
    if (this.#datasetProxy) {
      return this.#datasetProxy;
    }
    this.#datasetProxy = new Proxy({}, {
      get: (_target, property, _receiver) => {
        if (typeof property === "string") {
          const attributeName = getDatasetHtmlAttrName(property);
          return this.getAttribute(attributeName) ?? void 0;
        }
        return void 0;
      },
      set: (_target, property, value, _receiver) => {
        if (typeof property === "string") {
          let attributeName = "data-";
          let prevChar = "";
          for (const char of property) {
            if (prevChar === "-" && lowerCaseCharRe.test(char)) {
              throw new DOMException(
                "An invalid or illegal string was specified"
              );
            }
            if (!xmlNameCharRe.test(char)) {
              throw new DOMException("String contains an invalid character");
            }
            if (upperCaseCharRe.test(char)) {
              attributeName += "-";
            }
            attributeName += char.toLowerCase();
            prevChar = char;
          }
          this.setAttribute(attributeName, String(value));
        }
        return true;
      },
      deleteProperty: (_target, property) => {
        if (typeof property === "string") {
          const attributeName = getDatasetHtmlAttrName(property);
          this.removeAttribute(attributeName);
        }
        return true;
      },
      ownKeys: (_target) => {
        return this.getAttributeNames().flatMap((attributeName) => {
          if (attributeName.startsWith?.("data-")) {
            return [getDatasetJavascriptName(attributeName)];
          } else {
            return [];
          }
        });
      },
      getOwnPropertyDescriptor: (_target, property) => {
        if (typeof property === "string") {
          const attributeName = getDatasetHtmlAttrName(property);
          if (this.hasAttribute(attributeName)) {
            return {
              writable: true,
              enumerable: true,
              configurable: true
            };
          }
        }
        return void 0;
      },
      has: (_target, property) => {
        if (typeof property === "string") {
          const attributeName = getDatasetHtmlAttrName(property);
          return this.hasAttribute(attributeName);
        }
        return false;
      }
    });
    return this.#datasetProxy;
  }
  getAttributeNames() {
    return this.attributes[getNamedNodeMapAttrNamesSym]();
  }
  getAttribute(name) {
    return this.attributes[getNamedNodeMapValueSym](name.toLowerCase()) ?? null;
  }
  setAttribute(rawName, value) {
    const name = String(rawName?.toLowerCase());
    const strValue = String(value);
    this.attributes[setNamedNodeMapValueSym](name, strValue);
    if (name === "id") {
      this.#currentId = strValue;
    } else if (name === "class") {
      this.#classList.value = strValue;
    }
  }
  removeAttribute(rawName) {
    const name = String(rawName?.toLowerCase());
    this.attributes[removeNamedNodeMapAttrSym](name);
    if (name === "class") {
      this.#classList.value = "";
    }
  }
  hasAttribute(name) {
    return this.attributes[getNamedNodeMapValueSym](
      String(name?.toLowerCase())
    ) !== void 0;
  }
  hasAttributeNS(_namespace, name) {
    return this.attributes[getNamedNodeMapValueSym](
      String(name?.toLowerCase())
    ) !== void 0;
  }
  replaceWith(...nodes) {
    this._replaceWith(...nodes);
  }
  remove() {
    this._remove();
  }
  append(...nodes) {
    const mutator = this._getChildNodesMutator();
    mutator.push(...nodesAndTextNodes(nodes, this));
  }
  prepend(...nodes) {
    const mutator = this._getChildNodesMutator();
    mutator.splice(0, 0, ...nodesAndTextNodes(nodes, this));
  }
  before(...nodes) {
    if (this.parentNode) {
      insertBeforeAfter(this, nodes, true);
    }
  }
  after(...nodes) {
    if (this.parentNode) {
      insertBeforeAfter(this, nodes, false);
    }
  }
  get firstElementChild() {
    const elements = this._getChildNodesMutator().elementsView();
    return elements[0] ?? null;
  }
  get lastElementChild() {
    const elements = this._getChildNodesMutator().elementsView();
    return elements[elements.length - 1] ?? null;
  }
  get nextElementSibling() {
    const parent = this.parentNode;
    if (!parent) {
      return null;
    }
    const mutator = parent._getChildNodesMutator();
    const index = mutator.indexOfElementsView(this);
    const elements = mutator.elementsView();
    return elements[index + 1] ?? null;
  }
  get previousElementSibling() {
    const parent = this.parentNode;
    if (!parent) {
      return null;
    }
    const mutator = parent._getChildNodesMutator();
    const index = mutator.indexOfElementsView(this);
    const elements = mutator.elementsView();
    return elements[index - 1] ?? null;
  }
  querySelector(selectors) {
    if (!this.ownerDocument) {
      throw new Error("Element must have an owner document");
    }
    return this.ownerDocument._nwapi.first(selectors, this);
  }
  querySelectorAll(selectors) {
    if (!this.ownerDocument) {
      throw new Error("Element must have an owner document");
    }
    const nodeList = new NodeList();
    const mutator = nodeList[nodeListMutatorSym]();
    for (const match of this.ownerDocument._nwapi.select(selectors, this)) {
      mutator.push(match);
    }
    return nodeList;
  }
  matches(selectorString) {
    return this.ownerDocument._nwapi.match(selectorString, this);
  }
  closest(selectorString) {
    const { match } = this.ownerDocument._nwapi;
    let el = this;
    do {
      if (match(selectorString, el)) {
        return el;
      }
      el = el.parentElement;
    } while (el !== null);
    return null;
  }
  // TODO: DRY!!!
  getElementById(id) {
    for (const child of this.childNodes) {
      if (child.nodeType === 1 /* ELEMENT_NODE */) {
        if (child.id === id) {
          return child;
        }
        const search2 = child.getElementById(id);
        if (search2) {
          return search2;
        }
      }
    }
    return null;
  }
  getElementsByTagName(tagName) {
    const fixCaseTagName = tagName.toUpperCase();
    if (fixCaseTagName === "*") {
      return this._getElementsByTagNameWildcard([]);
    } else {
      return this._getElementsByTagName(tagName.toUpperCase(), []);
    }
  }
  _getElementsByTagNameWildcard(search2) {
    for (const child of this.childNodes) {
      if (child.nodeType === 1 /* ELEMENT_NODE */) {
        search2.push(child);
        child._getElementsByTagNameWildcard(search2);
      }
    }
    return search2;
  }
  _getElementsByTagName(tagName, search2) {
    for (const child of this.childNodes) {
      if (child.nodeType === 1 /* ELEMENT_NODE */) {
        if (child.tagName === tagName) {
          search2.push(child);
        }
        child._getElementsByTagName(tagName, search2);
      }
    }
    return search2;
  }
  getElementsByClassName(className) {
    return getElementsByClassName(this, className, []);
  }
  getElementsByTagNameNS(_namespace, localName) {
    return this.getElementsByTagName(localName);
  }
};
utils_types_default.Element = Element2;

// https://deno.land/x/deno_dom@v0.1.43/src/dom/selectors/custom-api.ts
var customByTagNameSym = Symbol();
var customByClassNameSym = Symbol();

// https://deno.land/x/deno_dom@v0.1.43/src/dom/document-fragment.ts
var DocumentFragment2 = class _DocumentFragment extends Node {
  constructor() {
    super(
      "#document-fragment",
      11 /* DOCUMENT_FRAGMENT_NODE */,
      null,
      CTOR_KEY
    );
  }
  get childElementCount() {
    return this._getChildNodesMutator().elementsView().length;
  }
  get children() {
    return this._getChildNodesMutator().elementsView();
  }
  get firstElementChild() {
    const elements = this._getChildNodesMutator().elementsView();
    return elements[0] ?? null;
  }
  get lastElementChild() {
    const elements = this._getChildNodesMutator().elementsView();
    return elements[elements.length - 1] ?? null;
  }
  _shallowClone() {
    return new _DocumentFragment();
  }
  append(...nodes) {
    const mutator = this._getChildNodesMutator();
    mutator.push(...nodesAndTextNodes(nodes, this));
  }
  prepend(...nodes) {
    const mutator = this._getChildNodesMutator();
    mutator.splice(0, 0, ...nodesAndTextNodes(nodes, this));
  }
  replaceChildren(...nodes) {
    const mutator = this._getChildNodesMutator();
    for (const child of this.childNodes) {
      child._setParent(null);
    }
    mutator.splice(0, this.childNodes.length);
    mutator.splice(0, 0, ...nodesAndTextNodes(nodes, this));
  }
  // TODO: DRY!!!
  getElementById(id) {
    for (const child of this.childNodes) {
      if (child.nodeType === 1 /* ELEMENT_NODE */) {
        if (child.id === id) {
          return child;
        }
        const search2 = child.getElementById(id);
        if (search2) {
          return search2;
        }
      }
    }
    return null;
  }
  querySelector(selectors) {
    if (!this.ownerDocument) {
      throw new Error("DocumentFragment must have an owner document");
    }
    return this.ownerDocument._nwapi.first(selectors, this);
  }
  querySelectorAll(selectors) {
    if (!this.ownerDocument) {
      throw new Error("DocumentFragment must have an owner document");
    }
    const nodeList = new NodeList();
    const mutator = nodeList[nodeListMutatorSym]();
    mutator.push(
      ...this.ownerDocument._nwapi.select(selectors, this)
    );
    return nodeList;
  }
};
utils_types_default.DocumentFragment = DocumentFragment2;
function documentFragmentGetElementsByTagName(tagName) {
  const search2 = [];
  if (tagName === "*") {
    return documentFragmentGetElementsByTagNameWildcard(this, search2);
  }
  for (const child of this.childNodes) {
    if (child.nodeType === 1 /* ELEMENT_NODE */) {
      if (child.tagName === tagName) {
        search2.push(child);
      }
      child._getElementsByTagName(tagName, search2);
    }
  }
  return search2;
}
function documentFragmentGetElementsByClassName(className) {
  return getElementsByClassName(this, className, []);
}
function documentFragmentGetElementsByTagNameWildcard(fragment, search2) {
  for (const child of fragment.childNodes) {
    if (child.nodeType === 1 /* ELEMENT_NODE */) {
      search2.push(child);
      child._getElementsByTagNameWildcard(search2);
    }
  }
  return search2;
}
DocumentFragment2.prototype[customByTagNameSym] = documentFragmentGetElementsByTagName;
DocumentFragment2.prototype[customByClassNameSym] = documentFragmentGetElementsByClassName;

// https://deno.land/x/deno_dom@v0.1.43/src/dom/elements/html-template-element.ts
var HTMLTemplateElement = class _HTMLTemplateElement extends Element2 {
  /**
   * This blocks access to the .#contents property when the
   * super() constructor is running which invokes (our
   * overridden) _setParent() method. Without it, we get
   * the following error thrown:
   *
   *   TypeError: Cannot read private member #content from
   *   an object whose class did not declare it
   *
   * FIXME: Maybe find a cleaner way to do this
   */
  __contentIsSet = false;
  #content = null;
  constructor(parentNode, attributes, key, content) {
    super(
      "TEMPLATE",
      parentNode,
      attributes,
      key
    );
    this.#content = content;
    this.__contentIsSet = true;
  }
  get content() {
    return this.#content;
  }
  _setOwnerDocument(document2) {
    super._setOwnerDocument(document2);
    if (this.__contentIsSet) {
      this.content._setOwnerDocument(document2);
    }
  }
  _shallowClone() {
    const frag = new DocumentFragment2();
    const attributes = this.getAttributeNames().map((name) => [name, this.getAttribute(name)]);
    return new _HTMLTemplateElement(null, attributes, CTOR_KEY, frag);
  }
  cloneNode(deep = false) {
    const newNode = super.cloneNode(deep);
    if (deep) {
      const destContent = newNode.content;
      for (const child of this.content.childNodes) {
        destContent.appendChild(child.cloneNode(deep));
      }
    }
    return newNode;
  }
  get innerHTML() {
    return getOuterOrInnerHtml(this, false);
  }
  // Replace children in the `.content`
  set innerHTML(html) {
    const content = this.content;
    for (const child of content.childNodes) {
      child._setParent(null);
    }
    const mutator = content._getChildNodesMutator();
    mutator.splice(0, content.childNodes.length);
    if (html.length) {
      const parsed = fragmentNodesFromString(html, this.localName);
      mutator.push(...parsed.childNodes[0].childNodes);
      for (const child of content.childNodes) {
        child._setParent(content);
        child._setOwnerDocument(content.ownerDocument);
      }
    }
  }
  get outerHTML() {
    return `<template${getElementAttributesString(this)}>${this.innerHTML}</template>`;
  }
};

// https://deno.land/x/deno_dom@v0.1.43/src/dom/selectors/nwsapi.js
var nwsapi_default = (document2) => {
  const NW = Factory({ document: document2, DOMException }, "null");
  NW.configure({
    IDS_DUPES: false,
    LOGERRORS: false
  });
  return NW;
};
function Factory(global, Export) {
  var version = "nwsapi-2.2.0", doc = global.document, root = doc.documentElement, slice2 = Array.prototype.slice, WSP = "[\\x20\\t\\r\\n\\f]", CFG = {
    // extensions
    operators: "[~*^$|]=|=",
    combinators: "[\\x20\\t>+~](?=[^>+~])"
  }, NOT = {
    // not enclosed in double/single/parens/square
    double_enc: '(?=(?:[^"]*["][^"]*["])*[^"]*$)',
    single_enc: "(?=(?:[^']*['][^']*['])*[^']*$)",
    parens_enc: "(?![^\\x28]*\\x29)",
    square_enc: "(?![^\\x5b]*\\x5d)"
  }, REX = {
    // regular expressions
    HasEscapes: RegExp("\\\\"),
    HexNumbers: RegExp("^[0-9a-fA-F]"),
    EscOrQuote: RegExp("^\\\\|[\\x22\\x27]"),
    RegExpChar: RegExp("(?:(?!\\\\)[\\\\^$.*+?()[\\]{}|\\/])", "g"),
    TrimSpaces: RegExp("[\\r\\n\\f]|^" + WSP + "+|" + WSP + "+$", "g"),
    CommaGroup: RegExp("(\\s*,\\s*)" + NOT.square_enc + NOT.parens_enc, "g"),
    SplitGroup: RegExp("((?:\\x28[^\\x29]*\\x29|\\[[^\\]]*\\]|\\\\.|[^,])+)", "g"),
    FixEscapes: RegExp("\\\\([0-9a-fA-F]{1,6}" + WSP + "?|.)|([\\x22\\x27])", "g"),
    CombineWSP: RegExp("[\\n\\r\\f\\x20]+" + NOT.single_enc + NOT.double_enc, "g"),
    TabCharWSP: RegExp("(\\x20?\\t+\\x20?)" + NOT.single_enc + NOT.double_enc, "g"),
    PseudosWSP: RegExp("\\s+([-+])\\s+" + NOT.square_enc, "g")
  }, STD = {
    combinator: RegExp("\\s?([>+~])\\s?", "g"),
    apimethods: RegExp("^(?:[a-z]+|\\*)\\|", "i"),
    namespaces: RegExp("(\\*|[a-z]+)\\|[-a-z]+", "i")
  }, GROUPS = {
    // pseudo-classes requiring parameters
    linguistic: "(dir|lang)\\x28\\s?([-\\w]{2,})\\s?(?:\\x29|$)",
    logicalsel: "(is|where|matches|not)\\x28\\s?([^()]*|[^\\x28]*\\x28[^\\x29]*\\x29)\\s?(?:\\x29|$)",
    treestruct: "(nth(?:-last)?(?:-child|-of-type))(?:\\x28\\s?(even|odd|(?:[-+]?\\d*)(?:n\\s?[-+]?\\s?\\d*)?)\\s?(?:\\x29|$))",
    // pseudo-classes not requiring parameters
    locationpc: "(any-link|link|visited|target)\\b",
    useraction: "(hover|active|focus|focus-within)\\b",
    structural: "(root|empty|(?:(?:first|last|only)(?:-child|-of-type)))\\b",
    inputstate: "(enabled|disabled|read-only|read-write|placeholder-shown|default)\\b",
    inputvalue: "(checked|indeterminate|required|optional|valid|invalid|in-range|out-of-range)\\b",
    // pseudo-elements starting with single colon (:)
    pseudo_sng: "(after|before|first-letter|first-line)\\b",
    // pseudo-elements starting with double colon (::)
    pseudo_dbl: ":(after|before|first-letter|first-line|selection|placeholder|-webkit-[-a-zA-Z0-9]{2,})\\b"
  }, Patterns = {
    // pseudo-classes
    treestruct: RegExp("^:(?:" + GROUPS.treestruct + ")(.*)", "i"),
    structural: RegExp("^:(?:" + GROUPS.structural + ")(.*)", "i"),
    linguistic: RegExp("^:(?:" + GROUPS.linguistic + ")(.*)", "i"),
    useraction: RegExp("^:(?:" + GROUPS.useraction + ")(.*)", "i"),
    inputstate: RegExp("^:(?:" + GROUPS.inputstate + ")(.*)", "i"),
    inputvalue: RegExp("^:(?:" + GROUPS.inputvalue + ")(.*)", "i"),
    locationpc: RegExp("^:(?:" + GROUPS.locationpc + ")(.*)", "i"),
    logicalsel: RegExp("^:(?:" + GROUPS.logicalsel + ")(.*)", "i"),
    pseudo_dbl: RegExp("^:(?:" + GROUPS.pseudo_dbl + ")(.*)", "i"),
    pseudo_sng: RegExp("^:(?:" + GROUPS.pseudo_sng + ")(.*)", "i"),
    // combinator symbols
    children: RegExp("^" + WSP + "?\\>" + WSP + "?(.*)"),
    adjacent: RegExp("^" + WSP + "?\\+" + WSP + "?(.*)"),
    relative: RegExp("^" + WSP + "?\\~" + WSP + "?(.*)"),
    ancestor: RegExp("^" + WSP + "+(.*)"),
    // universal & namespace
    universal: RegExp("^\\*(.*)"),
    namespace: RegExp("^(\\w+|\\*)?\\|(.*)")
  }, RTL = RegExp("^[\\u0591-\\u08ff\\ufb1d-\\ufdfd\\ufe70-\\ufefc ]+$"), qsNotArgs = "Not enough arguments", qsInvalid = " is not a valid selector", reNthElem = RegExp("(:nth(?:-last)?-child)", "i"), reNthType = RegExp("(:nth(?:-last)?-of-type)", "i"), reOptimizer, reValidator, Config = {
    IDS_DUPES: true,
    MIXEDCASE: true,
    LOGERRORS: true,
    VERBOSITY: true
  }, NAMESPACE, QUIRKS_MODE, HTML_DOCUMENT, ATTR_STD_OPS = {
    "=": 1,
    "^=": 1,
    "$=": 1,
    "|=": 1,
    "*=": 1,
    "~=": 1
  }, HTML_TABLE = {
    "accept": 1,
    "accept-charset": 1,
    "align": 1,
    "alink": 1,
    "axis": 1,
    "bgcolor": 1,
    "charset": 1,
    "checked": 1,
    "clear": 1,
    "codetype": 1,
    "color": 1,
    "compact": 1,
    "declare": 1,
    "defer": 1,
    "dir": 1,
    "direction": 1,
    "disabled": 1,
    "enctype": 1,
    "face": 1,
    "frame": 1,
    "hreflang": 1,
    "http-equiv": 1,
    "lang": 1,
    "language": 1,
    "link": 1,
    "media": 1,
    "method": 1,
    "multiple": 1,
    "nohref": 1,
    "noresize": 1,
    "noshade": 1,
    "nowrap": 1,
    "readonly": 1,
    "rel": 1,
    "rev": 1,
    "rules": 1,
    "scope": 1,
    "scrolling": 1,
    "selected": 1,
    "shape": 1,
    "target": 1,
    "text": 1,
    "type": 1,
    "valign": 1,
    "valuetype": 1,
    "vlink": 1
  }, Combinators = {}, Selectors = {}, Operators = {
    "=": {
      p1: "^",
      p2: "$",
      p3: "true"
    },
    "^=": {
      p1: "^",
      p2: "",
      p3: "true"
    },
    "$=": {
      p1: "",
      p2: "$",
      p3: "true"
    },
    "*=": {
      p1: "",
      p2: "",
      p3: "true"
    },
    "|=": {
      p1: "^",
      p2: "(-|$)",
      p3: "true"
    },
    "~=": {
      p1: "(^|\\s)",
      p2: "(\\s|$)",
      p3: "true"
    }
  }, concatCall = function(nodes, callback) {
    var i2 = 0, l2 = nodes.length, list = Array(l2);
    while (l2 > i2) {
      if (false === callback(list[i2] = nodes[i2]))
        break;
      ++i2;
    }
    return list;
  }, concatList = function(list, nodes) {
    var i2 = -1, l2 = nodes.length;
    while (l2--) {
      list[list.length] = nodes[++i2];
    }
    return list;
  }, documentOrder = function(a, b) {
    if (!hasDupes && a === b) {
      hasDupes = true;
      return 0;
    }
    return a.compareDocumentPosition(b) & 4 ? -1 : 1;
  }, hasDupes = false, unique = function(nodes) {
    var i2 = 0, j = -1, l2 = nodes.length + 1, list = [];
    while (--l2) {
      if (nodes[i2++] === nodes[i2])
        continue;
      list[++j] = nodes[i2 - 1];
    }
    hasDupes = false;
    return list;
  }, hasMixedCaseTagNames = function(context) {
    var ns, api = "getElementsByTagNameNS";
    context = context.ownerDocument || context;
    ns = context.documentElement.namespaceURI || "http://www.w3.org/1999/xhtml";
    return context[api]("*", "*").length - context[api](ns, "*").length > 0;
  }, switchContext = function(context, force) {
    var oldDoc = doc;
    doc = context.ownerDocument || context;
    if (force || oldDoc !== doc) {
      root = doc.documentElement;
      HTML_DOCUMENT = isHTML(doc);
      QUIRKS_MODE = HTML_DOCUMENT && doc.compatMode.indexOf("CSS") < 0;
      NAMESPACE = root && root.namespaceURI;
      Snapshot.doc = doc;
      Snapshot.root = root;
    }
    return Snapshot.from = context;
  }, codePointToUTF16 = function(codePoint) {
    if (codePoint < 1 || codePoint > 1114111 || codePoint > 55295 && codePoint < 57344) {
      return "\\ufffd";
    }
    if (codePoint < 65536) {
      var lowHex = "000" + codePoint.toString(16);
      return "\\u" + lowHex.substr(lowHex.length - 4);
    }
    return "\\u" + ((codePoint - 65536 >> 10) + 55296).toString(16) + "\\u" + ((codePoint - 65536) % 1024 + 56320).toString(16);
  }, stringFromCodePoint = function(codePoint) {
    if (codePoint < 1 || codePoint > 1114111 || codePoint > 55295 && codePoint < 57344) {
      return "\uFFFD";
    }
    if (codePoint < 65536) {
      return String.fromCharCode(codePoint);
    }
    return String.fromCodePoint ? String.fromCodePoint(codePoint) : String.fromCharCode(
      (codePoint - 65536 >> 10) + 55296,
      (codePoint - 65536) % 1024 + 56320
    );
  }, convertEscapes = function(str2) {
    return REX.HasEscapes.test(str2) ? str2.replace(
      REX.FixEscapes,
      function(substring, p1, p2) {
        return p2 ? "\\" + p2 : (
          // javascript strings are UTF-16 encoded
          REX.HexNumbers.test(p1) ? codePointToUTF16(parseInt(p1, 16)) : (
            // \' \"
            REX.EscOrQuote.test(p1) ? substring : (
              // \g \h \. \# etc
              p1
            )
          )
        );
      }
    ) : str2;
  }, unescapeIdentifier = function(str2) {
    return REX.HasEscapes.test(str2) ? str2.replace(
      REX.FixEscapes,
      function(substring, p1, p2) {
        return p2 ? p2 : (
          // javascript strings are UTF-16 encoded
          REX.HexNumbers.test(p1) ? stringFromCodePoint(parseInt(p1, 16)) : (
            // \' \"
            REX.EscOrQuote.test(p1) ? substring : (
              // \g \h \. \# etc
              p1
            )
          )
        );
      }
    ) : str2;
  }, method = {
    "#": "getElementById",
    "*": "getElementsByTagNameNS",
    ".": "getElementsByClassName"
  }, compat = {
    "#": function(c, n) {
      REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));
      return function(e, f) {
        return byId(n, c);
      };
    },
    "*": function(c, n) {
      REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));
      return function(e, f) {
        return byTag(n, c);
      };
    },
    ".": function(c, n) {
      REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));
      return function(e, f) {
        return byClass(n, c);
      };
    }
  }, byIdRaw = function(id, context) {
    var node = context, nodes = [], next = node.firstElementChild;
    while (node = next) {
      node.id == id && (nodes[nodes.length] = node);
      if (next = node.firstElementChild || node.nextElementSibling)
        continue;
      while (!next && (node = node.parentElement) && node !== context) {
        next = node.nextElementSibling;
      }
    }
    return nodes;
  }, byId = function(id, context) {
    var e, nodes, api = method["#"];
    if (Config.IDS_DUPES === false) {
      if (api in context) {
        return (e = context[api](id)) ? [e] : none;
      }
    } else {
      if ("all" in context) {
        if (e = context.all[id]) {
          if (e.nodeType == 1)
            return e.getAttribute("id") != id ? [] : [e];
          else if (id == "length")
            return (e = context[api](id)) ? [e] : none;
          for (i = 0, l = e.length, nodes = []; l > i; ++i) {
            if (e[i].id == id)
              nodes[nodes.length] = e[i];
          }
          return nodes && nodes.length ? nodes : [nodes];
        } else
          return none;
      }
    }
    return byIdRaw(id, context);
  }, byTag = function(tag, context) {
    var e, nodes, api = method["*"];
    if (api in context) {
      return slice2.call(context[api]("*", tag));
    } else {
      tag = tag.toLowerCase();
      if (e = context.firstElementChild) {
        if (!(e.nextElementSibling || tag == "*" || e.localName == tag)) {
          return slice2.call(e[api]("*", tag));
        } else {
          nodes = [];
          do {
            if (tag == "*" || e.localName == tag)
              nodes[nodes.length] = e;
            concatList(nodes, e[api]("*", tag));
          } while (e = e.nextElementSibling);
        }
      } else
        nodes = none;
    }
    return nodes;
  }, byClass = function(cls, context) {
    var e, nodes, api = method["."], reCls;
    if (api in context) {
      return slice2.call(context[api](cls));
    } else {
      if (e = context.firstElementChild) {
        reCls = RegExp("(^|\\s)" + cls + "(\\s|$)", QUIRKS_MODE ? "i" : "");
        if (!(e.nextElementSibling || reCls.test(e.className))) {
          return slice2.call(e[api](cls));
        } else {
          nodes = [];
          do {
            if (reCls.test(e.className))
              nodes[nodes.length] = e;
            concatList(nodes, e[api](cls));
          } while (e = e.nextElementSibling);
        }
      } else
        nodes = none;
    }
    return nodes;
  }, hasAttributeNS = function(e, name) {
    var i2, l2, attr = e.getAttributeNames();
    name = RegExp(":?" + name + "$", HTML_DOCUMENT ? "i" : "");
    for (i2 = 0, l2 = attr.length; l2 > i2; ++i2) {
      if (name.test(attr[i2]))
        return true;
    }
    return false;
  }, nthElement = function() {
    var idx = 0, len = 0, set2 = 0, parent = void 0, parents = Array(), nodes = Array();
    return function(element, dir) {
      if (dir == 2) {
        idx = 0;
        len = 0;
        set2 = 0;
        nodes.length = 0;
        parents.length = 0;
        parent = void 0;
        return -1;
      }
      var e, i2, j, k, l2;
      if (parent === element.parentElement) {
        i2 = set2;
        j = idx;
        l2 = len;
      } else {
        l2 = parents.length;
        parent = element.parentElement;
        for (i2 = -1, j = 0, k = l2 - 1; l2 > j; ++j, --k) {
          if (parents[j] === parent) {
            i2 = j;
            break;
          }
          if (parents[k] === parent) {
            i2 = k;
            break;
          }
        }
        if (i2 < 0) {
          parents[i2 = l2] = parent;
          l2 = 0;
          nodes[i2] = Array();
          e = parent && parent.firstElementChild || element;
          while (e) {
            nodes[i2][l2] = e;
            if (e === element)
              j = l2;
            e = e.nextElementSibling;
            ++l2;
          }
          set2 = i2;
          idx = 0;
          len = l2;
          if (l2 < 2)
            return l2;
        } else {
          l2 = nodes[i2].length;
          set2 = i2;
        }
      }
      if (element !== nodes[i2][j] && element !== nodes[i2][j = 0]) {
        for (j = 0, e = nodes[i2], k = l2 - 1; l2 > j; ++j, --k) {
          if (e[j] === element) {
            break;
          }
          if (e[k] === element) {
            j = k;
            break;
          }
        }
      }
      idx = j + 1;
      len = l2;
      return dir ? l2 - j : idx;
    };
  }(), nthOfType = function() {
    var idx = 0, len = 0, set2 = 0, parent = void 0, parents = Array(), nodes = Array();
    return function(element, dir) {
      if (dir == 2) {
        idx = 0;
        len = 0;
        set2 = 0;
        nodes.length = 0;
        parents.length = 0;
        parent = void 0;
        return -1;
      }
      var e, i2, j, k, l2, name = element.localName;
      if (nodes[set2] && nodes[set2][name] && parent === element.parentElement) {
        i2 = set2;
        j = idx;
        l2 = len;
      } else {
        l2 = parents.length;
        parent = element.parentElement;
        for (i2 = -1, j = 0, k = l2 - 1; l2 > j; ++j, --k) {
          if (parents[j] === parent) {
            i2 = j;
            break;
          }
          if (parents[k] === parent) {
            i2 = k;
            break;
          }
        }
        if (i2 < 0 || !nodes[i2][name]) {
          parents[i2 = l2] = parent;
          nodes[i2] || (nodes[i2] = Object());
          l2 = 0;
          nodes[i2][name] = Array();
          e = parent && parent.firstElementChild || element;
          while (e) {
            if (e === element)
              j = l2;
            if (e.localName == name) {
              nodes[i2][name][l2] = e;
              ++l2;
            }
            e = e.nextElementSibling;
          }
          set2 = i2;
          idx = j;
          len = l2;
          if (l2 < 2)
            return l2;
        } else {
          l2 = nodes[i2][name].length;
          set2 = i2;
        }
      }
      if (element !== nodes[i2][name][j] && element !== nodes[i2][name][j = 0]) {
        for (j = 0, e = nodes[i2][name], k = l2 - 1; l2 > j; ++j, --k) {
          if (e[j] === element) {
            break;
          }
          if (e[k] === element) {
            j = k;
            break;
          }
        }
      }
      idx = j + 1;
      len = l2;
      return dir ? l2 - j : idx;
    };
  }(), isHTML = function(node) {
    var doc2 = node.ownerDocument || node;
    return doc2.nodeType == 9 && // contentType not in IE <= 11
    "contentType" in doc2 ? doc2.contentType.indexOf("/html") > 0 : doc2.createElement("DiV").localName == "div";
  }, configure = function(option, clear) {
    if (typeof option == "string") {
      return !!Config[option];
    }
    if (typeof option != "object") {
      return Config;
    }
    for (var i2 in option) {
      Config[i2] = !!option[i2];
    }
    if (clear) {
      matchResolvers = {};
      selectResolvers = {};
    }
    setIdentifierSyntax();
    return true;
  }, emit = function(message, proto) {
    var err;
    if (Config.VERBOSITY) {
      if (proto) {
        err = new proto(message);
      } else {
        err = new global.DOMException(message, "SyntaxError");
      }
      throw err;
    }
    if (Config.LOGERRORS && console && console.log) {
      console.log(message);
    }
  }, initialize = function(doc2) {
    setIdentifierSyntax();
    lastContext = switchContext(doc2, true);
  }, setIdentifierSyntax = function() {
    var identifier = (
      // doesn't start with a digit
      "(?=[^0-9])(?:-{2}|[a-zA-Z0-9-_]|[^\\x00-\\x9f]|\\\\[^\\r\\n\\f0-9a-fA-F]|\\\\[0-9a-fA-F]{1,6}(?:\\r\\n|\\s)?|\\\\.)+"
    ), pseudonames = "[-\\w]+", pseudoparms = "(?:[-+]?\\d*)(?:n\\s?[-+]?\\s?\\d*)", doublequote = '"[^"\\\\]*(?:\\\\.[^"\\\\]*)*(?:"|$)', singlequote = "'[^'\\\\]*(?:\\\\.[^'\\\\]*)*(?:'|$)", attrparser = identifier + "|" + doublequote + "|" + singlequote, attrvalues = "([\\x22\\x27]?)((?!\\3)*|(?:\\\\?.)*?)(?:\\3|$)", attributes = "\\[(?:\\*\\|)?" + WSP + "?(" + identifier + "(?::" + identifier + ")?)" + WSP + "?(?:(" + CFG.operators + ")" + WSP + "?(?:" + attrparser + "))?" + // attribute case sensitivity
    WSP + "?(i)?" + WSP + "?(?:\\]|$)", attrmatcher = attributes.replace(attrparser, attrvalues), pseudoclass = "(?:\\x28" + WSP + "*(?:" + pseudoparms + "?)?|(?:\\*|\\|)|(?:(?::" + pseudonames + "(?:\\x28" + pseudoparms + "?(?:\\x29|$))?|)|(?:[.#]?" + identifier + ")|(?:" + attributes + "))+|(?:" + WSP + "?," + WSP + "?)|(?:" + WSP + "?)|(?:\\x29|$))*", standardValidator = "(?=" + WSP + "?[^>+~(){}<>])(?:(?:\\*|\\|)|(?:[.#]?" + identifier + ")+|(?:" + attributes + ")+|(?:::?" + pseudonames + pseudoclass + ")|(?:" + WSP + "?" + CFG.combinators + WSP + "?)|(?:" + WSP + "?," + WSP + "?)|(?:" + WSP + "?))+";
    reOptimizer = RegExp(
      "(?:([.:#*]?)(" + identifier + ")(?::[-\\w]+|\\[[^\\]]+(?:\\]|$)|\\x28[^\\x29]+(?:\\x29|$))*)$"
    );
    reValidator = RegExp(standardValidator, "g");
    Patterns.id = RegExp("^#(" + identifier + ")(.*)");
    Patterns.tagName = RegExp("^(" + identifier + ")(.*)");
    Patterns.className = RegExp("^\\.(" + identifier + ")(.*)");
    Patterns.attribute = RegExp("^(?:" + attrmatcher + ")(.*)");
  }, F_INIT = '"use strict";return function Resolver(c,f,x,r)', S_HEAD = "var e,n,o,j=r.length-1,k=-1", M_HEAD = "var e,n,o", S_LOOP = "main:while((e=c[++k]))", N_LOOP = "main:while((e=c.item(++k)))", M_LOOP = "e=c;", S_BODY = "r[++j]=c[k];", N_BODY = "r[++j]=c.item(k);", M_BODY = "", S_TAIL = "continue main;", M_TAIL = "r=true;", S_TEST = "if(f(c[k])){break main;}", N_TEST = "if(f(c.item(k))){break main;}", M_TEST = "f(c);", S_VARS = [], M_VARS = [], compile = function(selector, mode, callback) {
    var factory2, token, head = "", loop = "", macro = "", source = "", vars = "";
    switch (mode) {
      case true:
        if (selectLambdas[selector]) {
          return selectLambdas[selector];
        }
        macro = S_BODY + (callback ? S_TEST : "") + S_TAIL;
        head = S_HEAD;
        loop = S_LOOP;
        break;
      case false:
        if (matchLambdas[selector]) {
          return matchLambdas[selector];
        }
        macro = M_BODY + (callback ? M_TEST : "") + M_TAIL;
        head = M_HEAD;
        loop = M_LOOP;
        break;
      case null:
        if (selectLambdas[selector]) {
          return selectLambdas[selector];
        }
        macro = N_BODY + (callback ? N_TEST : "") + S_TAIL;
        head = S_HEAD;
        loop = N_LOOP;
        break;
      default:
        break;
    }
    source = compileSelector(selector, macro, mode, callback, false);
    loop += mode || mode === null ? "{" + source + "}" : source;
    if (mode || mode === null && selector.includes(":nth")) {
      loop += reNthElem.test(selector) ? "s.nthElement(null, 2);" : "";
      loop += reNthType.test(selector) ? "s.nthOfType(null, 2);" : "";
    }
    if (S_VARS[0] || M_VARS[0]) {
      vars = "," + (S_VARS.join(",") || M_VARS.join(","));
      S_VARS.length = 0;
      M_VARS.length = 0;
    }
    factory2 = Function("s", F_INIT + "{" + head + vars + ";" + loop + "return r;}")(Snapshot);
    return mode || mode === null ? selectLambdas[selector] = factory2 : matchLambdas[selector] = factory2;
  }, compileSelector = function(expression, source, mode, callback, not) {
    var a, b, n, f, i2, l2, name, NS, N = not ? "!" : "", D = not ? "" : "!", compat2, expr, match2, result2, status, symbol, test, type, selector = expression, selector_string, vars;
    selector_string = mode ? lastSelected : lastMatched;
    selector = selector.replace(STD.combinator, "$1");
    while (selector) {
      symbol = STD.apimethods.test(selector) ? "|" : selector[0];
      switch (symbol) {
        case "*":
          match2 = selector.match(Patterns.universal);
          if (N == "!") {
            source = "if(" + N + "true){" + source + "}";
          }
          break;
        case "#":
          match2 = selector.match(Patterns.id);
          source = "if(" + N + "(/^" + match2[1] + '$/.test(e.getAttribute("id")))){' + source + "}";
          break;
        case ".":
          match2 = selector.match(Patterns.className);
          compat2 = (QUIRKS_MODE ? "i" : "") + '.test(e.getAttribute("class"))';
          source = "if(" + N + "(/(^|\\s)" + match2[1] + "(\\s|$)/" + compat2 + ")){" + source + "}";
          break;
        case (/[_a-z]/i.test(symbol) ? symbol : void 0):
          match2 = selector.match(Patterns.tagName);
          source = "if(" + N + "(e.localName" + (Config.MIXEDCASE || hasMixedCaseTagNames(doc) ? '=="' + match2[1].toLowerCase() + '"' : '=="' + match2[1].toUpperCase() + '"') + ")){" + source + "}";
          break;
        case "|":
          match2 = selector.match(Patterns.namespace);
          if (match2[1] == "*") {
            source = "if(" + N + "true){" + source + "}";
          } else if (!match2[1]) {
            source = "if(" + N + "(!e.namespaceURI)){" + source + "}";
          } else if (typeof match2[1] == "string" && root.prefix == match2[1]) {
            source = "if(" + N + '(e.namespaceURI=="' + NAMESPACE + '")){' + source + "}";
          } else {
            emit("'" + selector_string + "'" + qsInvalid);
          }
          break;
        case "[":
          match2 = selector.match(Patterns.attribute);
          NS = match2[0].match(STD.namespaces);
          name = match2[1];
          expr = name.split(":");
          expr = expr.length == 2 ? expr[1] : expr[0];
          if (match2[2] && !(test = Operators[match2[2]])) {
            emit("'" + selector_string + "'" + qsInvalid);
            return "";
          }
          if (match2[4] === "") {
            test = match2[2] == "~=" ? { p1: "^\\s", p2: "+$", p3: "true" } : match2[2] in ATTR_STD_OPS && match2[2] != "~=" ? { p1: "^", p2: "$", p3: "true" } : test;
          } else if (match2[2] == "~=" && match2[4].includes(" ")) {
            source = "if(" + N + "false){" + source + "}";
            break;
          } else if (match2[4]) {
            match2[4] = convertEscapes(match2[4]).replace(REX.RegExpChar, "\\$&");
          }
          type = match2[5] == "i" || HTML_DOCUMENT && HTML_TABLE[expr.toLowerCase()] ? "i" : "";
          source = "if(" + N + "(" + (!match2[2] ? NS ? 's.hasAttributeNS(e,"' + name + '")' : 'e.hasAttribute&&e.hasAttribute("' + name + '")' : !match2[4] && ATTR_STD_OPS[match2[2]] && match2[2] != "~=" ? 'e.getAttribute&&e.getAttribute("' + name + '")==""' : "(/" + test.p1 + match2[4] + test.p2 + "/" + type + ').test(e.getAttribute&&e.getAttribute("' + name + '"))==' + test.p3) + ")){" + source + "}";
          break;
        case "~":
          match2 = selector.match(Patterns.relative);
          source = "n=e;while((e=e.previousElementSibling)){" + source + "}e=n;";
          break;
        case "+":
          match2 = selector.match(Patterns.adjacent);
          source = "n=e;if((e=e.previousElementSibling)){" + source + "}e=n;";
          break;
        case "	":
        case " ":
          match2 = selector.match(Patterns.ancestor);
          source = "n=e;while((e=e.parentElement)){" + source + "}e=n;";
          break;
        case ">":
          match2 = selector.match(Patterns.children);
          source = "n=e;if((e=e.parentElement)){" + source + "}e=n;";
          break;
        case (symbol in Combinators ? symbol : void 0):
          match2[match2.length - 1] = "*";
          source = Combinators[symbol](match2) + source;
          break;
        case ":":
          if (match2 = selector.match(Patterns.structural)) {
            match2[1] = match2[1].toLowerCase();
            switch (match2[1]) {
              case "root":
                source = "if(" + N + "(e===s.root)){" + source + (mode ? "break main;" : "") + "}";
                break;
              case "empty":
                source = "n=e.firstChild;while(n&&!(/1|3/).test(n.nodeType)){n=n.nextSibling}if(" + D + "n){" + source + "}";
                break;
              case "only-child":
                source = "if(" + N + "(!e.nextElementSibling&&!e.previousElementSibling)){" + source + "}";
                break;
              case "last-child":
                source = "if(" + N + "(!e.nextElementSibling)){" + source + "}";
                break;
              case "first-child":
                source = "if(" + N + "(!e.previousElementSibling)){" + source + "}";
                break;
              case "only-of-type":
                source = "o=e.localName;n=e;while((n=n.nextElementSibling)&&n.localName!=o);if(!n){n=e;while((n=n.previousElementSibling)&&n.localName!=o);}if(" + D + "n){" + source + "}";
                break;
              case "last-of-type":
                source = "n=e;o=e.localName;while((n=n.nextElementSibling)&&n.localName!=o);if(" + D + "n){" + source + "}";
                break;
              case "first-of-type":
                source = "n=e;o=e.localName;while((n=n.previousElementSibling)&&n.localName!=o);if(" + D + "n){" + source + "}";
                break;
              default:
                emit("'" + selector_string + "'" + qsInvalid);
                break;
            }
          } else if (match2 = selector.match(Patterns.treestruct)) {
            match2[1] = match2[1].toLowerCase();
            switch (match2[1]) {
              case "nth-child":
              case "nth-of-type":
              case "nth-last-child":
              case "nth-last-of-type":
                expr = /-of-type/i.test(match2[1]);
                if (match2[1] && match2[2]) {
                  type = /last/i.test(match2[1]);
                  if (match2[2] == "n") {
                    source = "if(" + N + "true){" + source + "}";
                    break;
                  } else if (match2[2] == "1") {
                    test = type ? "next" : "previous";
                    source = expr ? "n=e;o=e.localName;while((n=n." + test + "ElementSibling)&&n.localName!=o);if(" + D + "n){" + source + "}" : "if(" + N + "!e." + test + "ElementSibling){" + source + "}";
                    break;
                  } else if (match2[2] == "even" || match2[2] == "2n0" || match2[2] == "2n+0" || match2[2] == "2n") {
                    test = "n%2==0";
                  } else if (match2[2] == "odd" || match2[2] == "2n1" || match2[2] == "2n+1") {
                    test = "n%2==1";
                  } else {
                    f = /n/i.test(match2[2]);
                    n = match2[2].split("n");
                    a = parseInt(n[0], 10) || 0;
                    b = parseInt(n[1], 10) || 0;
                    if (n[0] == "-") {
                      a = -1;
                    }
                    if (n[0] == "+") {
                      a = 1;
                    }
                    test = (b ? "(n" + (b > 0 ? "-" : "+") + Math.abs(b) + ")" : "n") + "%" + a + "==0";
                    test = a >= 1 ? f ? "n>" + (b - 1) + (Math.abs(a) != 1 ? "&&" + test : "") : "n==" + a : a <= -1 ? f ? "n<" + (b + 1) + (Math.abs(a) != 1 ? "&&" + test : "") : "n==" + a : a === 0 ? n[0] ? "n==" + b : "n>" + (b - 1) : "false";
                  }
                  expr = expr ? "OfType" : "Element";
                  type = type ? "true" : "false";
                  source = "n=s.nth" + expr + "(e," + type + ");if(" + N + "(" + test + ")){" + source + "}";
                } else {
                  emit("'" + selector_string + "'" + qsInvalid);
                }
                break;
              default:
                emit("'" + selector_string + "'" + qsInvalid);
                break;
            }
          } else if (match2 = selector.match(Patterns.logicalsel)) {
            match2[1] = match2[1].toLowerCase();
            switch (match2[1]) {
              case "is":
              case "where":
              case "matches":
                expr = match2[2].replace(REX.CommaGroup, ",").replace(REX.TrimSpaces, "");
                source = 'if(s.match("' + expr.replace(/\x22/g, '\\"') + '",e)){' + source + "}";
                break;
              case "not":
                expr = match2[2].replace(REX.CommaGroup, ",").replace(REX.TrimSpaces, "");
                source = 'if(!s.match("' + expr.replace(/\x22/g, '\\"') + '",e)){' + source + "}";
                break;
              default:
                emit("'" + selector_string + "'" + qsInvalid);
                break;
            }
          } else if (match2 = selector.match(Patterns.linguistic)) {
            match2[1] = match2[1].toLowerCase();
            switch (match2[1]) {
              case "dir":
                source = "var p;if(" + N + "((/" + match2[2] + '/i.test(e.dir))||(p=s.ancestor("[dir]", e))&&(/' + match2[2] + '/i.test(p.dir))||(e.dir==""||e.dir=="auto")&&(' + (match2[2] == "ltr" ? "!" : "") + RTL + ".test(e.textContent)))){" + source + "};";
                break;
              case "lang":
                expr = "(?:^|-)" + match2[2] + "(?:-|$)";
                source = "var p;if(" + N + '((e.isConnected&&(e.lang==""&&(p=s.ancestor("[lang]",e)))&&(p.lang=="' + match2[2] + '")||/' + expr + "/i.test(e.lang)))){" + source + "};";
                break;
              default:
                emit("'" + selector_string + "'" + qsInvalid);
                break;
            }
          } else if (match2 = selector.match(Patterns.locationpc)) {
            match2[1] = match2[1].toLowerCase();
            switch (match2[1]) {
              case "any-link":
                source = "if(" + N + '(/^a|area$/i.test(e.localName)&&e.hasAttribute("href")||e.visited)){' + source + "}";
                break;
              case "link":
                source = "if(" + N + '(/^a|area$/i.test(e.localName)&&e.hasAttribute("href"))){' + source + "}";
                break;
              case "visited":
                source = "if(" + N + '(/^a|area$/i.test(e.localName)&&e.hasAttribute("href")&&e.visited)){' + source + "}";
                break;
              case "target":
                source = "if(" + N + "((s.doc.compareDocumentPosition(e)&16)&&s.doc.location.hash&&e.id==s.doc.location.hash.slice(1))){" + source + "}";
                break;
              default:
                emit("'" + selector_string + "'" + qsInvalid);
                break;
            }
          } else if (match2 = selector.match(Patterns.useraction)) {
            match2[1] = match2[1].toLowerCase();
            switch (match2[1]) {
              case "hover":
                source = "hasFocus" in doc && doc.hasFocus() ? "if(" + N + "(e===s.doc.hoverElement)){" + source + "}" : "if(" + D + "true){" + source + "}";
                break;
              case "active":
                source = "hasFocus" in doc && doc.hasFocus() ? "if(" + N + "(e===s.doc.activeElement)){" + source + "}" : "if(" + D + "true){" + source + "}";
                break;
              case "focus":
                source = "hasFocus" in doc ? "if(" + N + '(e===s.doc.activeElement&&s.doc.hasFocus()&&(e.type||e.href||typeof e.tabIndex=="number"))){' + source + "}" : "if(" + N + "(e===s.doc.activeElement&&(e.type||e.href))){" + source + "}";
                break;
              case "focus-within":
                source = "hasFocus" in doc ? "n=s.doc.activeElement;while(e){if(e===n||e.parentNode===n)break;}if(" + N + '(e===n&&s.doc.hasFocus()&&(e.type||e.href||typeof e.tabIndex=="number"))){' + source + "}" : source;
                break;
              default:
                emit("'" + selector_string + "'" + qsInvalid);
                break;
            }
          } else if (match2 = selector.match(Patterns.inputstate)) {
            match2[1] = match2[1].toLowerCase();
            switch (match2[1]) {
              case "enabled":
                source = "if(" + N + '(("form" in e||/^optgroup$/i.test(e.localName))&&"disabled" in e &&e.disabled===false)){' + source + "}";
                break;
              case "disabled":
                source = "if(" + N + '(("form" in e||/^optgroup$/i.test(e.localName))&&"disabled" in e&&(e.disabled===true||(n=s.ancestor("fieldset",e))&&(n=s.first("legend",n))&&!n.contains(e)))){' + source + "}";
                break;
              case "read-only":
                source = "if(" + N + '((/^textarea$/i.test(e.localName)&&(e.readOnly||e.disabled))||("|password|text|".includes("|"+e.type+"|")&&e.readOnly))){' + source + "}";
                break;
              case "read-write":
                source = "if(" + N + '(((/^textarea$/i.test(e.localName)&&!e.readOnly&&!e.disabled)||("|password|text|".includes("|"+e.type+"|")&&!e.readOnly&&!e.disabled))||(e.hasAttribute("contenteditable")||(s.doc.designMode=="on")))){' + source + "}";
                break;
              case "placeholder-shown":
                source = "if(" + N + '((/^input|textarea$/i.test(e.localName))&&e.hasAttribute("placeholder")&&("|textarea|password|number|search|email|text|tel|url|".includes("|"+e.type+"|"))&&(!s.match(":focus",e)))){' + source + "}";
                break;
              case "default":
                source = "if(" + N + '("form" in e && e.form)){var x=0;n=[];if(e.type=="image")n=e.form.getElementsByTagName("input");if(e.type=="submit")n=e.form.elements;while(n[x]&&e!==n[x]){if(n[x].type=="image")break;if(n[x].type=="submit")break;x++;}}if(' + N + '(e.form&&(e===n[x]&&"|image|submit|".includes("|"+e.type+"|"))||((/^option$/i.test(e.localName))&&e.defaultSelected)||(("|radio|checkbox|".includes("|"+e.type+"|"))&&e.defaultChecked))){' + source + "}";
                break;
              default:
                emit("'" + selector_string + "'" + qsInvalid);
                break;
            }
          } else if (match2 = selector.match(Patterns.inputvalue)) {
            match2[1] = match2[1].toLowerCase();
            switch (match2[1]) {
              case "checked":
                source = "if(" + N + '(/^input$/i.test(e.localName)&&("|radio|checkbox|".includes("|"+e.type+"|")&&e.checked)||(/^option$/i.test(e.localName)&&(e.selected||e.checked)))){' + source + "}";
                break;
              case "indeterminate":
                source = "if(" + N + '(/^progress$/i.test(e.localName)&&!e.hasAttribute("value"))||(/^input$/i.test(e.localName)&&("checkbox"==e.type&&e.indeterminate)||("radio"==e.type&&e.name&&!s.first("input[name="+e.name+"]:checked",e.form)))){' + source + "}";
                break;
              case "required":
                source = "if(" + N + "(/^input|select|textarea$/i.test(e.localName)&&e.required)){" + source + "}";
                break;
              case "optional":
                source = "if(" + N + "(/^input|select|textarea$/i.test(e.localName)&&!e.required)){" + source + "}";
                break;
              case "invalid":
                source = "if(" + N + '(((/^form$/i.test(e.localName)&&!e.noValidate)||(e.willValidate&&!e.formNoValidate))&&!e.checkValidity())||(/^fieldset$/i.test(e.localName)&&s.first(":invalid",e))){' + source + "}";
                break;
              case "valid":
                source = "if(" + N + '(((/^form$/i.test(e.localName)&&!e.noValidate)||(e.willValidate&&!e.formNoValidate))&&e.checkValidity())||(/^fieldset$/i.test(e.localName)&&s.first(":valid",e))){' + source + "}";
                break;
              case "in-range":
                source = "if(" + N + '(/^input$/i.test(e.localName))&&(e.willValidate&&!e.formNoValidate)&&(!e.validity.rangeUnderflow&&!e.validity.rangeOverflow)&&("|date|datetime-local|month|number|range|time|week|".includes("|"+e.type+"|"))&&("range"==e.type||e.getAttribute("min")||e.getAttribute("max"))){' + source + "}";
                break;
              case "out-of-range":
                source = "if(" + N + '(/^input$/i.test(e.localName))&&(e.willValidate&&!e.formNoValidate)&&(e.validity.rangeUnderflow||e.validity.rangeOverflow)&&("|date|datetime-local|month|number|range|time|week|".includes("|"+e.type+"|"))&&("range"==e.type||e.getAttribute("min")||e.getAttribute("max"))){' + source + "}";
                break;
              default:
                emit("'" + selector_string + "'" + qsInvalid);
                break;
            }
          } else if (match2 = selector.match(Patterns.pseudo_sng)) {
            source = 'if(e.element&&e.type.toLowerCase()==":' + match2[0].toLowerCase() + '"){e=e.element;' + source + "}";
          } else if (match2 = selector.match(Patterns.pseudo_dbl)) {
            source = 'if(e.element&&e.type.toLowerCase()=="' + match2[0].toLowerCase() + '"){e=e.element;' + source + "}";
          } else {
            expr = false;
            status = false;
            for (expr in Selectors) {
              if (match2 = selector.match(Selectors[expr].Expression)) {
                result2 = Selectors[expr].Callback(match2, source, mode, callback);
                if ("match" in result2) {
                  match2 = result2.match;
                }
                vars = result2.modvar;
                if (mode) {
                  vars && S_VARS.indexOf(vars) < 0 && (S_VARS[S_VARS.length] = vars);
                } else {
                  vars && M_VARS.indexOf(vars) < 0 && (M_VARS[M_VARS.length] = vars);
                }
                source = result2.source;
                status = result2.status;
                if (status) {
                  break;
                }
              }
            }
            if (!status) {
              emit("unknown pseudo-class selector '" + selector + "'");
              return "";
            }
            if (!expr) {
              emit("unknown token in selector '" + selector + "'");
              return "";
            }
          }
          break;
        default:
          emit("'" + selector_string + "'" + qsInvalid);
          break;
      }
      if (!match2) {
        emit("'" + selector_string + "'" + qsInvalid);
        return "";
      }
      selector = match2.pop();
    }
    return source;
  }, makeref = function(selectors, element) {
    return selectors.replace(
      /:scope/ig,
      element.localName + (element.id ? "#" + element.id : "") + (element.className ? "." + element.classList[0] : "")
    );
  }, ancestor = function _closest2(selectors, element, callback) {
    if (/:scope/i.test(selectors)) {
      selectors = makeref(selectors, element);
    }
    while (element) {
      if (match(selectors, element, callback))
        break;
      element = element.parentElement;
    }
    return element;
  }, match_assert = function(f, element, callback) {
    for (var i2 = 0, l2 = f.length, r = false; l2 > i2; ++i2)
      f[i2](element, callback, null, false) && (r = true);
    return r;
  }, match_collect = function(selectors, callback) {
    for (var i2 = 0, l2 = selectors.length, f = []; l2 > i2; ++i2)
      f[i2] = compile(selectors[i2], false, callback);
    return { factory: f };
  }, match = function _matches2(selectors, element, callback) {
    var expressions, parsed;
    if (element && matchResolvers[selectors]) {
      return match_assert(matchResolvers[selectors].factory, element, callback);
    }
    lastMatched = selectors;
    if (arguments.length === 0) {
      emit(qsNotArgs, TypeError);
      return Config.VERBOSITY ? void 0 : false;
    } else if (arguments[0] === "") {
      emit("''" + qsInvalid);
      return Config.VERBOSITY ? void 0 : false;
    }
    if (typeof selectors != "string") {
      selectors = "" + selectors;
    }
    if (/:scope/i.test(selectors)) {
      selectors = makeref(selectors, element);
    }
    parsed = selectors.replace(/\x00|\\$/g, "\uFFFD").replace(REX.CombineWSP, " ").replace(REX.PseudosWSP, "$1").replace(REX.TabCharWSP, "	").replace(REX.CommaGroup, ",").replace(REX.TrimSpaces, "");
    if ((expressions = parsed.match(reValidator)) && expressions.join("") == parsed) {
      expressions = parsed.match(REX.SplitGroup);
      if (parsed[parsed.length - 1] == ",") {
        emit(qsInvalid);
        return Config.VERBOSITY ? void 0 : false;
      }
    } else {
      emit("'" + selectors + "'" + qsInvalid);
      return Config.VERBOSITY ? void 0 : false;
    }
    matchResolvers[selectors] = match_collect(expressions, callback);
    return match_assert(matchResolvers[selectors].factory, element, callback);
  }, first = function _querySelector2(selectors, context, callback) {
    if (arguments.length === 0) {
      emit(qsNotArgs, TypeError);
    }
    return select(
      selectors,
      context,
      typeof callback == "function" ? function firstMatch(element) {
        callback(element);
        return false;
      } : function firstMatch() {
        return false;
      }
    )[0] || null;
  }, select = function _querySelectorAll2(selectors, context, callback) {
    var expressions, nodes, parsed, resolver;
    context || (context = doc);
    if (selectors) {
      if (resolver = selectResolvers[selectors]) {
        if (resolver.context === context && resolver.callback === callback) {
          var f = resolver.factory, h = resolver.htmlset, n = resolver.nodeset, nodes = [];
          if (n.length > 1) {
            for (var i2 = 0, l2 = n.length, list; l2 > i2; ++i2) {
              list = compat[n[i2][0]](context, n[i2].slice(1))();
              if (f[i2] !== null) {
                f[i2](list, callback, context, nodes);
              } else {
                nodes = nodes.concat(list);
              }
            }
            if (l2 > 1 && nodes.length > 1) {
              nodes.sort(documentOrder);
              hasDupes && (nodes = unique(nodes));
            }
          } else {
            if (f[0]) {
              nodes = f[0](h[0](), callback, context, nodes);
            } else {
              nodes = h[0]();
            }
          }
          return typeof callback == "function" ? concatCall(nodes, callback) : nodes;
        }
      }
    }
    lastSelected = selectors;
    if (arguments.length === 0) {
      emit(qsNotArgs, TypeError);
      return Config.VERBOSITY ? void 0 : none;
    } else if (arguments[0] === "") {
      emit("''" + qsInvalid);
      return Config.VERBOSITY ? void 0 : none;
    } else if (lastContext !== context) {
      lastContext = switchContext(context);
    }
    if (typeof selectors != "string") {
      selectors = "" + selectors;
    }
    if (/:scope/i.test(selectors)) {
      selectors = makeref(selectors, context);
    }
    parsed = selectors.replace(/\x00|\\$/g, "\uFFFD").replace(REX.CombineWSP, " ").replace(REX.PseudosWSP, "$1").replace(REX.TabCharWSP, "	").replace(REX.CommaGroup, ",").replace(REX.TrimSpaces, "");
    if ((expressions = parsed.match(reValidator)) && expressions.join("") == parsed) {
      expressions = parsed.match(REX.SplitGroup);
      if (parsed[parsed.length - 1] == ",") {
        emit(qsInvalid);
        return Config.VERBOSITY ? void 0 : false;
      }
    } else {
      emit("'" + selectors + "'" + qsInvalid);
      return Config.VERBOSITY ? void 0 : false;
    }
    selectResolvers[selectors] = collect(expressions, context, callback);
    nodes = selectResolvers[selectors].results;
    return typeof callback == "function" ? concatCall(nodes, callback) : nodes;
  }, optimize = function(selector, token) {
    var index = token.index, length = token[1].length + token[2].length;
    return selector.slice(0, index) + (" >+~".indexOf(selector.charAt(index - 1)) > -1 ? ":[".indexOf(selector.charAt(index + length + 1)) > -1 ? "*" : "" : "") + selector.slice(index + length - (token[1] == "*" ? 1 : 0));
  }, collect = function(selectors, context, callback) {
    var i2, l2, seen = {}, token = ["", "*", "*"], optimized = selectors, factory2 = [], htmlset = [], nodeset = [], results = [], type;
    for (i2 = 0, l2 = selectors.length; l2 > i2; ++i2) {
      if (!seen[selectors[i2]] && (seen[selectors[i2]] = true)) {
        type = selectors[i2].match(reOptimizer);
        if (type && type[1] != ":" && (token = type)) {
          token[1] || (token[1] = "*");
          optimized[i2] = optimize(optimized[i2], token);
        } else {
          token = ["", "*", "*"];
        }
      }
      nodeset[i2] = token[1] + token[2];
      htmlset[i2] = compat[token[1]](context, token[2]);
      factory2[i2] = compile(optimized[i2], true, null);
      factory2[i2] ? factory2[i2](htmlset[i2](), callback, context, results) : result.concat(htmlset[i2]());
    }
    if (l2 > 1) {
      results.sort(documentOrder);
      hasDupes && (results = unique(results));
    }
    return {
      callback,
      context,
      factory: factory2,
      htmlset,
      nodeset,
      results
    };
  }, _closest, _matches, _querySelector, _querySelectorAll, install = function(all) {
    _closest = Element.prototype.closest;
    _matches = Element.prototype.matches;
    _querySelector = Document.prototype.querySelector;
    _querySelectorAll = Document.prototype.querySelectorAll;
    Element.prototype.closest = function closest2() {
      var ctor = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
      if (!("nodeType" in this)) {
        emit("'closest' called on an object that does not implement interface " + ctor + ".", TypeError);
      }
      return arguments.length < 1 ? ancestor.apply(this, []) : arguments.length < 2 ? ancestor.apply(this, [arguments[0], this]) : ancestor.apply(this, [arguments[0], this, typeof arguments[1] == "function" ? arguments[1] : void 0]);
    };
    Element.prototype.matches = function matches() {
      var ctor = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
      if (!("nodeType" in this)) {
        emit("'matches' called on an object that does not implement interface " + ctor + ".", TypeError);
      }
      return arguments.length < 1 ? match.apply(this, []) : arguments.length < 2 ? match.apply(this, [arguments[0], this]) : match.apply(this, [arguments[0], this, typeof arguments[1] == "function" ? arguments[1] : void 0]);
    };
    Element.prototype.querySelector = Document.prototype.querySelector = DocumentFragment.prototype.querySelector = function querySelector() {
      var ctor = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
      if (!("nodeType" in this)) {
        emit("'querySelector' called on an object that does not implement interface " + ctor + ".", TypeError);
      }
      return arguments.length < 1 ? first.apply(this, []) : arguments.length < 2 ? first.apply(this, [arguments[0], this]) : first.apply(this, [arguments[0], this, typeof arguments[1] == "function" ? arguments[1] : void 0]);
    };
    Element.prototype.querySelectorAll = Document.prototype.querySelectorAll = DocumentFragment.prototype.querySelectorAll = function querySelectorAll() {
      var ctor = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
      if (!("nodeType" in this)) {
        emit("'querySelectorAll' called on an object that does not implement interface " + ctor + ".", TypeError);
      }
      return arguments.length < 1 ? select.apply(this, []) : arguments.length < 2 ? select.apply(this, [arguments[0], this]) : select.apply(this, [arguments[0], this, typeof arguments[1] == "function" ? arguments[1] : void 0]);
    };
    if (all) {
      document.addEventListener("load", function(e) {
        var c, d, r, s, t = e.target;
        if (/iframe/i.test(t.localName)) {
          c = "(" + Export + ")(this, " + Factory + ");";
          d = t.contentDocument;
          s = d.createElement("script");
          s.textContent = c + "NW.Dom.install()";
          r = d.documentElement;
          r.removeChild(r.insertBefore(s, r.firstChild));
        }
      }, true);
    }
  }, uninstall = function() {
    Element.prototype.closest = _closest;
    Element.prototype.matches = _matches;
    Element.prototype.querySelector = Document.prototype.querySelector = DocumentFragment.prototype.querySelector = _querySelector;
    Element.prototype.querySelectorAll = Document.prototype.querySelectorAll = DocumentFragment.prototype.querySelectorAll = _querySelectorAll;
  }, none = Array(), lastContext, lastMatched, lastSelected, matchLambdas = {}, selectLambdas = {}, matchResolvers = {}, selectResolvers = {}, Snapshot = {
    doc,
    from: doc,
    root,
    byTag,
    first,
    match,
    ancestor,
    nthOfType,
    nthElement,
    hasAttributeNS
  }, Dom = {
    // exported cache objects
    lastMatched,
    lastSelected,
    matchLambdas,
    selectLambdas,
    matchResolvers,
    selectResolvers,
    // exported compiler macros
    CFG,
    M_BODY,
    S_BODY,
    M_TEST,
    S_TEST,
    // exported engine methods
    byId,
    byTag,
    byClass,
    match,
    first,
    select,
    closest: ancestor,
    compile,
    configure,
    emit,
    Config,
    Snapshot,
    Version: version,
    install,
    uninstall,
    Operators,
    Selectors,
    // register a new selector combinator symbol and its related function resolver
    registerCombinator: function(combinator, resolver) {
      var i2 = 0, l2 = combinator.length, symbol;
      for (; l2 > i2; ++i2) {
        if (combinator[i2] != "=") {
          symbol = combinator[i2];
          break;
        }
      }
      if (CFG.combinators.indexOf(symbol) < 0) {
        CFG.combinators = CFG.combinators.replace("](", symbol + "](");
        CFG.combinators = CFG.combinators.replace("])", symbol + "])");
        Combinators[combinator] = resolver;
        setIdentifierSyntax();
      } else {
        console.warn("Warning: the '" + combinator + "' combinator is already registered.");
      }
    },
    // register a new attribute operator symbol and its related function resolver
    registerOperator: function(operator, resolver) {
      var i2 = 0, l2 = operator.length, symbol;
      for (; l2 > i2; ++i2) {
        if (operator[i2] != "=") {
          symbol = operator[i2];
          break;
        }
      }
      if (CFG.operators.indexOf(symbol) < 0 && !Operators[operator]) {
        CFG.operators = CFG.operators.replace("]=", symbol + "]=");
        Operators[operator] = resolver;
        setIdentifierSyntax();
      } else {
        console.warn("Warning: the '" + operator + "' operator is already registered.");
      }
    },
    // register a new selector symbol and its related function resolver
    registerSelector: function(name, rexp, func2) {
      Selectors[name] || (Selectors[name] = {
        Expression: rexp,
        Callback: func2
      });
    }
  };
  initialize(doc);
  return Dom;
}

// https://deno.land/x/deno_dom@v0.1.43/src/dom/selectors/nwsapi-types.ts
var DOM = nwsapi_default;

// https://deno.land/x/deno_dom@v0.1.43/src/dom/selectors/sizzle.js
var sizzle_default = (document2) => {
  const sizzleWindow = {
    document: document2
  };
  SetupSizzle(sizzleWindow);
  const { Sizzle } = sizzleWindow;
  return {
    first(selectors, context) {
      return Sizzle(selectors, context)[0] ?? null;
    },
    select(selectors, context) {
      return Sizzle(selectors, context);
    },
    match(selectors, context) {
      return Sizzle.matchesSelector(context, selectors);
    }
  };
};
function SetupSizzle(window2) {
  var i2, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document2, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * /* @__PURE__ */ new Date(), preferredDoc = window2.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
    if (a === b) {
      hasDuplicate = true;
    }
    return 0;
  }, hasOwn6 = {}.hasOwnProperty, arr = [], pop = arr.pop, pushNative = arr.push, push2 = arr.push, slice2 = arr.slice, indexOf2 = function(list, elem) {
    var i3 = 0, len = list.length;
    for (; i3 < len; i3++) {
      if (list[i3] === elem) {
        return i3;
      }
    }
    return -1;
  }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
  "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]
  // or strings [capture 3 or capture 4]"
  `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp(
    "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
    "g"
  ), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp(
    "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"
  ), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
    ID: new RegExp("^#(" + identifier + ")"),
    CLASS: new RegExp("^\\.(" + identifier + ")"),
    TAG: new RegExp("^(" + identifier + "|[*])"),
    ATTR: new RegExp("^" + attributes),
    PSEUDO: new RegExp("^" + pseudos),
    CHILD: new RegExp(
      "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)",
      "i"
    ),
    bool: new RegExp("^(?:" + booleans + ")$", "i"),
    // For use in libraries implementing .is()
    // We use this for POS matching in `select`
    needsContext: new RegExp(
      "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)",
      "i"
    )
  }, rhtml = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp(
    "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])",
    "g"
  ), funescape = function(escape, nonHex) {
    var high = "0x" + escape.slice(1) - 65536;
    return nonHex ? (
      // Strip the backslash prefix from a non-hex escape sequence
      nonHex
    ) : (
      // Replace a hexadecimal escape sequence with the encoded Unicode code point
      // Support: IE <=11+
      // For values outside the Basic Multilingual Plane (BMP), manually construct a
      // surrogate pair
      high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
    );
  }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
    if (asCodePoint) {
      if (ch === "\0") {
        return "\uFFFD";
      }
      return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
    }
    return "\\" + ch;
  }, unloadHandler = function() {
    setDocument();
  }, inDisabledFieldset = addCombinator(
    function(elem) {
      return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
    },
    { dir: "parentNode", next: "legend" }
  );
  try {
    push2.apply(
      arr = slice2.call(preferredDoc.childNodes),
      preferredDoc.childNodes
    );
    arr[preferredDoc.childNodes.length].nodeType;
  } catch (e) {
    push2 = {
      apply: arr.length ? (
        // Leverage slice if possible
        function(target, els) {
          pushNative.apply(target, slice2.call(els));
        }
      ) : (
        // Support: IE<9
        // Otherwise append directly
        function(target, els) {
          var j = target.length, i3 = 0;
          while (target[j++] = els[i3++]) {
          }
          target.length = j - 1;
        }
      )
    };
  }
  function Sizzle(selector, context, results, seed) {
    var m, i3, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
    results = results || [];
    if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
      return results;
    }
    if (!seed) {
      setDocument(context);
      context = context || document2;
      if (documentIsHTML) {
        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
          if (m = match[1]) {
            if (nodeType === 9) {
              if (elem = context.getElementById(m)) {
                if (elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } else {
                return results;
              }
            } else {
              if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                results.push(elem);
                return results;
              }
            }
          } else if (match[2]) {
            push2.apply(results, context.getElementsByTagName(selector));
            return results;
          } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
            push2.apply(results, context.getElementsByClassName(m));
            return results;
          }
        }
        if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && // Support: IE 8 only
        // Exclude object elements
        (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
          newSelector = selector;
          newContext = context;
          if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
            if (newContext !== context || !support.scope) {
              if (nid = context.getAttribute("id")) {
                nid = nid.replace(rcssescape, fcssescape);
              } else {
                context.setAttribute("id", nid = expando);
              }
            }
            groups = tokenize(selector);
            i3 = groups.length;
            while (i3--) {
              groups[i3] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i3]);
            }
            newSelector = groups.join(",");
          }
          try {
            push2.apply(results, newContext.querySelectorAll(newSelector));
            return results;
          } catch (qsaError) {
            nonnativeSelectorCache(selector, true);
          } finally {
            if (nid === expando) {
              context.removeAttribute("id");
            }
          }
        }
      }
    }
    return select(selector.replace(rtrim, "$1"), context, results, seed);
  }
  function createCache() {
    var keys = [];
    function cache6(key, value) {
      if (keys.push(key + " ") > Expr.cacheLength) {
        delete cache6[keys.shift()];
      }
      return cache6[key + " "] = value;
    }
    return cache6;
  }
  function markFunction(fn) {
    fn[expando] = true;
    return fn;
  }
  function assert9(fn) {
    return true;
    var el = document2.createElement("fieldset");
    try {
      return !!fn(el);
    } catch (e) {
      return false;
    } finally {
      if (el.parentNode) {
        el.parentNode.removeChild(el);
      }
      el = null;
    }
  }
  function addHandle(attrs, handler) {
    var arr2 = attrs.split("|"), i3 = arr2.length;
    while (i3--) {
      Expr.attrHandle[arr2[i3]] = handler;
    }
  }
  function siblingCheck(a, b) {
    var cur = b && a, diff2 = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
    if (diff2) {
      return diff2;
    }
    if (cur) {
      while (cur = cur.nextSibling) {
        if (cur === b) {
          return -1;
        }
      }
    }
    return a ? 1 : -1;
  }
  function createInputPseudo(type) {
    return function(elem) {
      var name = elem.nodeName.toLowerCase();
      return name === "input" && elem.type === type;
    };
  }
  function createButtonPseudo(type) {
    return function(elem) {
      var name = elem.nodeName.toLowerCase();
      return (name === "input" || name === "button") && elem.type === type;
    };
  }
  function createDisabledPseudo(disabled) {
    return function(elem) {
      if ("form" in elem) {
        if (elem.parentNode && elem.disabled === false) {
          if ("label" in elem) {
            if ("label" in elem.parentNode) {
              return elem.parentNode.disabled === disabled;
            } else {
              return elem.disabled === disabled;
            }
          }
          return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
          /* jshint -W018 */
          elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
        }
        return elem.disabled === disabled;
      } else if ("label" in elem) {
        return elem.disabled === disabled;
      }
      return false;
    };
  }
  function createPositionalPseudo(fn) {
    return markFunction(function(argument) {
      argument = +argument;
      return markFunction(function(seed, matches2) {
        var j, matchIndexes = fn([], seed.length, argument), i3 = matchIndexes.length;
        while (i3--) {
          if (seed[j = matchIndexes[i3]]) {
            seed[j] = !(matches2[j] = seed[j]);
          }
        }
      });
    });
  }
  function testContext(context) {
    return context && typeof context.getElementsByTagName !== "undefined" && context;
  }
  support = Sizzle.support = {};
  isXML = Sizzle.isXML = function(elem) {
    var namespace = elem && elem.namespaceURI, docElem2 = elem && (elem.ownerDocument || elem).documentElement;
    return !rhtml.test(namespace || docElem2 && docElem2.nodeName || "HTML");
  };
  setDocument = Sizzle.setDocument = function(node) {
    var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
    if (doc == document2 || doc.nodeType !== 9 || !doc.documentElement) {
      return document2;
    }
    document2 = doc;
    docElem = document2.documentElement;
    documentIsHTML = !isXML(document2);
    if (preferredDoc != document2 && (subWindow = document2.defaultView) && subWindow.top !== subWindow) {
      if (subWindow.addEventListener) {
        subWindow.addEventListener("unload", unloadHandler, false);
      } else if (subWindow.attachEvent) {
        subWindow.attachEvent("onunload", unloadHandler);
      }
    }
    support.scope = assert9(function(el) {
      docElem.appendChild(el).appendChild(document2.createElement("div"));
      return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
    });
    support.attributes = assert9(function(el) {
      el.className = "i";
      return !el.getAttribute("className");
    });
    support.getElementsByTagName = assert9(function(el) {
      el.appendChild(document2.createComment(""));
      return !el.getElementsByTagName("*").length;
    });
    support.getElementsByClassName = rnative.test(
      document2.getElementsByClassName
    );
    support.getById = assert9(function(el) {
      docElem.appendChild(el).id = expando;
      return !document2.getElementsByName || !document2.getElementsByName(expando).length;
    });
    if (support.getById) {
      Expr.filter["ID"] = function(id) {
        var attrId = id.replace(runescape, funescape);
        return function(elem) {
          return elem.getAttribute("id") === attrId;
        };
      };
      Expr.find["ID"] = function(id, context) {
        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
          var elem = context.getElementById(id);
          return elem ? [elem] : [];
        }
      };
    } else {
      Expr.filter["ID"] = function(id) {
        var attrId = id.replace(runescape, funescape);
        return function(elem) {
          var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
          return node2 && node2.value === attrId;
        };
      };
      Expr.find["ID"] = function(id, context) {
        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
          var node2, i3, elems, elem = context.getElementById(id);
          if (elem) {
            node2 = elem.getAttributeNode("id");
            if (node2 && node2.value === id) {
              return [elem];
            }
            elems = context.getElementsByName(id);
            i3 = 0;
            while (elem = elems[i3++]) {
              node2 = elem.getAttributeNode("id");
              if (node2 && node2.value === id) {
                return [elem];
              }
            }
          }
          return [];
        }
      };
    }
    Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
      if (typeof context.getElementsByTagName !== "undefined") {
        return context.getElementsByTagName(tag);
      } else if (context[customByTagNameSym]) {
        return context[customByTagNameSym](tag);
      } else if (support.qsa) {
        return context.querySelectorAll(tag);
      }
    } : function(tag, context) {
      var elem, tmp = [], i3 = 0, results = context.getElementsByTagName(tag);
      if (tag === "*") {
        while (elem = results[i3++]) {
          if (elem.nodeType === 1) {
            tmp.push(elem);
          }
        }
        return tmp;
      }
      return results;
    };
    Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
      if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
        return context.getElementsByClassName(className);
      } else if (context[customByClassNameSym]) {
        return context[customByClassNameSym](className);
      }
    };
    rbuggyMatches = [];
    rbuggyQSA = [];
    if (support.qsa = rnative.test(document2.querySelectorAll)) {
      assert9(function(el) {
        var input;
        docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\r\\' msallowcapture=''><option selected=''></option></select>";
        if (el.querySelectorAll("[msallowcapture^='']").length) {
          rbuggyQSA.push("[*^$]=" + whitespace + `*(?:''|"")`);
        }
        if (!el.querySelectorAll("[selected]").length) {
          rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
        }
        if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
          rbuggyQSA.push("~=");
        }
        input = document2.createElement("input");
        input.setAttribute("name", "");
        el.appendChild(input);
        if (!el.querySelectorAll("[name='']").length) {
          rbuggyQSA.push(
            "\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + `*(?:''|"")`
          );
        }
        if (!el.querySelectorAll(":checked").length) {
          rbuggyQSA.push(":checked");
        }
        if (!el.querySelectorAll("a#" + expando + "+*").length) {
          rbuggyQSA.push(".#.+[+~]");
        }
        el.querySelectorAll("\\\f");
        rbuggyQSA.push("[\\r\\n\\f]");
      });
      assert9(function(el) {
        el.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
        var input = document2.createElement("input");
        input.setAttribute("type", "hidden");
        el.appendChild(input).setAttribute("name", "D");
        if (el.querySelectorAll("[name=d]").length) {
          rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
        }
        if (el.querySelectorAll(":enabled").length !== 2) {
          rbuggyQSA.push(":enabled", ":disabled");
        }
        docElem.appendChild(el).disabled = true;
        if (el.querySelectorAll(":disabled").length !== 2) {
          rbuggyQSA.push(":enabled", ":disabled");
        }
        el.querySelectorAll("*,:x");
        rbuggyQSA.push(",.*:");
      });
    }
    if (support.matchesSelector = rnative.test(
      matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector
    )) {
      assert9(function(el) {
        support.disconnectedMatch = matches.call(el, "*");
        matches.call(el, "[s!='']:x");
        rbuggyMatches.push("!=", pseudos);
      });
    }
    rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
    rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
    hasCompare = rnative.test(docElem.compareDocumentPosition);
    contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
      var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
      return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
    } : function(a, b) {
      if (b) {
        while (b = b.parentNode) {
          if (b === a) {
            return true;
          }
        }
      }
      return false;
    };
    sortOrder = hasCompare ? function(a, b) {
      if (a === b) {
        hasDuplicate = true;
        return 0;
      }
      var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
      if (compare) {
        return compare;
      }
      compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : (
        // Otherwise we know they are disconnected
        1
      );
      if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
        if (a == document2 || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
          return -1;
        }
        if (b == document2 || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {
          return 1;
        }
        return sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b) : 0;
      }
      return compare & 4 ? -1 : 1;
    } : function(a, b) {
      if (a === b) {
        hasDuplicate = true;
        return 0;
      }
      var cur, i3 = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
      if (!aup || !bup) {
        return a == document2 ? -1 : b == document2 ? 1 : (
          /* eslint-enable eqeqeq */
          aup ? -1 : bup ? 1 : sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b) : 0
        );
      } else if (aup === bup) {
        return siblingCheck(a, b);
      }
      cur = a;
      while (cur = cur.parentNode) {
        ap.unshift(cur);
      }
      cur = b;
      while (cur = cur.parentNode) {
        bp.unshift(cur);
      }
      while (ap[i3] === bp[i3]) {
        i3++;
      }
      return i3 ? (
        // Do a sibling check if the nodes have a common ancestor
        siblingCheck(ap[i3], bp[i3])
      ) : (
        // Otherwise nodes in our document sort first
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        /* eslint-disable eqeqeq */
        ap[i3] == preferredDoc ? -1 : bp[i3] == preferredDoc ? 1 : (
          /* eslint-enable eqeqeq */
          0
        )
      );
    };
    return document2;
  };
  Sizzle.matches = function(expr, elements) {
    return Sizzle(expr, null, null, elements);
  };
  Sizzle.matchesSelector = function(elem, expr) {
    setDocument(elem);
    if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
      try {
        var ret = matches.call(elem, expr);
        if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
        // fragment in IE 9
        elem.document && elem.document.nodeType !== 11) {
          return ret;
        }
      } catch (e) {
        nonnativeSelectorCache(expr, true);
      }
    }
    return Sizzle(expr, document2, null, [elem]).length > 0;
  };
  Sizzle.contains = function(context, elem) {
    if ((context.ownerDocument || context) != document2) {
      setDocument(context);
    }
    return contains(context, elem);
  };
  Sizzle.attr = function(elem, name) {
    if ((elem.ownerDocument || elem) != document2) {
      setDocument(elem);
    }
    var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn6.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
    return val !== void 0 ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
  };
  Sizzle.escape = function(sel) {
    return (sel + "").replace(rcssescape, fcssescape);
  };
  Sizzle.error = function(msg) {
    throw new DOMException(`'${msg}' is not a valid selector`);
  };
  Sizzle.uniqueSort = function(results) {
    var elem, duplicates = [], j = 0, i3 = 0;
    hasDuplicate = !support.detectDuplicates;
    sortInput = !support.sortStable && results.slice(0);
    results.sort(sortOrder);
    if (hasDuplicate) {
      while (elem = results[i3++]) {
        if (elem === results[i3]) {
          j = duplicates.push(i3);
        }
      }
      while (j--) {
        results.splice(duplicates[j], 1);
      }
    }
    sortInput = null;
    return results;
  };
  getText = Sizzle.getText = function(elem) {
    var node, ret = "", i3 = 0, nodeType = elem.nodeType;
    if (!nodeType) {
      while (node = elem[i3++]) {
        ret += getText(node);
      }
    } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
      if (typeof elem.textContent === "string") {
        return elem.textContent;
      } else {
        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
          ret += getText(elem);
        }
      }
    } else if (nodeType === 3 || nodeType === 4) {
      return elem.nodeValue;
    }
    return ret;
  };
  Expr = Sizzle.selectors = {
    // Can be adjusted by the user
    cacheLength: 50,
    createPseudo: markFunction,
    match: matchExpr,
    attrHandle: {},
    find: {},
    relative: {
      ">": { dir: "parentNode", first: true },
      " ": { dir: "parentNode" },
      "+": { dir: "previousSibling", first: true },
      "~": { dir: "previousSibling" }
    },
    preFilter: {
      ATTR: function(match) {
        match[1] = match[1].replace(runescape, funescape);
        match[3] = (match[3] || match[4] || match[5] || "").replace(
          runescape,
          funescape
        );
        if (match[2] === "~=") {
          match[3] = " " + match[3] + " ";
        }
        return match.slice(0, 4);
      },
      CHILD: function(match) {
        match[1] = match[1].toLowerCase();
        if (match[1].slice(0, 3) === "nth") {
          if (!match[3]) {
            Sizzle.error(match[0]);
          }
          match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
          match[5] = +(match[7] + match[8] || match[3] === "odd");
        } else if (match[3]) {
          Sizzle.error(match[0]);
        }
        return match;
      },
      PSEUDO: function(match) {
        var excess, unquoted = !match[6] && match[2];
        if (matchExpr["CHILD"].test(match[0])) {
          return null;
        }
        if (match[3]) {
          match[2] = match[4] || match[5] || "";
        } else if (unquoted && rpseudo.test(unquoted) && // Get excess from tokenize (recursively)
        (excess = tokenize(unquoted, true)) && // advance to the next closing parenthesis
        (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
          match[0] = match[0].slice(0, excess);
          match[2] = unquoted.slice(0, excess);
        }
        return match.slice(0, 3);
      }
    },
    filter: {
      TAG: function(nodeNameSelector) {
        var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
        return nodeNameSelector === "*" ? function() {
          return true;
        } : function(elem) {
          return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
        };
      },
      CLASS: function(className) {
        var pattern = classCache[className + " "];
        return pattern || (pattern = new RegExp(
          "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)"
        )) && classCache(className, function(elem) {
          return pattern.test(
            typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || ""
          );
        });
      },
      ATTR: function(name, operator, check) {
        return function(elem) {
          var result2 = Sizzle.attr(elem, name);
          if (result2 == null) {
            return operator === "!=";
          }
          if (!operator) {
            return true;
          }
          result2 += "";
          return operator === "=" ? result2 === check : operator === "!=" ? result2 !== check : operator === "^=" ? check && result2.indexOf(check) === 0 : operator === "*=" ? check && result2.indexOf(check) > -1 : operator === "$=" ? check && result2.slice(-check.length) === check : operator === "~=" ? (" " + result2.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result2 === check || result2.slice(0, check.length + 1) === check + "-" : false;
        };
      },
      CHILD: function(type, what, _argument, first, last) {
        var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
        return first === 1 && last === 0 ? (
          // Shortcut for :nth-*(n)
          function(elem) {
            return !!elem.parentNode;
          }
        ) : function(elem, _context, xml) {
          var cache6, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff2 = false;
          if (parent) {
            if (simple) {
              while (dir) {
                node = elem;
                while (node = node[dir]) {
                  if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                    return false;
                  }
                }
                start = dir = type === "only" && !start && "nextSibling";
              }
              return true;
            }
            start = [forward ? parent.firstChild : parent.lastChild];
            if (forward && useCache) {
              node = parent;
              outerCache = node[expando] || (node[expando] = {});
              uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
              cache6 = uniqueCache[type] || [];
              nodeIndex = cache6[0] === dirruns && cache6[1];
              diff2 = nodeIndex && cache6[2];
              node = nodeIndex && parent.childNodes[nodeIndex];
              while (node = ++nodeIndex && node && node[dir] || // Fallback to seeking `elem` from the start
              (diff2 = nodeIndex = 0) || start.pop()) {
                if (node.nodeType === 1 && ++diff2 && node === elem) {
                  uniqueCache[type] = [dirruns, nodeIndex, diff2];
                  break;
                }
              }
            } else {
              if (useCache) {
                node = elem;
                outerCache = node[expando] || (node[expando] = {});
                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache6 = uniqueCache[type] || [];
                nodeIndex = cache6[0] === dirruns && cache6[1];
                diff2 = nodeIndex;
              }
              if (diff2 === false) {
                while (node = ++nodeIndex && node && node[dir] || (diff2 = nodeIndex = 0) || start.pop()) {
                  if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff2) {
                    if (useCache) {
                      outerCache = node[expando] || (node[expando] = {});
                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      uniqueCache[type] = [dirruns, diff2];
                    }
                    if (node === elem) {
                      break;
                    }
                  }
                }
              }
            }
            diff2 -= last;
            return diff2 === first || diff2 % first === 0 && diff2 / first >= 0;
          }
        };
      },
      PSEUDO: function(pseudo, argument) {
        var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
        if (fn[expando]) {
          return fn(argument);
        }
        if (fn.length > 1) {
          args = [pseudo, pseudo, "", argument];
          return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches2) {
            var idx, matched = fn(seed, argument), i3 = matched.length;
            while (i3--) {
              idx = indexOf2(seed, matched[i3]);
              seed[idx] = !(matches2[idx] = matched[i3]);
            }
          }) : function(elem) {
            return fn(elem, 0, args);
          };
        }
        return fn;
      }
    },
    pseudos: {
      // Potentially complex pseudos
      not: markFunction(function(selector) {
        var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
        return matcher[expando] ? markFunction(function(seed, matches2, _context, xml) {
          var elem, unmatched = matcher(seed, null, xml, []), i3 = seed.length;
          while (i3--) {
            if (elem = unmatched[i3]) {
              seed[i3] = !(matches2[i3] = elem);
            }
          }
        }) : function(elem, _context, xml) {
          input[0] = elem;
          matcher(input, null, xml, results);
          input[0] = null;
          return !results.pop();
        };
      }),
      has: markFunction(function(selector) {
        return function(elem) {
          return Sizzle(selector, elem).length > 0;
        };
      }),
      contains: markFunction(function(text) {
        text = text.replace(runescape, funescape);
        return function(elem) {
          return (elem.textContent || getText(elem)).indexOf(text) > -1;
        };
      }),
      // "Whether an element is represented by a :lang() selector
      // is based solely on the element's language value
      // being equal to the identifier C,
      // or beginning with the identifier C immediately followed by "-".
      // The matching of C against the element's language value is performed case-insensitively.
      // The identifier C does not have to be a valid language name."
      // http://www.w3.org/TR/selectors/#lang-pseudo
      lang: markFunction(function(lang) {
        if (!ridentifier.test(lang || "")) {
          Sizzle.error("unsupported lang: " + lang);
        }
        lang = lang.replace(runescape, funescape).toLowerCase();
        return function(elem) {
          var elemLang;
          do {
            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
              elemLang = elemLang.toLowerCase();
              return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
            }
          } while ((elem = elem.parentNode) && elem.nodeType === 1);
          return false;
        };
      }),
      // Miscellaneous
      target: function(elem) {
        var hash = window2.location && window2.location.hash;
        return hash && hash.slice(1) === elem.id;
      },
      root: function(elem) {
        return elem === docElem;
      },
      focus: function(elem) {
        return elem === document2.activeElement && (!document2.hasFocus || document2.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
      },
      // Boolean properties
      enabled: createDisabledPseudo(false),
      disabled: createDisabledPseudo(true),
      checked: function(elem) {
        var nodeName = elem.nodeName.toLowerCase();
        return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
      },
      selected: function(elem) {
        if (elem.parentNode) {
          elem.parentNode.selectedIndex;
        }
        return elem.selected === true;
      },
      // Contents
      empty: function(elem) {
        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
          if (elem.nodeType < 6) {
            return false;
          }
        }
        return true;
      },
      parent: function(elem) {
        return !Expr.pseudos["empty"](elem);
      },
      // Element/input types
      header: function(elem) {
        return rheader.test(elem.nodeName);
      },
      input: function(elem) {
        return rinputs.test(elem.nodeName);
      },
      button: function(elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === "button" || name === "button";
      },
      text: function(elem) {
        var attr;
        return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && // Support: IE<8
        // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
        ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
      },
      // Position-in-collection
      first: createPositionalPseudo(function() {
        return [0];
      }),
      last: createPositionalPseudo(function(_matchIndexes, length) {
        return [length - 1];
      }),
      eq: createPositionalPseudo(function(_matchIndexes, length, argument) {
        return [argument < 0 ? argument + length : argument];
      }),
      even: createPositionalPseudo(function(matchIndexes, length) {
        var i3 = 0;
        for (; i3 < length; i3 += 2) {
          matchIndexes.push(i3);
        }
        return matchIndexes;
      }),
      odd: createPositionalPseudo(function(matchIndexes, length) {
        var i3 = 1;
        for (; i3 < length; i3 += 2) {
          matchIndexes.push(i3);
        }
        return matchIndexes;
      }),
      lt: createPositionalPseudo(function(matchIndexes, length, argument) {
        var i3 = argument < 0 ? argument + length : argument > length ? length : argument;
        for (; --i3 >= 0; ) {
          matchIndexes.push(i3);
        }
        return matchIndexes;
      }),
      gt: createPositionalPseudo(function(matchIndexes, length, argument) {
        var i3 = argument < 0 ? argument + length : argument;
        for (; ++i3 < length; ) {
          matchIndexes.push(i3);
        }
        return matchIndexes;
      })
    }
  };
  Expr.pseudos["nth"] = Expr.pseudos["eq"];
  for (i2 in {
    radio: true,
    checkbox: true,
    file: true,
    password: true,
    image: true
  }) {
    Expr.pseudos[i2] = createInputPseudo(i2);
  }
  for (i2 in { submit: true, reset: true }) {
    Expr.pseudos[i2] = createButtonPseudo(i2);
  }
  function setFilters() {
  }
  setFilters.prototype = Expr.filters = Expr.pseudos;
  Expr.setFilters = new setFilters();
  tokenize = Sizzle.tokenize = function(selector, parseOnly) {
    var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
    if (cached) {
      return parseOnly ? 0 : cached.slice(0);
    }
    soFar = selector;
    groups = [];
    preFilters = Expr.preFilter;
    while (soFar) {
      if (!matched || (match = rcomma.exec(soFar))) {
        if (match) {
          soFar = soFar.slice(match[0].length) || soFar;
        }
        groups.push(tokens = []);
      }
      matched = false;
      if (match = rcombinators.exec(soFar)) {
        matched = match.shift();
        tokens.push({
          value: matched,
          // Cast descendant combinators to space
          type: match[0].replace(rtrim, " ")
        });
        soFar = soFar.slice(matched.length);
      }
      for (type in Expr.filter) {
        if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
          matched = match.shift();
          tokens.push({
            value: matched,
            type,
            matches: match
          });
          soFar = soFar.slice(matched.length);
        }
      }
      if (!matched) {
        break;
      }
    }
    return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : (
      // Cache the tokens
      tokenCache(selector, groups).slice(0)
    );
  };
  function toSelector(tokens) {
    var i3 = 0, len = tokens.length, selector = "";
    for (; i3 < len; i3++) {
      selector += tokens[i3].value;
    }
    return selector;
  }
  function addCombinator(matcher, combinator, base) {
    var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === "parentNode", doneName = done++;
    return combinator.first ? (
      // Check against closest ancestor/preceding element
      function(elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }
        return false;
      }
    ) : (
      // Check against all ancestor/preceding elements
      function(elem, context, xml) {
        var oldCache, uniqueCache, outerCache, newCache = [dirruns, doneName];
        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {});
              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
              if (skip && skip === elem.nodeName.toLowerCase()) {
                elem = elem[dir] || elem;
              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                return newCache[2] = oldCache[2];
              } else {
                uniqueCache[key] = newCache;
                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }
        return false;
      }
    );
  }
  function elementMatcher(matchers) {
    return matchers.length > 1 ? function(elem, context, xml) {
      var i3 = matchers.length;
      while (i3--) {
        if (!matchers[i3](elem, context, xml)) {
          return false;
        }
      }
      return true;
    } : matchers[0];
  }
  function multipleContexts(selector, contexts, results) {
    var i3 = 0, len = contexts.length;
    for (; i3 < len; i3++) {
      Sizzle(selector, contexts[i3], results);
    }
    return results;
  }
  function condense(unmatched, map2, filter2, context, xml) {
    var elem, newUnmatched = [], i3 = 0, len = unmatched.length, mapped = map2 != null;
    for (; i3 < len; i3++) {
      if (elem = unmatched[i3]) {
        if (!filter2 || filter2(elem, context, xml)) {
          newUnmatched.push(elem);
          if (mapped) {
            map2.push(i3);
          }
        }
      }
    }
    return newUnmatched;
  }
  function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
    if (postFilter && !postFilter[expando]) {
      postFilter = setMatcher(postFilter);
    }
    if (postFinder && !postFinder[expando]) {
      postFinder = setMatcher(postFinder, postSelector);
    }
    return markFunction(function(seed, results, context, xml) {
      var temp, i3, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(
        selector || "*",
        context.nodeType ? [context] : context,
        []
      ), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? (
        // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        postFinder || (seed ? preFilter : preexisting || postFilter) ? (
          // ...intermediate processing is necessary
          []
        ) : (
          // ...otherwise use results directly
          results
        )
      ) : matcherIn;
      if (matcher) {
        matcher(matcherIn, matcherOut, context, xml);
      }
      if (postFilter) {
        temp = condense(matcherOut, postMap);
        postFilter(temp, [], context, xml);
        i3 = temp.length;
        while (i3--) {
          if (elem = temp[i3]) {
            matcherOut[postMap[i3]] = !(matcherIn[postMap[i3]] = elem);
          }
        }
      }
      if (seed) {
        if (postFinder || preFilter) {
          if (postFinder) {
            temp = [];
            i3 = matcherOut.length;
            while (i3--) {
              if (elem = matcherOut[i3]) {
                temp.push(matcherIn[i3] = elem);
              }
            }
            postFinder(null, matcherOut = [], temp, xml);
          }
          i3 = matcherOut.length;
          while (i3--) {
            if ((elem = matcherOut[i3]) && (temp = postFinder ? indexOf2(seed, elem) : preMap[i3]) > -1) {
              seed[temp] = !(results[temp] = elem);
            }
          }
        }
      } else {
        matcherOut = condense(
          matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut
        );
        if (postFinder) {
          postFinder(null, results, matcherOut, xml);
        } else {
          push2.apply(results, matcherOut);
        }
      }
    });
  }
  function matcherFromTokens(tokens) {
    var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i3 = leadingRelative ? 1 : 0, matchContext = addCombinator(
      function(elem) {
        return elem === checkContext;
      },
      implicitRelative,
      true
    ), matchAnyContext = addCombinator(
      function(elem) {
        return indexOf2(checkContext, elem) > -1;
      },
      implicitRelative,
      true
    ), matchers = [
      function(elem, context, xml) {
        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
        checkContext = null;
        return ret;
      }
    ];
    for (; i3 < len; i3++) {
      if (matcher = Expr.relative[tokens[i3].type]) {
        matchers = [addCombinator(elementMatcher(matchers), matcher)];
      } else {
        matcher = Expr.filter[tokens[i3].type].apply(null, tokens[i3].matches);
        if (matcher[expando]) {
          j = ++i3;
          for (; j < len; j++) {
            if (Expr.relative[tokens[j].type]) {
              break;
            }
          }
          return setMatcher(
            i3 > 1 && elementMatcher(matchers),
            i3 > 1 && toSelector(
              // If the preceding token was a descendant combinator, insert an implicit any-element `*`
              tokens.slice(0, i3 - 1).concat({ value: tokens[i3 - 2].type === " " ? "*" : "" })
            ).replace(rtrim, "$1"),
            matcher,
            i3 < j && matcherFromTokens(tokens.slice(i3, j)),
            j < len && matcherFromTokens(tokens = tokens.slice(j)),
            j < len && toSelector(tokens)
          );
        }
        matchers.push(matcher);
      }
    }
    return elementMatcher(matchers);
  }
  function matcherFromGroupMatchers(elementMatchers, setMatchers) {
    var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
      var elem, j, matcher, matchedCount = 0, i3 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
      if (outermost) {
        outermostContext = context == document2 || context || outermost;
      }
      for (; i3 !== len && (elem = elems[i3]) != null; i3++) {
        if (byElement && elem) {
          j = 0;
          if (!context && elem.ownerDocument != document2) {
            setDocument(elem);
            xml = !documentIsHTML;
          }
          while (matcher = elementMatchers[j++]) {
            if (matcher(elem, context || document2, xml)) {
              results.push(elem);
              break;
            }
          }
          if (outermost) {
            dirruns = dirrunsUnique;
          }
        }
        if (bySet) {
          if (elem = !matcher && elem) {
            matchedCount--;
          }
          if (seed) {
            unmatched.push(elem);
          }
        }
      }
      matchedCount += i3;
      if (bySet && i3 !== matchedCount) {
        j = 0;
        while (matcher = setMatchers[j++]) {
          matcher(unmatched, setMatched, context, xml);
        }
        if (seed) {
          if (matchedCount > 0) {
            while (i3--) {
              if (!(unmatched[i3] || setMatched[i3])) {
                setMatched[i3] = pop.call(results);
              }
            }
          }
          setMatched = condense(setMatched);
        }
        push2.apply(results, setMatched);
        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
          Sizzle.uniqueSort(results);
        }
      }
      if (outermost) {
        dirruns = dirrunsUnique;
        outermostContext = contextBackup;
      }
      return unmatched;
    };
    return bySet ? markFunction(superMatcher) : superMatcher;
  }
  compile = Sizzle.compile = function(selector, match) {
    var i3, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
    if (!cached) {
      if (!match) {
        match = tokenize(selector);
      }
      i3 = match.length;
      while (i3--) {
        cached = matcherFromTokens(match[i3]);
        if (cached[expando]) {
          setMatchers.push(cached);
        } else {
          elementMatchers.push(cached);
        }
      }
      cached = compilerCache(
        selector,
        matcherFromGroupMatchers(elementMatchers, setMatchers)
      );
      cached.selector = selector;
    }
    return cached;
  };
  select = Sizzle.select = function(selector, context, results, seed) {
    var i3, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
    results = results || [];
    if (match.length === 1) {
      tokens = match[0] = match[0].slice(0);
      if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
        context = (Expr.find["ID"](
          token.matches[0].replace(runescape, funescape),
          context
        ) || [])[0];
        if (!context) {
          return results;
        } else if (compiled) {
          context = context.parentNode;
        }
        selector = selector.slice(tokens.shift().value.length);
      }
      i3 = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
      while (i3--) {
        token = tokens[i3];
        if (Expr.relative[type = token.type]) {
          break;
        }
        if (find = Expr.find[type]) {
          if (seed = find(
            token.matches[0].replace(runescape, funescape),
            rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
          )) {
            tokens.splice(i3, 1);
            selector = seed.length && toSelector(tokens);
            if (!selector) {
              push2.apply(results, seed);
              return results;
            }
            break;
          }
        }
      }
    }
    (compiled || compile(selector, match))(
      seed,
      context,
      !documentIsHTML,
      results,
      !context || rsibling.test(selector) && testContext(context.parentNode) || context
    );
    return results;
  };
  support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
  support.detectDuplicates = !!hasDuplicate;
  setDocument();
  support.sortDetached = assert9(function(el) {
    return el.compareDocumentPosition(document2.createElement("fieldset")) & 1;
  });
  if (!assert9(function(el) {
    el.innerHTML = "<a href='#'></a>";
    return el.firstChild.getAttribute("href") === "#";
  })) {
    addHandle("type|href|height|width", function(elem, name, isXML2) {
      if (!isXML2) {
        return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
      }
    });
  }
  if (!support.attributes || !assert9(function(el) {
    el.innerHTML = "<input/>";
    el.firstChild.setAttribute("value", "");
    return el.firstChild.getAttribute("value") === "";
  })) {
    addHandle("value", function(elem, _name, isXML2) {
      if (!isXML2 && elem.nodeName.toLowerCase() === "input") {
        return elem.defaultValue;
      }
    });
  }
  if (!assert9(function(el) {
    return el.getAttribute("disabled") == null;
  })) {
    addHandle(booleans, function(elem, name, isXML2) {
      var val;
      if (!isXML2) {
        return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
      }
    });
  }
  var _sizzle = window2.Sizzle;
  Sizzle.noConflict = function() {
    if (window2.Sizzle === Sizzle) {
      window2.Sizzle = _sizzle;
    }
    return Sizzle;
  };
  if (typeof define === "function" && define.amd) {
    define(function() {
      return Sizzle;
    });
  } else if (typeof module !== "undefined" && module.exports) {
    module.exports = Sizzle;
  } else {
    window2.Sizzle = Sizzle;
  }
}

// https://deno.land/x/deno_dom@v0.1.43/src/dom/selectors/sizzle-types.ts
var DOM2 = sizzle_default;

// https://deno.land/x/deno_dom@v0.1.43/src/dom/selectors/selectors.ts
var codeGenerationAllowed = null;
function getSelectorEngine() {
  if (codeGenerationAllowed === null) {
    try {
      new Function("");
      codeGenerationAllowed = true;
    } catch (e) {
      codeGenerationAllowed = false;
    }
  }
  if (codeGenerationAllowed) {
    return DOM;
  } else {
    return DOM2;
  }
}

// https://deno.land/x/deno_dom@v0.1.43/src/dom/document.ts
var DOMImplementation = class {
  constructor(key) {
    if (key !== CTOR_KEY) {
      throw new TypeError("Illegal constructor.");
    }
  }
  createDocument() {
    throw new Error("Unimplemented");
  }
  createHTMLDocument(titleStr) {
    titleStr += "";
    const doc = new HTMLDocument(CTOR_KEY);
    const docType = new DocumentType("html", "", "", CTOR_KEY);
    doc.appendChild(docType);
    const html = new Element2("html", doc, [], CTOR_KEY);
    html._setOwnerDocument(doc);
    const head = new Element2("head", html, [], CTOR_KEY);
    const body = new Element2("body", html, [], CTOR_KEY);
    const title = new Element2("title", head, [], CTOR_KEY);
    const titleText = new Text2(titleStr);
    title.appendChild(titleText);
    doc.head = head;
    doc.body = body;
    return doc;
  }
  createDocumentType(qualifiedName, publicId, systemId) {
    const doctype = new DocumentType(
      qualifiedName,
      publicId,
      systemId,
      CTOR_KEY
    );
    return doctype;
  }
};
var DocumentType = class _DocumentType extends Node {
  #qualifiedName = "";
  #publicId = "";
  #systemId = "";
  constructor(name, publicId, systemId, key) {
    super(
      "html",
      10 /* DOCUMENT_TYPE_NODE */,
      null,
      key
    );
    this.#qualifiedName = name;
    this.#publicId = publicId;
    this.#systemId = systemId;
  }
  get name() {
    return this.#qualifiedName;
  }
  get publicId() {
    return this.#publicId;
  }
  get systemId() {
    return this.#systemId;
  }
  _shallowClone() {
    return new _DocumentType(
      this.#qualifiedName,
      this.#publicId,
      this.#systemId,
      CTOR_KEY
    );
  }
};
var Document2 = class _Document extends Node {
  head = null;
  body = null;
  implementation;
  #lockState = false;
  #documentURI = "about:blank";
  // TODO
  #title = "";
  #nwapi = null;
  constructor() {
    super(
      "#document",
      9 /* DOCUMENT_NODE */,
      null,
      CTOR_KEY
    );
    this.implementation = new DOMImplementation(CTOR_KEY);
  }
  _shallowClone() {
    return new _Document();
  }
  // Expose the document's NWAPI for Element's access to
  // querySelector/querySelectorAll
  get _nwapi() {
    return this.#nwapi || (this.#nwapi = getSelectorEngine()(this));
  }
  get documentURI() {
    return this.#documentURI;
  }
  get title() {
    return this.querySelector("title")?.textContent || "";
  }
  get cookie() {
    return "";
  }
  set cookie(newCookie) {
  }
  get visibilityState() {
    return "visible";
  }
  get hidden() {
    return false;
  }
  get compatMode() {
    return "CSS1Compat";
  }
  get documentElement() {
    for (const node of this.childNodes) {
      if (node.nodeType === 1 /* ELEMENT_NODE */) {
        return node;
      }
    }
    return null;
  }
  get doctype() {
    for (const node of this.childNodes) {
      if (node.nodeType === 10 /* DOCUMENT_TYPE_NODE */) {
        return node;
      }
    }
    return null;
  }
  get childElementCount() {
    let count4 = 0;
    for (const { nodeType } of this.childNodes) {
      if (nodeType === 1 /* ELEMENT_NODE */) {
        count4++;
      }
    }
    return count4;
  }
  appendChild(child) {
    super.appendChild(child);
    child._setOwnerDocument(this);
    return child;
  }
  createElement(tagName, options) {
    tagName = tagName.toUpperCase();
    switch (tagName) {
      case "TEMPLATE": {
        const frag = new DocumentFragment2();
        const elm = new HTMLTemplateElement(
          null,
          [],
          CTOR_KEY,
          frag
        );
        elm._setOwnerDocument(this);
        return elm;
      }
      default: {
        const elm = new Element2(tagName, null, [], CTOR_KEY);
        elm._setOwnerDocument(this);
        return elm;
      }
    }
  }
  createElementNS(namespace, qualifiedName, options) {
    if (namespace === "http://www.w3.org/1999/xhtml") {
      return this.createElement(qualifiedName, options);
    } else {
      throw new Error(
        `createElementNS: "${namespace}" namespace unimplemented`
      );
    }
  }
  createTextNode(data) {
    return new Text2(data);
  }
  createComment(data) {
    return new Comment2(data);
  }
  createDocumentFragment() {
    const fragment = new DocumentFragment2();
    fragment._setOwnerDocument(this);
    return fragment;
  }
  importNode(node, deep = false) {
    const copy7 = node.cloneNode(deep);
    copy7._setOwnerDocument(this);
    return copy7;
  }
  adoptNode(node) {
    if (node instanceof _Document) {
      throw new DOMException(
        "Adopting a Document node is not supported.",
        "NotSupportedError"
      );
    }
    node._setParent(null);
    node._setOwnerDocument(this);
    return node;
  }
  querySelector(selectors) {
    return this._nwapi.first(selectors, this);
  }
  querySelectorAll(selectors) {
    const nodeList = new NodeList();
    const mutator = nodeList[nodeListMutatorSym]();
    for (const match of this._nwapi.select(selectors, this)) {
      mutator.push(match);
    }
    return nodeList;
  }
  // TODO: DRY!!!
  getElementById(id) {
    for (const child of this.childNodes) {
      if (child.nodeType === 1 /* ELEMENT_NODE */) {
        if (child.id === id) {
          return child;
        }
        const search2 = child.getElementById(id);
        if (search2) {
          return search2;
        }
      }
    }
    return null;
  }
  getElementsByTagName(tagName) {
    if (tagName === "*") {
      return this.documentElement ? this._getElementsByTagNameWildcard(
        this.documentElement,
        []
      ) : [];
    } else {
      return this._getElementsByTagName(tagName.toUpperCase(), []);
    }
  }
  _getElementsByTagNameWildcard(node, search2) {
    for (const child of this.childNodes) {
      if (child.nodeType === 1 /* ELEMENT_NODE */) {
        search2.push(child);
        child._getElementsByTagNameWildcard(search2);
      }
    }
    return search2;
  }
  _getElementsByTagName(tagName, search2) {
    for (const child of this.childNodes) {
      if (child.nodeType === 1 /* ELEMENT_NODE */) {
        if (child.tagName === tagName) {
          search2.push(child);
        }
        child._getElementsByTagName(tagName, search2);
      }
    }
    return search2;
  }
  getElementsByTagNameNS(_namespace, localName) {
    return this.getElementsByTagName(localName);
  }
  getElementsByClassName(className) {
    return getElementsByClassName(this, className, []);
  }
  hasFocus() {
    return true;
  }
};
var HTMLDocument = class _HTMLDocument extends Document2 {
  constructor(key) {
    if (key !== CTOR_KEY) {
      throw new TypeError("Illegal constructor.");
    }
    super();
  }
  _shallowClone() {
    return new _HTMLDocument(CTOR_KEY);
  }
};
utils_types_default.Document = Document2;

// https://deno.land/x/deno_dom@v0.1.43/src/deserialize.ts
function nodesFromString(html) {
  const parsed = JSON.parse(parse18(html));
  const node = nodeFromArray(parsed, null);
  return node;
}
function fragmentNodesFromString(html, contextLocalName) {
  const parsed = JSON.parse(parseFrag(html, contextLocalName));
  const node = nodeFromArray(parsed, null);
  return node;
}
function nodeFromArray(data, parentNode) {
  if (data[1] === "template") {
    const content = nodeFromArray(data[3], null);
    const contentFrag = new DocumentFragment2();
    const fragMutator = contentFrag._getChildNodesMutator();
    for (const child of content.childNodes) {
      fragMutator.push(child);
      child._setParent(contentFrag);
    }
    return new HTMLTemplateElement(
      parentNode,
      data[2],
      CTOR_KEY,
      contentFrag
    );
  }
  const elm = new Element2(data[1], parentNode, data[2], CTOR_KEY);
  const childNodes = elm._getChildNodesMutator();
  let childNode;
  for (const child of data.slice(3)) {
    switch (child[0]) {
      case 3 /* TEXT_NODE */:
        childNode = new Text2(child[1]);
        childNode.parentNode = childNode.parentElement = elm;
        childNodes.push(childNode);
        break;
      case 8 /* COMMENT_NODE */:
        childNode = new Comment2(child[1]);
        childNode.parentNode = childNode.parentElement = elm;
        childNodes.push(childNode);
        break;
      case 9 /* DOCUMENT_NODE */:
      case 1 /* ELEMENT_NODE */:
        nodeFromArray(child, elm);
        break;
      case 10 /* DOCUMENT_TYPE_NODE */:
        childNode = new DocumentType(child[1], child[2], child[3], CTOR_KEY);
        childNode.parentNode = childNode.parentElement = elm;
        childNodes.push(childNode);
        break;
    }
  }
  return elm;
}

// https://deno.land/x/deno_dom@v0.1.43/src/dom/dom-parser.ts
var DOMParser = class {
  parseFromString(source, mimeType) {
    if (mimeType !== "text/html") {
      throw new Error(`DOMParser: "${mimeType}" unimplemented`);
    }
    const doc = new HTMLDocument(CTOR_KEY);
    const fakeDoc = nodesFromString(source);
    let htmlNode = null;
    let hasDoctype = false;
    for (const child of [...fakeDoc.childNodes]) {
      doc.appendChild(child);
      if (child instanceof DocumentType) {
        hasDoctype = true;
      } else if (child.nodeName === "HTML") {
        htmlNode = child;
      }
    }
    if (!hasDoctype) {
      const docType = new DocumentType("html", "", "", CTOR_KEY);
      if (doc.childNodes.length === 0) {
        doc.appendChild(docType);
      } else {
        doc.insertBefore(docType, doc.childNodes[0]);
      }
    }
    if (htmlNode) {
      for (const child of htmlNode.childNodes) {
        switch (child.tagName) {
          case "HEAD":
            doc.head = child;
            break;
          case "BODY":
            doc.body = child;
            break;
        }
      }
    }
    return doc;
  }
};

// https://deno.land/x/deno_dom@v0.1.43/src/api.ts
var oldHasInstance = Array[Symbol.hasInstance];
Object.defineProperty(Array, Symbol.hasInstance, {
  value(value) {
    switch (value?.constructor) {
      case HTMLCollection:
      case NodeList:
        return false;
      default:
        return oldHasInstance.call(this, value);
    }
  },
  configurable: true
});
var oldIsArray = Array.isArray;
Object.defineProperty(Array, "isArray", {
  value: (value) => {
    switch (value?.constructor) {
      case HTMLCollection:
      case NodeList:
        return false;
      default:
        return oldIsArray.call(Array, value);
    }
  },
  configurable: true
});

// https://deno.land/x/deno_dom@v0.1.43/deno-dom-wasm.ts
await deno_wasm_default();
register(
  parse17,
  parse_frag
);

// https://deno.land/x/quickr@0.6.54/main/file_system.js
ensure({ denoVersion: "1.17.1" });
var cache4 = {};
var PathInfo2 = class {
  constructor({ path: path10, _lstatData, _statData }) {
    this.path = path10;
    this._lstat = _lstatData;
    this._data = _statData;
  }
  // 
  // core data sources
  // 
  refresh() {
    this._lstat = null;
    this._data = null;
  }
  get lstat() {
    if (!this._lstat) {
      try {
        this._lstat = Deno.lstatSync(this.path);
      } catch (error) {
        this._lstat = { doesntExist: true };
      }
    }
    return this._lstat;
  }
  get stat() {
    if (!this._stat) {
      const lstat = this.lstat;
      if (!lstat.isSymlink) {
        this._stat = {
          isBrokenLink: false,
          isLoopOfLinks: false
        };
      } else {
        try {
          this._stat = Deno.statSync(this.path);
        } catch (error) {
          this._stat = {};
          if (error.message.match(/^Too many levels of symbolic links/)) {
            this._stat.isBrokenLink = true;
            this._stat.isLoopOfLinks = true;
          } else if (error.message.match(/^No such file or directory/)) {
            this._stat.isBrokenLink = true;
          } else {
            throw error;
          }
        }
      }
    }
    return this._stat;
  }
  // 
  // main attributes
  // 
  get exists() {
    const lstat = this.lstat;
    return !lstat.doesntExist;
  }
  get name() {
    return parse3(this.path).name;
  }
  get extension() {
    return parse3(this.path).ext;
  }
  get basename() {
    return this.path && basename3(this.path);
  }
  get parentPath() {
    return this.path && dirname3(this.path);
  }
  relativePathFrom(parentPath) {
    return relative3(parentPath, this.path);
  }
  get link() {
    const lstat = this.lstat;
    if (lstat.isSymlink) {
      return Deno.readLinkSync(this.path);
    } else {
      return null;
    }
  }
  get isSymlink() {
    const lstat = this.lstat;
    return !!lstat.isSymlink;
  }
  get isRelativeSymlink() {
    const lstat = this.lstat;
    const isNotSymlink = !lstat.isSymlink;
    if (isNotSymlink) {
      return false;
    }
    const relativeOrAbsolutePath = Deno.readLinkSync(this.path);
    return !isAbsolute3(relativeOrAbsolutePath);
  }
  get isAbsoluteSymlink() {
    const lstat = this.lstat;
    const isNotSymlink = !lstat.isSymlink;
    if (isNotSymlink) {
      return false;
    }
    const relativeOrAbsolutePath = Deno.readLinkSync(this.path);
    return isAbsolute3(relativeOrAbsolutePath);
  }
  get isBrokenLink() {
    const stat = this.stat;
    return !!stat.isBrokenLink;
  }
  get isLoopOfLinks() {
    const stat = this.stat;
    return !!stat.isLoopOfLinks;
  }
  get isFile() {
    const lstat = this.lstat;
    if (lstat.doesntExist) {
      return false;
    }
    if (!lstat.isSymlink) {
      return lstat.isFile;
    } else {
      return !!this.stat.isFile;
    }
  }
  get isFolder() {
    const lstat = this.lstat;
    if (lstat.doesntExist) {
      return false;
    }
    if (!lstat.isSymlink) {
      return lstat.isDirectory;
    } else {
      return !!this.stat.isDirectory;
    }
  }
  get sizeInBytes() {
    const lstat = this.lstat;
    return lstat.size;
  }
  get permissions() {
    const { mode } = this.lstat;
    return {
      owner: {
        //          rwxrwxrwx
        canRead: !!(256 & mode),
        canWrite: !!(128 & mode),
        canExecute: !!(64 & mode)
      },
      group: {
        canRead: !!(32 & mode),
        canWrite: !!(16 & mode),
        canExecute: !!(8 & mode)
      },
      others: {
        canRead: !!(4 & mode),
        canWrite: !!(2 & mode),
        canExecute: !!(1 & mode)
      }
    };
  }
  // aliases
  get isDirectory() {
    return this.isFolder;
  }
  get dirname() {
    return this.parentPath;
  }
  toJSON() {
    return {
      exists: this.exists,
      name: this.name,
      extension: this.extension,
      basename: this.basename,
      parentPath: this.parentPath,
      isSymlink: this.isSymlink,
      isBrokenLink: this.isBrokenLink,
      isLoopOfLinks: this.isLoopOfLinks,
      isFile: this.isFile,
      isFolder: this.isFolder,
      sizeInBytes: this.sizeInBytes,
      permissions: this.permissions,
      isDirectory: this.isDirectory,
      dirname: this.dirname
    };
  }
};
var defaultOptionsHelper2 = (options) => ({
  renameExtension: options.renameExtension || FileSystem2.defaultRenameExtension,
  overwrite: options.overwrite
});
var fileLockSymbol2 = Symbol.for("fileLock");
var locker2 = globalThis[fileLockSymbol2] || {};
var grabPathLock2 = async (path10) => {
  while (locker2[path10]) {
    await new Promise((resolve15) => setTimeout(resolve15, 70));
  }
  locker2[path10] = true;
};
var pathStandardize2 = (path10) => {
  path10 = path10.path || path10;
  if (typeof path10 == "string" && path10.startsWith("file:///")) {
    path10 = fromFileUrl3(path10);
  }
  return path10;
};
var FileSystem2 = {
  defaultRenameExtension: ".old",
  denoExecutablePath: Deno.execPath(),
  parentPath: dirname3,
  dirname: dirname3,
  basename: basename3,
  extname: extname3,
  join: join4,
  normalize: (path10) => normalize4(pathStandardize2(path10)).replace(/\/$/, ""),
  isAbsolutePath: isAbsolute3,
  isRelativePath: (...args) => !isAbsolute3(...args),
  makeRelativePath: ({ from, to }) => relative3(from.path || from, to.path || to),
  makeAbsolutePath: (path10) => {
    if (!isAbsolute3(path10)) {
      return normalize4(join4(Deno.cwd(), path10));
    } else {
      return normalize4(path10);
    }
  },
  pathDepth(path10) {
    path10 = FileSystem2.normalize(path10);
    let count4 = 0;
    for (const eachChar of path10.path || path10) {
      if (eachChar == "/") {
        count4++;
      }
    }
    if (path10[0] == "/") {
      count4--;
    }
    return count4 + 1;
  },
  pathPieces(path10) {
    path10 = path10.path || path10;
    const result2 = parse3(path10);
    const folderList = [];
    let dirname15 = result2.dir;
    while (true) {
      folderList.push(basename3(dirname15));
      if (dirname15 == dirname3(dirname15)) {
        break;
      }
      dirname15 = dirname3(dirname15);
    }
    folderList.reverse();
    return [folderList, result2.name, result2.ext];
  },
  /**
   * add to name, preserve file extension
   *
   * @example
   * ```js
   * let newName = FileSystem.extendName({ path: "a/blah.thing.js", string: ".old" })
   * newName == "a/blah.old.thing.js"
   * ```
   *
   * @param arg1.path - item path
   * @param arg1.string - the string to append to the name
   * @return {string} - the new path
   */
  extendName({ path: path10, string: string2 }) {
    path10 = pathStandardize2(path10);
    const [name, ...extensions] = basename3(path10).split(".");
    return `${dirname3(path10)}/${name}${string2}${extensions.length == 0 ? "" : `.${extensions.join(".")}`}`;
  },
  /**
   * All Parent Paths
   *
   * @param {String} path - path doesnt need to exist
   * @return {[String]} longest to shortest parent path
   */
  allParentPaths(path10) {
    const pathStartsWithDotSlash = path10.startsWith("./");
    path10 = FileSystem2.normalize(path10);
    if (path10 === ".") {
      return [];
    }
    const dotGotRemoved = pathStartsWithDotSlash && !path10.startsWith("./");
    let previousPath = null;
    let allPaths = [];
    while (1) {
      previousPath = path10;
      path10 = FileSystem2.parentPath(path10);
      if (previousPath === path10) {
        break;
      }
      allPaths.push(path10);
    }
    allPaths.reverse();
    allPaths = allPaths.filter((each2) => each2 != ".");
    if (dotGotRemoved) {
      allPaths.push(".");
    }
    return allPaths;
  },
  pathOfCaller(callerNumber = void 0) {
    const err = new Error();
    let filePaths = findAll(/^.+file:\/\/(\/[\w\W]*?):/gm, err.stack).map((each2) => each2[1]);
    if (callerNumber) {
      filePaths = filePaths.slice(callerNumber);
    }
    try {
      const secondPath = filePaths[1];
      if (secondPath) {
        try {
          if (Deno.statSync(secondPath).isFile) {
            return secondPath;
          }
        } catch (error) {
        }
      }
    } catch (error) {
    }
    return Deno.cwd();
  },
  get home() {
    if (!cache4.home) {
      if (Deno.build.os != "windows") {
        cache4.home = Deno.env.get("HOME");
      } else {
        cache4.home = Deno.env.get("HOMEPATH");
      }
    }
    return cache4.home;
  },
  get workingDirectory() {
    return Deno.cwd();
  },
  set workingDirectory(value) {
    Deno.chdir(value);
  },
  get cwd() {
    return FileSystem2.workingDirectory;
  },
  set cwd(value) {
    return FileSystem2.workingDirectory = value;
  },
  get pwd() {
    return FileSystem2.cwd;
  },
  set pwd(value) {
    return FileSystem2.cwd = value;
  },
  cd(path10) {
    Deno.chdir(path10);
  },
  changeDirectory(path10) {
    Deno.chdir(path10);
  },
  get thisFile() {
    const err = new Error();
    const filePaths = findAll(/^.+file:\/\/(\/[\w\W]*?):/gm, err.stack).map((each2) => each2[1]);
    const firstPath = filePaths[0];
    if (firstPath) {
      try {
        if (Deno.statSync(firstPath).isFile) {
          return firstPath;
        }
      } catch (error) {
      }
    }
    return ":<interpreter>:";
  },
  get thisFolder() {
    const err = new Error();
    const filePaths = findAll(/^.+file:\/\/(\/[\w\W]*?):/gm, err.stack).map((each2) => each2[1]);
    const firstPath = filePaths[0];
    if (firstPath) {
      try {
        if (Deno.statSync(firstPath).isFile) {
          return dirname3(firstPath);
        }
      } catch (error) {
      }
    }
    return Deno.cwd();
  },
  async read(path10) {
    path10 = pathStandardize2(path10);
    await grabPathLock2(path10);
    let output2;
    try {
      output2 = await Deno.readTextFile(path10);
    } catch (error) {
    }
    delete locker2[path10];
    return output2;
  },
  async readBytes(path10) {
    path10 = pathStandardize2(path10);
    await grabPathLock2(path10);
    let output2;
    try {
      output2 = await Deno.readFile(path10);
    } catch (error) {
    }
    delete locker2[path10];
    return output2;
  },
  async *readLinesIteratively(path10) {
    path10 = pathStandardize2(path10);
    await grabPathLock2(path10);
    try {
      const file = await Deno.open(path10);
      try {
        yield* readLines(file);
      } finally {
        Deno.close(file.rid);
      }
    } finally {
      delete locker2[path10];
    }
  },
  async info(fileOrFolderPath, _cachedLstat = null) {
    fileOrFolderPath = pathStandardize2(fileOrFolderPath);
    await grabPathLock2(fileOrFolderPath);
    try {
      const lstat = _cachedLstat || await Deno.lstat(fileOrFolderPath).catch(() => ({ doesntExist: true }));
      let stat = {};
      if (!lstat.isSymlink) {
        stat = {
          isBrokenLink: false,
          isLoopOfLinks: false
        };
      } else {
        try {
          stat = await Deno.stat(fileOrFolderPath);
        } catch (error) {
          if (error.message.match(/^Too many levels of symbolic links/)) {
            stat.isBrokenLink = true;
            stat.isLoopOfLinks = true;
          } else if (error.message.match(/^No such file or directory/)) {
            stat.isBrokenLink = true;
          } else {
            if (!error.message.match(/^PermissionDenied:/)) {
              return { doesntExist: true, permissionDenied: true };
            }
            throw error;
          }
        }
      }
      return new PathInfo2({ path: fileOrFolderPath, _lstatData: lstat, _statData: stat });
    } finally {
      delete locker2[fileOrFolderPath];
    }
  },
  async move({ path: path10, item, newParentFolder, newName, force = true, overwrite = false, renameExtension = null }) {
    item = item || path10;
    const oldPath = item.path || item;
    const oldName = FileSystem2.basename(oldPath);
    const pathInfo = item instanceof Object || FileSystem2.sync.info(oldPath);
    const newPath = `${newParentFolder || FileSystem2.parentPath(oldPath)}/${newName || oldName}`;
    if (pathInfo.isSymlink && !item.isBrokenLink) {
      const link2 = Deno.readLinkSync(pathInfo.path);
      if (!isAbsolute3(link2)) {
        const linkTargetBeforeMove = `${FileSystem2.parentPath(pathInfo.path)}/${link2}`;
        await FileSystem2.relativeLink({
          existingItem: linkTargetBeforeMove,
          newItem: newPath,
          force,
          overwrite,
          renameExtension
        });
        await FileSystem2.remove(pathInfo);
      }
    }
    if (force) {
      FileSystem2.sync.clearAPathFor(newPath, { overwrite, renameExtension });
    }
    await move(oldPath, newPath);
  },
  async remove(fileOrFolder) {
    fileOrFolder = pathStandardize2(fileOrFolder);
    if (fileOrFolder instanceof Array) {
      return Promise.all(fileOrFolder.map(FileSystem2.remove));
    }
    fileOrFolder = fileOrFolder.path || fileOrFolder;
    const pathInfo = await FileSystem2.info(fileOrFolder);
    if (pathInfo.isFile || pathInfo.isSymlink) {
      return Deno.remove(pathInfo.path.replace(/\/+$/, ""));
    } else if (pathInfo.exists) {
      return Deno.remove(pathInfo.path.replace(/\/+$/, ""), { recursive: true });
    }
  },
  async finalTargetOf(path10, options = {}) {
    const { _parentsHaveBeenChecked, cache: cache6 } = { _parentsHaveBeenChecked: false, cache: {}, ...options };
    const originalWasItem = path10 instanceof PathInfo2;
    path10 = path10.path || path10;
    let result2 = await Deno.lstat(path10).catch(() => ({ doesntExist: true }));
    if (result2.doesntExist) {
      return null;
    }
    path10 = await FileSystem2.makeHardPathTo(path10, { cache: cache6 });
    const pathChain = [];
    while (result2.isSymlink) {
      const relativeOrAbsolutePath = await Deno.readLink(path10);
      if (isAbsolute3(relativeOrAbsolutePath)) {
        path10 = relativeOrAbsolutePath;
      } else {
        path10 = `${FileSystem2.parentPath(path10)}/${relativeOrAbsolutePath}`;
      }
      result2 = await Deno.lstat(path10).catch(() => ({ doesntExist: true }));
      if (result2.doesntExist) {
        return null;
      }
      path10 = await FileSystem2.makeHardPathTo(path10, { cache: cache6 });
      if (pathChain.includes(path10)) {
        return null;
      }
      pathChain.push(path10);
    }
    path10 = FileSystem2.normalize(path10);
    if (originalWasItem) {
      return new PathInfo2({ path: path10 });
    } else {
      return path10;
    }
  },
  async nextTargetOf(path10, options = {}) {
    const originalWasItem = path10 instanceof PathInfo2;
    const item = originalWasItem ? path10 : new PathInfo2({ path: path10 });
    const lstat = item.lstat;
    if (lstat.isSymlink) {
      const relativeOrAbsolutePath = Deno.readLinkSync(item.path);
      if (isAbsolute3(relativeOrAbsolutePath)) {
        if (originalWasItem) {
          return new PathInfo2({ path: relativeOrAbsolutePath });
        } else {
          return relativeOrAbsolutePath;
        }
      } else {
        const path11 = `${await FileSystem2.makeHardPathTo(dirname3(item.path))}/${relativeOrAbsolutePath}`;
        if (originalWasItem) {
          return new PathInfo2({ path: path11 });
        } else {
          return path11;
        }
      }
    } else {
      if (originalWasItem) {
        return item;
      } else {
        return item.path;
      }
    }
  },
  async ensureIsFile(path10, options = { overwrite: false, renameExtension: null }) {
    const { overwrite, renameExtension } = defaultOptionsHelper2(options);
    await FileSystem2.ensureIsFolder(FileSystem2.parentPath(path10), { overwrite, renameExtension });
    path10 = path10.path || path10;
    const pathInfo = await FileSystem2.info(path10);
    if (pathInfo.isFile && !pathInfo.isDirectory) {
      return path10;
    } else {
      await FileSystem2.write({ path: path10, data: "" });
      return path10;
    }
  },
  async ensureIsFolder(path10, options = { overwrite: false, renameExtension: null }) {
    const { overwrite, renameExtension } = defaultOptionsHelper2(options);
    path10 = path10.path || path10;
    path10 = FileSystem2.makeAbsolutePath(path10);
    const parentPath = dirname3(path10);
    if (parentPath == path10) {
      return;
    }
    const parent = await FileSystem2.info(parentPath);
    if (!parent.isDirectory) {
      FileSystem2.sync.ensureIsFolder(parentPath, { overwrite, renameExtension });
    }
    let pathInfo = FileSystem2.sync.info(path10);
    if (pathInfo.exists && !pathInfo.isDirectory) {
      if (overwrite) {
        await FileSystem2.remove(path10);
      } else {
        await FileSystem2.moveOutOfTheWay(eachPath, { extension: renameExtension });
      }
    }
    await Deno.mkdir(path10, { recursive: true });
    return path10;
  },
  /**
   * Move/Remove everything and Ensure parent folders
   *
   * @param path
   * @param options.overwrite - if false, then things in the way will be moved instead of deleted
   * @param options.renameExtension - the string to append when renaming files to get them out of the way
   * 
   * @note
   *     very agressive: will change whatever is necessary to make sure a parent exists
   * 
   * @example
   * ```js
   * await FileSystem.clearAPathFor("./something")
   * ```
   */
  async clearAPathFor(path10, options = { overwrite: false, renameExtension: null }) {
    const { overwrite, renameExtension } = defaultOptionsHelper2(options);
    const originalPath = path10;
    const paths = [];
    while (dirname3(path10) !== path10) {
      paths.push(path10);
      path10 = dirname3(path10);
    }
    for (const eachPath2 of paths.reverse()) {
      const info = await FileSystem2.info(eachPath2);
      if (!info.exists) {
        break;
      } else if (info.isFile) {
        if (overwrite) {
          await FileSystem2.remove(eachPath2);
        } else {
          await FileSystem2.moveOutOfTheWay(eachPath2, { extension: renameExtension });
        }
      }
    }
    await Deno.mkdir(dirname3(originalPath), { recursive: true });
    return originalPath;
  },
  async moveOutOfTheWay(path10, options = { extension: null }) {
    const extension = options?.extension || FileSystem2.defaultRenameExtension;
    const info = await FileSystem2.info(path10);
    if (info.exists) {
      const newPath = path10 + extension;
      await FileSystem2.moveOutOfTheWay(newPath, { extension });
      await move(path10, newPath);
    }
  },
  /**
   * find a root folder based on a child path
   *
   * @example
   * ```js
   *     import { FileSystem } from "https://deno.land/x/quickr/main/file_system.js"
   * 
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil(".git")
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil({
   *         subPath:".git",
   *         startPath: FileSystem.pwd,
   *     })
   *
   *     // below will result in that^ same folder (assuming all your .git folders have config files)
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil(".git/config")
   * 
   *     // below will result in the same folder, but only if theres a local master branch
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil(".git/refs/heads/master")
   *```
   */
  async walkUpUntil(subPath, startPath = null) {
    subPath = subPath instanceof PathInfo2 ? subPath.path : subPath;
    if (subPath instanceof Object) {
      var { subPath, startPath } = subPath;
    }
    let here;
    if (!startPath) {
      here = Deno.cwd();
    } else if (isAbsolute3(startPath)) {
      here = startPath;
    } else {
      here = join4(here, startPath);
    }
    while (1) {
      let checkPath = join4(here, subPath);
      const pathInfo = await Deno.lstat(checkPath).catch(() => ({ doesntExist: true }));
      if (!pathInfo.doesntExist) {
        return here;
      }
      if (here == dirname3(here)) {
        return null;
      } else {
        here = dirname3(here);
      }
    }
  },
  // FIXME: make this work for folders with many options for how to handle symlinks
  async copy({ from, to, preserveTimestamps = true, force = true, overwrite = false, renameExtension = null }) {
    const existingItemDoesntExist = (await Deno.stat(from).catch(() => ({ doesntExist: true }))).doesntExist;
    if (existingItemDoesntExist) {
      throw Error(`
Tried to copy from:${from}, to:${to}
but "from" didn't seem to exist

`);
    }
    if (force) {
      FileSystem2.sync.clearAPathFor(to, { overwrite, renameExtension });
    }
    return copy(from, to, { force, preserveTimestamps: true });
  },
  async relativeLink({ existingItem, newItem, force = true, overwrite = false, allowNonExistingTarget = false, renameExtension = null }) {
    const existingItemPath = (existingItem.path || existingItem).replace(/\/+$/, "");
    const newItemPath = FileSystem2.normalize((newItem.path || newItem).replace(/\/+$/, ""));
    const existingItemDoesntExist = (await Deno.lstat(existingItemPath).catch(() => ({ doesntExist: true }))).doesntExist;
    if (!allowNonExistingTarget && existingItemDoesntExist) {
      throw Error(`
Tried to create a relativeLink between existingItem:${existingItemPath}, newItem:${newItemPath}
but existingItem didn't actually exist`);
    } else {
      const parentOfNewItem = FileSystem2.parentPath(newItemPath);
      await FileSystem2.ensureIsFolder(parentOfNewItem, { overwrite, renameExtension });
      const hardPathToNewItem = `${await FileSystem2.makeHardPathTo(parentOfNewItem)}/${FileSystem2.basename(newItemPath)}`;
      const hardPathToExistingItem = await FileSystem2.makeHardPathTo(existingItemPath);
      const pathFromNewToExisting = relative3(hardPathToNewItem, hardPathToExistingItem).replace(/^\.\.\//, "");
      if (force) {
        FileSystem2.sync.clearAPathFor(hardPathToNewItem, { overwrite, renameExtension });
      }
      return Deno.symlink(
        pathFromNewToExisting,
        hardPathToNewItem
      );
    }
  },
  async absoluteLink({ existingItem, newItem, force = true, allowNonExistingTarget = false, overwrite = false, renameExtension = null }) {
    existingItem = (existingItem.path || existingItem).replace(/\/+$/, "");
    const newItemPath = FileSystem2.normalize(newItem.path || newItem).replace(/\/+$/, "");
    const existingItemDoesntExist = (await Deno.lstat(existingItem).catch(() => ({ doesntExist: true }))).doesntExist;
    if (!allowNonExistingTarget && existingItemDoesntExist) {
      throw Error(`
Tried to create a relativeLink between existingItem:${existingItem}, newItemPath:${newItemPath}
but existingItem didn't actually exist`);
    } else {
      const parentOfNewItem = FileSystem2.parentPath(newItemPath);
      await FileSystem2.ensureIsFolder(parentOfNewItem, { overwrite, renameExtension });
      const hardPathToNewItem = `${await FileSystem2.makeHardPathTo(parentOfNewItem)}/${FileSystem2.basename(newItemPath)}`;
      if (force) {
        FileSystem2.sync.clearAPathFor(hardPathToNewItem, { overwrite, renameExtension });
      }
      return Deno.symlink(
        FileSystem2.makeAbsolutePath(existingItem),
        newItemPath
      );
    }
  },
  async *iterateBasenamesIn(pathOrFileInfo) {
    const info = pathOrFileInfo instanceof PathInfo2 ? pathOrFileInfo : await FileSystem2.info(pathOrFileInfo);
    if (info.isFolder) {
      for await (const dirEntry of Deno.readDir(info.path)) {
        yield dirEntry.name;
      }
    }
  },
  listBasenamesIn(pathOrFileInfo) {
    return asyncIteratorToList3(FileSystem2.iterateBasenamesIn(pathOrFileInfo));
  },
  async *iteratePathsIn(pathOrFileInfo, options = { recursively: false, shouldntInclude: null, shouldntExplore: null, searchOrder: "breadthFirstSearch", maxDepth: Infinity, dontFollowSymlinks: false, dontReturnSymlinks: false, maxDepthFromRoot: null }) {
    let info;
    try {
      info = pathOrFileInfo instanceof PathInfo2 ? pathOrFileInfo : await FileSystem2.info(pathOrFileInfo);
    } catch (error) {
      if (!error.message.match(/^PermissionDenied:/)) {
        throw error;
      }
    }
    const path10 = info.path;
    const startingDepth = FileSystem2.makeAbsolutePath(path10).split("/").length - 1;
    options.recursively = options.recursively == false && options.maxDepth == 1 ? false : options.recursively;
    if (options.maxDepthFromRoot == null) {
      options.maxDepthFromRoot = Infinity;
    }
    if (options.maxDepth != Infinity && options.maxDepth != null) {
      options.maxDepthFromRoot = startingDepth + options.maxDepth;
    }
    options.maxDepth = null;
    if (startingDepth < options.maxDepthFromRoot) {
      if (!options.recursively) {
        if (info.isFolder) {
          if (!options.shouldntInclude) {
            for await (const each2 of Deno.readDir(path10)) {
              if (options.dontReturnSymlinks && each2.isSymlink) {
                continue;
              }
              yield join4(path10, each2.name);
            }
          } else {
            const shouldntInclude = options.shouldntInclude;
            for await (const each2 of Deno.readDir(path10)) {
              const eachPath2 = join4(path10, each2.name);
              if (options.dontReturnSymlinks && each2.isSymlink) {
                continue;
              }
              const shouldntIncludeThis = shouldntInclude && await shouldntInclude(eachPath2);
              if (!shouldntIncludeThis) {
                yield eachPath2;
              }
            }
          }
        }
      } else {
        options = { exclude: /* @__PURE__ */ new Set(), searchOrder: "breadthFirstSearch", maxDepth: Infinity, ...options };
        options.searchOrder = options.searchOrder || "breadthFirstSearch";
        const { shouldntExplore, shouldntInclude } = options;
        if (!["breadthFirstSearch", "depthFirstSearch"].includes(options.searchOrder)) {
          throw Error(`when calling FileSystem.iterateItemsIn('${path10}', { searchOrder: ${options.searchOrder} })

    The searchOrder currently can only be 'depthFirstSearch' or 'breadthFirstSearch'
    However, it was not either of those: ${options.searchOrder}`);
        }
        const useBreadthFirstSearch = options.searchOrder == "breadthFirstSearch";
        const shouldntExploreThis = shouldntExplore && await shouldntExplore(info.path, info);
        if (!shouldntExploreThis && info.isFolder) {
          options.exclude = options.exclude instanceof Set ? options.exclude : new Set(options.exclude);
          if (!options.exclude.has(path10)) {
            const followSymlinks = !options.dontFollowSymlinks;
            const absolutePathVersion = FileSystem2.makeAbsolutePath(path10);
            options.exclude.add(absolutePathVersion);
            const searchAfterwords = [];
            for await (const entry of Deno.readDir(path10)) {
              const eachPath2 = join4(path10, entry.name);
              if (options.dontReturnSymlinks && each.isSymlink) {
                continue;
              }
              const shouldntIncludeThis = shouldntInclude && await shouldntInclude(eachPath2);
              if (!shouldntIncludeThis) {
                yield eachPath2;
              }
              if (entry.isFile) {
                continue;
              }
              if (followSymlinks && !entry.isDirectory) {
                let isSymlinkToDirectory = false;
                try {
                  isSymlinkToDirectory = (await Deno.stat(eachPath2)).isDirectory;
                } catch (error) {
                }
                if (!isSymlinkToDirectory) {
                  continue;
                }
              }
              if (useBreadthFirstSearch) {
                searchAfterwords.push(eachPath2);
              } else {
                for await (const eachSubPath of FileSystem2.iteratePathsIn(eachPath2, options)) {
                  yield eachSubPath;
                }
              }
            }
            options.recursively = false;
            while (searchAfterwords.length > 0) {
              const next = searchAfterwords.shift();
              for await (const eachSubPath of FileSystem2.iteratePathsIn(next, options)) {
                yield eachSubPath;
                searchAfterwords.push(eachSubPath);
              }
            }
          }
        }
      }
    }
  },
  listPathsIn(pathOrFileInfo, options) {
    return asyncIteratorToList3(FileSystem2.iteratePathsIn(pathOrFileInfo, options));
  },
  async *iterateItemsIn(pathOrFileInfo, options = { recursively: false, shouldntInclude: null, shouldntExplore: null, searchOrder: "breadthFirstSearch", maxDepth: Infinity }) {
    options = { exclude: /* @__PURE__ */ new Set(), searchOrder: "breadthFirstSearch", maxDepth: Infinity, ...options };
    options.searchOrder = options.searchOrder || "breadthFirstSearch";
    options.recursively = options.recursively == false && options.maxDepth == 1 ? false : options.recursively;
    const { shouldntExplore, shouldntInclude } = options;
    const info = pathOrFileInfo instanceof PathInfo2 ? pathOrFileInfo : await FileSystem2.info(pathOrFileInfo);
    const path10 = info.path;
    if (!["breadthFirstSearch", "depthFirstSearch"].includes(options.searchOrder)) {
      throw Error(`when calling FileSystem.iterateItemsIn('${path10}', { searchOrder: ${options.searchOrder} })

    The searchOrder currently can only be 'depthFirstSearch' or 'breadthFirstSearch'
    However, it was not either of those: ${options.searchOrder}`);
    }
    const useBreadthFirstSearch = options.searchOrder == "breadthFirstSearch";
    const shouldntExploreThis = shouldntExplore && await shouldntExplore(info);
    if (!shouldntExploreThis && options.maxDepth > 0 && info.isFolder) {
      options.exclude = options.exclude instanceof Set ? options.exclude : new Set(options.exclude);
      if (!options.exclude.has(path10)) {
        const absolutePathVersion = FileSystem2.makeAbsolutePath(path10);
        options.exclude.add(absolutePathVersion);
        options.maxDepth -= 1;
        const searchAfterwords = [];
        for await (const entry of Deno.readDir(path10)) {
          const eachItem = await FileSystem2.info(join4(path10, entry.name));
          const shouldntIncludeThis = shouldntInclude && await shouldntInclude(eachItem);
          if (!shouldntIncludeThis) {
            yield eachItem;
          }
          if (options.recursively) {
            if (eachItem.isFolder) {
              if (useBreadthFirstSearch) {
                searchAfterwords.push(eachItem);
              } else {
                for await (const eachSubPath of FileSystem2.iterateItemsIn(eachItem, options)) {
                  yield eachSubPath;
                }
              }
            }
          }
        }
        options.recursively = false;
        while (searchAfterwords.length > 0) {
          const next = searchAfterwords.shift();
          for await (const eachSubItem of FileSystem2.iterateItemsIn(next, options)) {
            yield eachSubItem;
            if (eachSubItem.isFolder) {
              searchAfterwords.push(eachSubItem);
            }
          }
        }
      }
    }
  },
  async listItemsIn(pathOrFileInfo, options) {
    const outputPromises = [];
    for await (const eachPath2 of FileSystem2.iteratePathsIn(pathOrFileInfo, options)) {
      outputPromises.push(FileSystem2.info(eachPath2));
    }
    return Promise.all(outputPromises);
  },
  // includes symlinks if they link to files and pipes
  async listFileItemsIn(pathOrFileInfo, options = { treatAllSymlinksAsFiles: false }) {
    const { treatAllSymlinksAsFiles } = { treatAllSymlinksAsFiles: false, ...options };
    const items = await FileSystem2.listItemsIn(pathOrFileInfo, options);
    if (treatAllSymlinksAsFiles) {
      return items.filter((eachItem) => eachItem.isFile || treatAllSymlinksAsFiles && eachItem.isSymlink);
    } else {
      return items.filter((eachItem) => eachItem.isFile);
    }
  },
  async listFilePathsIn(pathOrFileInfo, options = { treatAllSymlinksAsFiles: false }) {
    return (await FileSystem2.listFileItemsIn(pathOrFileInfo, options)).map((each2) => each2.path);
  },
  async listFileBasenamesIn(pathOrFileInfo, options = { treatAllSymlinksAsFiles: false }) {
    return (await FileSystem2.listFileItemsIn(pathOrFileInfo, options)).map((each2) => each2.basename);
  },
  async listFolderItemsIn(pathOrFileInfo, options = { ignoreSymlinks: false }) {
    const { ignoreSymlinks } = { ignoreSymlinks: false, ...options };
    const items = await FileSystem2.listItemsIn(pathOrFileInfo, options);
    if (ignoreSymlinks) {
      return items.filter((eachItem) => eachItem.isFolder && !eachItem.isSymlink);
    } else {
      return items.filter((eachItem) => eachItem.isFolder);
    }
  },
  async listFolderPathsIn(pathOrFileInfo, options = { ignoreSymlinks: false }) {
    return (await FileSystem2.listFolderItemsIn(pathOrFileInfo, options)).map((each2) => each2.path);
  },
  async listFolderBasenamesIn(pathOrFileInfo, options = { ignoreSymlinks: false }) {
    return (await FileSystem2.listFolderItemsIn(pathOrFileInfo, options)).map((each2) => each2.basename);
  },
  recursivelyIterateItemsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    options.recursively = true;
    if (options.onlyHardlinks) {
      if (options.shouldntInclude) {
        const originalshouldntInclude = options.shouldntInclude;
        options.shouldntInclude = (each2) => each2.isSymlink || originalshouldntInclude(each2);
      } else {
        options.shouldntInclude = (each2) => each2.isSymlink;
      }
    }
    if (options.dontFollowSymlinks) {
      if (options.shouldntExplore) {
        const originalShouldntExplore = options.shouldntInclude;
        options.shouldntExplore = (each2) => each2.isSymlink || originalShouldntExplore(each2);
      } else {
        options.shouldntExplore = (each2) => each2.isSymlink;
      }
    }
    return FileSystem2.iterateItemsIn(pathOrFileInfo, options);
  },
  recursivelyIteratePathsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    options.recursively = true;
    if (options.onlyHardlinks) {
      if (options.shouldntInclude) {
        const originalshouldntInclude = options.shouldntInclude;
        options.shouldntInclude = (each2) => each2.isSymlink || originalshouldntInclude(each2);
      } else {
        options.shouldntInclude = (each2) => each2.isSymlink;
      }
    }
    return FileSystem2.iteratePathsIn(pathOrFileInfo, options);
  },
  recursivelyListPathsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    return asyncIteratorToList3(FileSystem2.recursivelyIteratePathsIn(pathOrFileInfo, options));
  },
  recursivelyListItemsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    return asyncIteratorToList3(FileSystem2.recursivelyIterateItemsIn(pathOrFileInfo, options));
  },
  async *globIterator(pattern, options = { startPath: null }) {
    pattern = FileSystem2.normalize(pattern);
    var { startPath, ...iteratePathsOptions } = options;
    startPath = startPath || "./";
    const originalStartPath = startPath;
    startPath = FileSystem2.makeAbsolutePath(startPath);
    const firstGlob = pattern.indexOf("*");
    if (firstGlob != -1) {
      const startingString = pattern.slice(0, firstGlob);
      const furthestConstantSlash = startingString.lastIndexOf("/");
      if (furthestConstantSlash != -1) {
        if (pattern[0] == "/") {
          startPath = pattern.slice(0, furthestConstantSlash);
        } else {
          startPath = `${startPath}/${pattern.slice(0, furthestConstantSlash)}`;
        }
      }
      pattern = pattern.slice(furthestConstantSlash + 1);
    }
    let maxDepthFromRoot;
    if (pattern.match(/\*\*/)) {
      maxDepthFromRoot = Infinity;
    } else {
      maxDepthFromRoot = `${FileSystem2.makeAbsolutePath(startPath)}/${pattern}`.split("/").length - 1;
    }
    const fullPattern = `${startPath}/${pattern}`;
    const regex3 = globToRegExp2(fullPattern);
    const partials = fullPattern.split("/");
    let partialPattern = partials.shift();
    let partialRegexString = `^\\.$|${globToRegExp2(partialPattern).source}`;
    for (const each2 of partials) {
      partialPattern += "/" + each2;
      partialRegexString += "|" + globToRegExp2(partialPattern).source;
    }
    const partialRegex = new RegExp(partialRegexString);
    for await (const eachPath2 of FileSystem2.iteratePathsIn(startPath, { recursively: true, maxDepthFromRoot, ...iteratePathsOptions, shouldntExplore: (eachPath3) => !eachPath3.match(partialRegex) })) {
      if (eachPath2.match(regex3) || FileSystem2.makeAbsolutePath(eachPath2).match(regex3)) {
        yield FileSystem2.makeRelativePath({
          from: originalStartPath,
          to: eachPath2
        });
      }
    }
  },
  glob(pattern, options = { startPath: null }) {
    return asyncIteratorToList3(FileSystem2.globIterator(pattern, options));
  },
  async getPermissions({ path: path10 }) {
    const { mode } = await Deno.lstat(path10);
    return {
      owner: {
        //          rwxrwxrwx
        canRead: !!(256 & mode),
        canWrite: !!(128 & mode),
        canExecute: !!(64 & mode)
      },
      group: {
        canRead: !!(32 & mode),
        canWrite: !!(16 & mode),
        canExecute: !!(8 & mode)
      },
      others: {
        canRead: !!(4 & mode),
        canWrite: !!(2 & mode),
        canExecute: !!(1 & mode)
      }
    };
  },
  /**
  * Add/set file permissions
  *
  * @param {String} args.path - 
  * @param {Object|Boolean} args.recursively - 
  * @param {Object} args.permissions - 
  * @param {Object} args.permissions.owner - 
  * @param {Boolean} args.permissions.owner.canRead - 
  * @param {Boolean} args.permissions.owner.canWrite - 
  * @param {Boolean} args.permissions.owner.canExecute - 
  * @param {Object} args.permissions.group - 
  * @param {Boolean} args.permissions.group.canRead - 
  * @param {Boolean} args.permissions.group.canWrite - 
  * @param {Boolean} args.permissions.group.canExecute - 
  * @param {Object} args.permissions.others - 
  * @param {Boolean} args.permissions.others.canRead - 
  * @param {Boolean} args.permissions.others.canWrite - 
  * @param {Boolean} args.permissions.others.canExecute - 
  * @return {null} 
  *
  * @example
  * ```js
  *  await FileSystem.addPermissions({
  *      path: fileOrFolderPath,
  *      permissions: {
  *          owner: {
  *              canExecute: true,
  *          },
  *      }
  *  })
  * ```
  */
  async addPermissions({ path: path10, permissions = { owner: {}, group: {}, others: {} }, recursively = false }) {
    permissions = { owner: {}, group: {}, others: {}, ...permissions };
    let permissionNumber = 0;
    let fileInfo;
    if (!(Object.keys(permissions.owner).length === Object.keys(permissions.group).length === Object.keys(permissions.others).length === 3)) {
      fileInfo = await FileSystem2.info(path10);
      permissionNumber = fileInfo.lstat.mode & 511;
    }
    if (permissions.owner.canRead != null) {
      if (permissions.owner.canRead) {
        permissionNumber |= 256;
      } else {
        permissionNumber &= 767;
      }
    }
    if (permissions.owner.canWrite != null) {
      if (permissions.owner.canWrite) {
        permissionNumber |= 128;
      } else {
        permissionNumber &= 895;
      }
    }
    if (permissions.owner.canExecute != null) {
      if (permissions.owner.canExecute) {
        permissionNumber |= 64;
      } else {
        permissionNumber &= 959;
      }
    }
    if (permissions.group.canRead != null) {
      if (permissions.group.canRead) {
        permissionNumber |= 32;
      } else {
        permissionNumber &= 991;
      }
    }
    if (permissions.group.canWrite != null) {
      if (permissions.group.canWrite) {
        permissionNumber |= 16;
      } else {
        permissionNumber &= 1007;
      }
    }
    if (permissions.group.canExecute != null) {
      if (permissions.group.canExecute) {
        permissionNumber |= 8;
      } else {
        permissionNumber &= 1015;
      }
    }
    if (permissions.others.canRead != null) {
      if (permissions.others.canRead) {
        permissionNumber |= 4;
      } else {
        permissionNumber &= 1019;
      }
    }
    if (permissions.others.canWrite != null) {
      if (permissions.others.canWrite) {
        permissionNumber |= 2;
      } else {
        permissionNumber &= 1021;
      }
    }
    if (permissions.others.canExecute != null) {
      if (permissions.others.canExecute) {
        permissionNumber |= 1;
      } else {
        permissionNumber &= 1022;
      }
    }
    if (recursively == false || fileInfo instanceof Object && fileInfo.isFile || !(fileInfo instanceof Object) && (await FileSystem2.info(path10)).isFile) {
      return Deno.chmod(path10.path || path10, permissionNumber);
    } else {
      const promises = [];
      const paths = await FileSystem2.recursivelyListPathsIn(path10, { onlyHardlinks: false, dontFollowSymlinks: false, ...recursively });
      for (const eachPath2 of paths) {
        promises.push(
          Deno.chmod(eachPath2, permissionNumber).catch(console.error)
        );
      }
      return new Promise(async (resolve15, reject) => {
        for (const each2 of promises) {
          await each2;
        }
        resolve15();
      });
    }
  },
  // alias
  setPermissions(...args) {
    return FileSystem2.addPermissions(...args);
  },
  async write({ path: path10, data, force = true, overwrite = false, renameExtension = null }) {
    path10 = pathStandardize2(path10);
    await grabPathLock2(path10);
    if (force) {
      FileSystem2.sync.ensureIsFolder(FileSystem2.parentPath(path10), { overwrite, renameExtension });
      const info = FileSystem2.sync.info(path10);
      if (info.isDirectory) {
        FileSystem2.sync.remove(path10);
      }
    }
    let output2;
    if (typeof data == "string") {
      output2 = await Deno.writeTextFile(path10, data);
    } else if (typedArrayClasses4.some((dataClass) => data instanceof dataClass)) {
      output2 = await Deno.writeFile(path10, data);
    } else if (isGeneratorType3(data) || data[Symbol.iterator] || data[Symbol.asyncIterator]) {
      const file = await Deno.open(path10, { read: true, write: true, create: true, truncate: true });
      const encoder3 = new TextEncoder();
      const encode2 = encoder3.encode.bind(encoder3);
      try {
        let index = 0;
        for await (let packet of data) {
          if (typeof packet == "string") {
            packet = encode2(packet);
          }
          await Deno.write(file.rid, packet);
        }
      } finally {
        Deno.close(file.rid);
      }
    }
    delete locker2[path10];
    return output2;
  },
  async append({ path: path10, data, force = true, overwrite = false, renameExtension = null }) {
    path10 = pathStandardize2(path10);
    await grabPathLock2(path10);
    if (force) {
      FileSystem2.sync.ensureIsFolder(FileSystem2.parentPath(path10), { overwrite, renameExtension });
      const info = FileSystem2.sync.info(path10);
      if (info.isDirectory) {
        FileSystem2.sync.remove(path10);
      }
    }
    const file = await Deno.open(path10, { read: true, write: true, create: true });
    await file.seek(0, Deno.SeekMode.End);
    if (typeof data == "string") {
      await file.write(new TextEncoder().encode(data));
    } else {
      await file.write(data);
    }
    await file.close();
    delete locker2[path10];
  },
  async makeHardPathTo(path10, options = {}) {
    var { cache: cache6 } = { cache: {}, ...options };
    if (cache6[path10]) {
      return cache6[path10];
    }
    const [folders, name, extension] = FileSystem2.pathPieces(FileSystem2.makeAbsolutePath(path10));
    let topDownPath = ``;
    for (const eachFolderName of folders) {
      topDownPath += `/${eachFolderName}`;
      if (cache6[topDownPath]) {
        topDownPath = cache6[topDownPath];
        continue;
      }
      const unchangedPath = topDownPath;
      const info = await FileSystem2.info(topDownPath);
      if (info.isSymlink) {
        const absolutePathToIntermediate = await FileSystem2.finalTargetOf(info.path, { _parentsHaveBeenChecked: true, cache: cache6 });
        if (absolutePathToIntermediate == null) {
          return null;
        }
        topDownPath = topDownPath.slice(0, -(eachFolderName.length + 1));
        const relativePath = FileSystem2.makeRelativePath({
          from: topDownPath,
          to: absolutePathToIntermediate
        });
        topDownPath += `/${relativePath}`;
        topDownPath = normalize4(topDownPath);
      }
      cache6[unchangedPath] = topDownPath;
    }
    const hardPath = normalize4(`${topDownPath}/${name}${extension}`);
    cache6[path10] = hardPath;
    return hardPath;
  },
  async walkUpImport(path10, start) {
    const startPath = start || FileSystem2.pathOfCaller(1);
    const nearestPath = await FileSystem2.walkUpUntil(path10, startPath);
    if (nearestPath) {
      const absolutePath = FileSystem2.makeAbsolutePath(`${nearestPath}/${path10}`);
      return import(toFileUrl3(absolutePath).href);
    } else {
      throw Error(`Tried to walkUpImport ${path10}, starting at ${startPath}, but was unable to find any files`);
    }
  },
  sync: {
    // things that are already sync
    get parentPath() {
      return FileSystem2.parentPath;
    },
    get dirname() {
      return FileSystem2.dirname;
    },
    get basename() {
      return FileSystem2.basename;
    },
    get extname() {
      return FileSystem2.extname;
    },
    get join() {
      return FileSystem2.join;
    },
    get thisFile() {
      return FileSystem2.thisFile;
    },
    get thisFolder() {
      return FileSystem2.thisFolder;
    },
    get normalize() {
      return FileSystem2.normalize;
    },
    get isAbsolutePath() {
      return FileSystem2.isAbsolutePath;
    },
    get isRelativePath() {
      return FileSystem2.isRelativePath;
    },
    get makeRelativePath() {
      return FileSystem2.makeRelativePath;
    },
    get makeAbsolutePath() {
      return FileSystem2.makeAbsolutePath;
    },
    get pathDepth() {
      return FileSystem2.pathDepth;
    },
    get pathPieces() {
      return FileSystem2.pathPieces;
    },
    get extendName() {
      return FileSystem2.extendName;
    },
    get allParentPaths() {
      return FileSystem2.allParentPaths;
    },
    get pathOfCaller() {
      return FileSystem2.pathOfCaller;
    },
    get home() {
      return FileSystem2.home;
    },
    get workingDirectory() {
      return FileSystem2.workingDirectory;
    },
    get cwd() {
      return FileSystem2.cwd;
    },
    get pwd() {
      return FileSystem2.pwd;
    },
    get cd() {
      return FileSystem2.cd;
    },
    get changeDirectory() {
      return FileSystem2.changeDirectory;
    },
    set workingDirectory(value) {
      return FileSystem2.workingDirectory = value;
    },
    set cwd(value) {
      return FileSystem2.workingDirectory = value;
    },
    set pwd(value) {
      return FileSystem2.workingDirectory = value;
    },
    info(fileOrFolderPath, _cachedLstat = null) {
      let lstat = _cachedLstat;
      try {
        lstat = Deno.lstatSync(fileOrFolderPath);
      } catch (error) {
        lstat = { doesntExist: true };
      }
      let stat = {};
      if (!lstat.isSymlink) {
        stat = {
          isBrokenLink: false,
          isLoopOfLinks: false
        };
      } else {
        try {
          stat = Deno.statSync(fileOrFolderPath);
        } catch (error) {
          if (error.message.match(/^Too many levels of symbolic links/)) {
            stat.isBrokenLink = true;
            stat.isLoopOfLinks = true;
          } else if (error.message.match(/^No such file or directory/)) {
            stat.isBrokenLink = true;
          } else {
            throw error;
          }
        }
      }
      return new PathInfo2({ path: fileOrFolderPath, _lstatData: lstat, _statData: stat });
    },
    read(path10) {
      path10 = pathStandardize2(path10);
      let output2;
      try {
        output2 = Deno.readTextFileSync(path10);
      } catch (error) {
      }
      return output2;
    },
    readBytes(path10) {
      path10 = pathStandardize2(path10);
      let output2;
      try {
        output2 = Deno.readFileSync(path10);
      } catch (error) {
      }
      return output2;
    },
    *readLinesIteratively(path10) {
      path10 = pathStandardize2(path10);
      const file = Deno.openSync(path10);
      try {
        yield* readLines(file);
      } finally {
        Deno.close(file.rid);
      }
    },
    /**
     * find a root folder based on a child path
     *
     * @example
     * ```js
     *     import { FileSystem } from "https://deno.land/x/quickr/main/file_system.js"
     * 
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil(".git")
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil({
     *         subPath:".git",
     *         startPath: FileSystem.pwd,
     *     })
     *
     *     // below will result in that^ same folder (assuming all your .git folders have config files)
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil(".git/config")
     * 
     *     // below will result in the same folder, but only if theres a local master branch
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil(".git/refs/heads/master")
     *```
     */
    walkUpUntil(subPath, startPath = null) {
      subPath = subPath instanceof PathInfo2 ? subPath.path : subPath;
      if (subPath instanceof Object) {
        var { subPath, startPath } = subPath;
      }
      let here;
      if (!startPath) {
        here = Deno.cwd();
      } else if (isAbsolute3(startPath)) {
        here = startPath;
      } else {
        here = join4(here, startPath);
      }
      while (1) {
        let checkPath = join4(here, subPath);
        const pathInfo = Deno.lstatSync(checkPath).catch(() => ({ doesntExist: true }));
        if (!pathInfo.doesntExist) {
          return here;
        }
        if (here == dirname3(here)) {
          return null;
        } else {
          here = dirname3(here);
        }
      }
    },
    nextTargetOf(path10, options = {}) {
      const originalWasItem = path10 instanceof PathInfo2;
      const item = originalWasItem ? path10 : new PathInfo2({ path: path10 });
      const lstat = item.lstat;
      if (lstat.isSymlink) {
        const relativeOrAbsolutePath = Deno.readLinkSync(item.path);
        if (isAbsolute3(relativeOrAbsolutePath)) {
          if (originalWasItem) {
            return new PathInfo2({ path: relativeOrAbsolutePath });
          } else {
            return relativeOrAbsolutePath;
          }
        } else {
          const path11 = `${FileSystem2.sync.makeHardPathTo(dirname3(item.path))}/${relativeOrAbsolutePath}`;
          if (originalWasItem) {
            return new PathInfo2({ path: path11 });
          } else {
            return path11;
          }
        }
      } else {
        if (originalWasItem) {
          return item;
        } else {
          return item.path;
        }
      }
    },
    finalTargetOf(path10, options = {}) {
      const { _parentsHaveBeenChecked, cache: cache6 } = { _parentsHaveBeenChecked: false, cache: {}, ...options };
      const originalWasItem = path10 instanceof PathInfo2;
      path10 = path10.path || path10;
      let result2 = Deno.lstatSync(path10).catch(() => ({ doesntExist: true }));
      if (result2.doesntExist) {
        return null;
      }
      path10 = FileSystem2.sync.makeHardPathTo(path10, { cache: cache6 });
      const pathChain = [];
      while (result2.isSymlink) {
        const relativeOrAbsolutePath = Deno.readLinkSync(path10);
        if (isAbsolute3(relativeOrAbsolutePath)) {
          path10 = relativeOrAbsolutePath;
        } else {
          path10 = `${FileSystem2.parentPath(path10)}/${relativeOrAbsolutePath}`;
        }
        result2 = Deno.lstatSync(path10).catch(() => ({ doesntExist: true }));
        if (result2.doesntExist) {
          return null;
        }
        path10 = FileSystem2.sync.makeHardPathTo(path10, { cache: cache6 });
        if (pathChain.includes(path10)) {
          return null;
        }
        pathChain.push(path10);
      }
      path10 = FileSystem2.normalize(path10);
      if (originalWasItem) {
        return new PathInfo2({ path: path10 });
      } else {
        return path10;
      }
    },
    makeHardPathTo(path10, options = {}) {
      var { cache: cache6 } = { cache: {}, ...options };
      if (cache6[path10]) {
        return cache6[path10];
      }
      const [folders, name, extension] = FileSystem2.pathPieces(FileSystem2.makeAbsolutePath(path10));
      let topDownPath = ``;
      for (const eachFolderName of folders) {
        topDownPath += `/${eachFolderName}`;
        if (cache6[topDownPath]) {
          topDownPath = cache6[topDownPath];
          continue;
        }
        const unchangedPath = topDownPath;
        const info = FileSystem2.sync.info(topDownPath);
        if (info.isSymlink) {
          const absolutePathToIntermediate = FileSystem2.sync.finalTargetOf(info.path, { _parentsHaveBeenChecked: true, cache: cache6 });
          if (absolutePathToIntermediate == null) {
            return null;
          }
          topDownPath = topDownPath.slice(0, -(eachFolderName.length + 1));
          const relativePath = FileSystem2.makeRelativePath({
            from: topDownPath,
            to: absolutePathToIntermediate
          });
          topDownPath += `/${relativePath}`;
          topDownPath = normalize4(topDownPath);
        }
        cache6[unchangedPath] = topDownPath;
      }
      const hardPath = normalize4(`${topDownPath}/${name}${extension}`);
      cache6[path10] = hardPath;
      return hardPath;
    },
    remove(fileOrFolder) {
      if (fileOrFolder instanceof Array) {
        return fileOrFolder.map(FileSystem2.sync.remove);
      }
      fileOrFolder = fileOrFolder.path || fileOrFolder;
      let exists2 = false;
      let item;
      try {
        item = Deno.lstatSync(fileOrFolder);
        exists2 = true;
      } catch (error) {
      }
      if (exists2) {
        if (item.isFile || item.isSymlink) {
          return Deno.removeSync(fileOrFolder.replace(/\/+$/, ""));
        } else {
          return Deno.removeSync(fileOrFolder.replace(/\/+$/, ""), { recursive: true });
        }
      }
    },
    moveOutOfTheWay(path10, options = { extension: null }) {
      path10 = pathStandardize2(path10);
      const extension = options?.extension || FileSystem2.defaultRenameExtension;
      const info = FileSystem2.sync.info(path10);
      if (info.exists) {
        const newPath = path10 + extension;
        FileSystem2.sync.moveOutOfTheWay(newPath, { extension });
        moveSync(path10, newPath);
      }
    },
    ensureIsFolder(path10, options = { overwrite: false, renameExtension: null }) {
      path10 = pathStandardize2(path10);
      const { overwrite, renameExtension } = defaultOptionsHelper2(options);
      path10 = path10.path || path10;
      path10 = FileSystem2.makeAbsolutePath(path10);
      const parentPath = dirname3(path10);
      if (parentPath == path10) {
        return;
      }
      const parent = FileSystem2.sync.info(parentPath);
      if (!parent.isDirectory) {
        FileSystem2.sync.ensureIsFolder(parentPath, { overwrite, renameExtension });
      }
      let pathInfo = FileSystem2.sync.info(path10);
      if (pathInfo.exists && !pathInfo.isDirectory) {
        if (overwrite) {
          FileSystem2.sync.remove(path10);
        } else {
          FileSystem2.sync.moveOutOfTheWay(path10, { extension: renameExtension });
        }
      }
      Deno.mkdirSync(path10, { recursive: true });
      return path10;
    },
    /**
     * Move/Remove everything and Ensure parent folders
     *
     * @param path
     * @param options.overwrite - if false, then things in the way will be moved instead of deleted
     * @param options.extension - the string to append when renaming files to get them out of the way
     * 
     * @example
     * ```js
     *     FileSystem.sync.clearAPathFor("./something")
     * ```
     */
    clearAPathFor(path10, options = { overwrite: false, renameExtension: null }) {
      const { overwrite, renameExtension } = defaultOptionsHelper2(options);
      const originalPath = path10;
      const paths = [];
      while (dirname3(path10) !== path10) {
        paths.push(path10);
        path10 = dirname3(path10);
      }
      for (const eachPath2 of paths.reverse()) {
        const info = FileSystem2.sync.info(eachPath2);
        if (!info.exists) {
          break;
        } else if (info.isFile) {
          if (overwrite) {
            FileSystem2.sync.remove(eachPath2);
          } else {
            FileSystem2.sync.moveOutOfTheWay(eachPath2, { extension: renameExtension });
          }
        }
      }
      Deno.mkdirSync(dirname3(originalPath), { recursive: true });
      return originalPath;
    },
    append({ path: path10, data, force = true, overwrite = false, renameExtension = null }) {
      path10 = pathStandardize2(path10);
      if (force) {
        FileSystem2.sync.ensureIsFolder(FileSystem2.parentPath(path10), { overwrite, renameExtension });
        const info = FileSystem2.sync.info(path10);
        if (info.isDirectory) {
          FileSystem2.sync.remove(path10);
        }
      }
      const file = Deno.openSync(path10, { read: true, write: true, create: true });
      file.seekSync(0, Deno.SeekMode.End);
      if (typeof data == "string") {
        file.writeSync(new TextEncoder().encode(data));
      } else {
        file.writeSync(data);
      }
      file.close();
    },
    write({ path: path10, data, force = true, overwrite = false, renameExtension = null }) {
      path10 = pathStandardize2(path10);
      if (force) {
        FileSystem2.sync.ensureIsFolder(FileSystem2.parentPath(path10), { overwrite, renameExtension });
        const info = FileSystem2.sync.info(path10);
        if (info.isDirectory) {
          FileSystem2.sync.remove(path10);
        }
      }
      let output2;
      if (typeof data == "string") {
        output2 = Deno.writeTextFileSync(path10, data);
      } else if (typedArrayClasses4.some((dataClass) => data instanceof dataClass)) {
        output2 = Deno.writeFileSync(path10, data);
      } else if (isGeneratorType3(data) || data[Symbol.iterator] || data[Symbol.asyncIterator]) {
        const file = Deno.openSync(path10, { read: true, write: true, create: true, truncate: true });
        const encoder3 = new TextEncoder();
        const encode2 = encoder3.encode.bind(encoder3);
        try {
          let index = 0;
          for (let packet of data) {
            if (typeof packet == "string") {
              packet = encode2(packet);
            }
            Deno.writeSync(file.rid, packet);
          }
        } finally {
          Deno.close(file.rid);
        }
      }
      return output2;
    }
    // TODO:
    // move
    // ensureIsFile
    // copy
    // relativeLink
    // absoluteLink
    // iterateBasenamesIn
    // iteratePathsIn
    // iterateItemsIn
    // listItemsIn
    // listFileItemsIn
    // listFilePathsIn
    // listFileBasenamesIn
    // listFolderItemsIn
    // listFolderPathsIn
    // listFolderBasenamesIn
    // globIterator
    // getPermissions
    // addPermissions
    // Note:
    // cannot be sync:
    // walkUpImport 
  }
};
var glob2 = FileSystem2.glob;

// https://deno.land/x/quickr@0.6.54/main/operating_system.js
var cache5 = {};
var stdoutRun2 = async (args) => {
  const process = Deno.run({ cmd: args, stdout: "piped", stderr: "piped" });
  const output2 = await process.output();
  return new TextDecoder().decode(output2).replace(/\n$/, "");
};
var OperatingSystem2 = {
  commonChecks: {
    isMac: Deno.build.os == "darwin",
    isWindows: Deno.build.os == "windows",
    isLinux: Deno.build.os == "linux",
    get isWsl() {
      if (cache5.isWsl != null) {
        return cache5.isWsl;
      }
      if (!(OperatingSystem2.commonChecks.isMac || OperatingSystem2.commonChecks.isWindows)) {
        if (Deno.env.get("WSLENV")) {
          return cache5.isWsl = true;
        }
        try {
          const { isFile } = Deno.lstatSync("/mnt/c");
          return cache5.isWsl = true;
        } catch (error) {
        }
      }
      return cache5.isWsl = false;
    }
  },
  commonName: {
    "darwin": "MacOS",
    "windows": "Windows",
    "linux": "Linux"
  }[Deno.build.os],
  kernel: {
    commonName: Deno.build.os
  },
  architecture: Deno.build.architecture,
  get versionArray() {
    return new Promise(async (resolve15, reject) => {
      let versionArray = [];
      if (OperatingSystem2.commonChecks.isWindows) {
        try {
          const windowsVersionString = await stdoutRun2(["pwsh", "-Command", `[System.Environment]::OSVersion.Version`]);
          versionArray = windowsVersionString.replace(/^[\w\W]*?(\d+\.\d+\.\d+)[\w\W]*/, "$1").split(".").map((each2) => each2 - 0);
        } catch (error) {
          console.warn(`unable to get version string for Windows: ${error.message}`);
        }
      } else if (OperatingSystem2.commonChecks.isMac) {
        try {
          const macVersionString = await stdoutRun2(["/usr/bin/sw_vers", "-productVersion"]);
          versionArray = macVersionString.replace(/^[\w\W]*?(\d+\.\d+(\.\d+)?)[\w\W]*/, "$1").split(".").map((each2) => each2 - 0);
        } catch (error) {
          console.warn(`unable to get version string for MacOS: ${error.message}`);
        }
      } else {
        try {
          const outputString = await stdoutRun2(["uname", "-r"]);
          versionArray = outputString.replace(/^[\w\W]*?((\d+\.)+\d+)[\w\W]*/, "$1").split(".").map((each2) => each2 - 0);
        } catch (error) {
          console.warn(`unable to get version string for Linux: ${error.message}`);
        }
      }
    });
  },
  get username() {
    if (!cache5.username) {
      if (Deno.build.os != "windows") {
        cache5.username = Deno.env.get("USER");
      } else {
        cache5.username = Deno.env.get("USERNAME");
      }
    }
    return cache5.username;
  },
  get home() {
    if (!cache5.home) {
      if (Deno.build.os != "windows") {
        cache5.home = Deno.env.get("HOME");
      } else {
        cache5.home = Deno.env.get("HOMEPATH");
      }
    }
    return cache5.home;
  },
  async idForUsername(username) {
    if (OperatingSystem2.commonChecks.isMac) {
      if (!cache5.macOsUserToUid) {
        const userListString = await stdoutRun2(["dscl", ".", "-list", "/Users", "UniqueID"]);
        const userList = userListString.split(/\n/);
        const userNamesAndIds = userList.map((each2) => {
          const match = each2.match(/(.+?)(-?\d+)$/, "$1");
          if (match) {
            const username2 = match[1].trim();
            const uid = match[2];
            return [username2, uid];
          }
        }).filter((each2) => each2);
        const idsAndUsernames = userNamesAndIds.map(([username2, id]) => [id, username2]);
        cache5.macOsUserToUid = Object.fromEntries(userNamesAndIds);
        cache5.macOsUidToUser = Object.fromEntries(idsAndUsernames);
      }
      return cache5.macOsUserToUid[username];
    } else if (OperatingSystem2.commonChecks.isWindows) {
      return await stdoutRun2(["pwsh", "-Command", `Get-ADUser -Identity '${username.replace(/'/, "''")}' | select SID`]);
    } else if (OperatingSystem2.commonChecks.isLinux) {
      return await stdoutRun2(["id", "-u", OperatingSystem2.username]);
    }
  }
};

// https://deno.land/x/quickr@0.6.54/main/console.js
var realConsole2 = globalThis.console;
var isBrowserContext2 = typeof document != "undefined" && typeof window != "undefined";
var env2 = null;
var originalThing2 = realConsole2;
var symbolForConsoleLog2 = Symbol.for("console.log");
var proxySymbol2 = Symbol.for("Proxy");
var thisProxySymbol2 = Symbol("thisProxy");
globalThis.console = new Proxy(originalThing2, {
  defineProperty: Reflect.defineProperty,
  getPrototypeOf: Reflect.getPrototypeOf,
  // Object.keys
  ownKeys(...args) {
    return Reflect.ownKeys(...args);
  },
  // function call (original value needs to be a function)
  apply(original, context, ...args) {
    console.log(args);
  },
  // new operator (original value needs to be a class)
  construct(...args) {
  },
  get(original, key, ...args) {
    if (key == proxySymbol2 || key == thisProxySymbol2) {
      return true;
    }
    if (key == "log") {
      return (...args2) => {
        realConsole2.log(
          ...args2.map((each2) => {
            if (each2 instanceof Object && each2[symbolForConsoleLog2] instanceof Function) {
              return each2[symbolForConsoleLog2]();
            }
            return each2;
          })
        );
      };
    }
    return Reflect.get(original, key, ...args);
  },
  set(original, key, ...args) {
    if (key == proxySymbol2 || key == thisProxySymbol2) {
      return;
    }
    return Reflect.set(original, key, ...args);
  }
});
var codeToEscapeString2 = (code2) => `\x1B[${code2}m`;
var ansiRegexPattern2 = /[\u001B\u009B][[\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\d\/#&.:=?%@~_]+)*|[a-zA-Z\d]+(?:;[-a-zA-Z\d\/#&.:=?%@~_]*)*)?\u0007)|(?:(?:\d{1,4}(?:;\d{0,4})*)?[\dA-PR-TZcf-nq-uy=><~]))/g;
function clearAnsiStylesFrom2(string2) {
  return `${string2}`.replace(ansiRegexPattern2, "");
}
var styleStrings2 = {
  reset: codeToEscapeString2(0),
  bold: codeToEscapeString2(1),
  dim: codeToEscapeString2(2),
  italic: codeToEscapeString2(3),
  underline: codeToEscapeString2(4),
  slowBlink: codeToEscapeString2(5),
  // not widely supported
  fastBlink: codeToEscapeString2(6),
  // not widely supported
  inverse: codeToEscapeString2(7),
  strikethrough: codeToEscapeString2(9),
  primary: codeToEscapeString2(11),
  // forground colors
  black: codeToEscapeString2(30),
  red: codeToEscapeString2(31),
  green: codeToEscapeString2(32),
  yellow: codeToEscapeString2(33),
  blue: codeToEscapeString2(34),
  magenta: codeToEscapeString2(35),
  cyan: codeToEscapeString2(36),
  white: codeToEscapeString2(37),
  lightBlack: codeToEscapeString2(90),
  lightRed: codeToEscapeString2(91),
  lightGreen: codeToEscapeString2(92),
  lightYellow: codeToEscapeString2(93),
  lightBlue: codeToEscapeString2(94),
  lightMagenta: codeToEscapeString2(95),
  lightCyan: codeToEscapeString2(96),
  lightWhite: codeToEscapeString2(97),
  // background
  blackBackground: codeToEscapeString2(40),
  redBackground: codeToEscapeString2(41),
  greenBackground: codeToEscapeString2(42),
  yellowBackground: codeToEscapeString2(43),
  blueBackground: codeToEscapeString2(44),
  magentaBackground: codeToEscapeString2(45),
  cyanBackground: codeToEscapeString2(46),
  whiteBackground: codeToEscapeString2(47),
  lightBlackBackground: codeToEscapeString2(100),
  lightRedBackground: codeToEscapeString2(101),
  lightGreenBackground: codeToEscapeString2(102),
  lightYellowBackground: codeToEscapeString2(103),
  lightBlueBackground: codeToEscapeString2(104),
  lightMagentaBackground: codeToEscapeString2(105),
  lightCyanBackground: codeToEscapeString2(106),
  lightWhiteBackground: codeToEscapeString2(107)
};
Object.assign(styleStrings2, {
  gray: styleStrings2.lightBlack,
  grey: styleStrings2.lightBlack,
  lightGray: styleStrings2.white,
  // lightWhite is "true" white
  lightGrey: styleStrings2.white,
  // lightWhite is "true" white
  grayBackground: styleStrings2.lightBlackBackground,
  greyBackground: styleStrings2.lightBlackBackground,
  lightGrayBackground: styleStrings2.whiteBackground,
  lightGreyBackground: styleStrings2.whiteBackground
});
var styleObjectSymbol2 = Symbol("consoleStyle");
var styleObject2 = (rootStyleString) => {
  const createStyleAccumulator = (styleString) => {
    const styleAccumulator = (strings, ...values) => {
      const objectToStyledString = (interpolatedValue, styles) => {
        let singleCombinedString2 = "";
        if (interpolatedValue instanceof Object && interpolatedValue[styleObjectSymbol2] instanceof Function) {
          singleCombinedString2 += interpolatedValue[styleObjectSymbol2]();
        } else {
          singleCombinedString2 += toString(interpolatedValue);
        }
        singleCombinedString2 += styleStrings2.reset + styleAccumulator.styles.join("");
        return singleCombinedString2;
      };
      let singleCombinedString = "";
      if (!(strings instanceof Array) || strings.length < 1 || !strings.every((each2) => typeof each2 == "string")) {
        for (const each2 of [strings, ...values]) {
          singleCombinedString += objectToStyledString(each2);
        }
      } else {
        for (const index in values) {
          singleCombinedString += strings[index];
          singleCombinedString += objectToStyledString(values[index]);
        }
        const lastString = strings.slice(-1)[0];
        singleCombinedString += lastString;
      }
      styleAccumulator.sequence.push(singleCombinedString);
      return styleAccumulator;
    };
    styleAccumulator[styleObjectSymbol2] = true;
    styleAccumulator.styles = [styleString];
    styleAccumulator.sequence = [styleString];
    styleAccumulator.toString = () => styleAccumulator.sequence.join("") + styleStrings2.reset;
    styleAccumulator[Deno.customInspect] = () => styleAccumulator.sequence.join("") + styleStrings2.reset;
    styleAccumulator[symbolForConsoleLog2] = () => {
      const asString3 = styleAccumulator.toString();
      if (Console2.reliableColorSupport.includesAnsi) {
        return asString3;
      } else {
        return clearAnsiStylesFrom2(asString3);
      }
    };
    return Object.defineProperties(styleAccumulator, Object.fromEntries(Object.entries(styleStrings2).map(
      ([key, value]) => [
        key,
        {
          get() {
            styleAccumulator.styles.push(value);
            styleAccumulator.sequence.push(value);
            return styleAccumulator;
          }
        }
      ]
    )));
  };
  const topLevelStyleAccumulator = (strings, ...values) => createStyleAccumulator(rootStyleString)(strings, ...values);
  topLevelStyleAccumulator[styleObjectSymbol2] = true;
  topLevelStyleAccumulator.toString = () => rootStyleString;
  topLevelStyleAccumulator[symbolForConsoleLog2] = () => {
    const asString3 = topLevelStyleAccumulator.toString();
    if (Console2.reliableColorSupport.includesAnsi) {
      return asString3;
    } else {
      return clearAnsiStylesFrom2(asString3);
    }
  };
  return Object.defineProperties(topLevelStyleAccumulator, Object.fromEntries(Object.entries(styleStrings2).map(
    ([eachStyleName, eachStyleString]) => [
      eachStyleName,
      {
        get() {
          const styleAccumulator = createStyleAccumulator(rootStyleString);
          styleAccumulator.styles.push(eachStyleString);
          styleAccumulator.sequence.push(eachStyleString);
          return styleAccumulator;
        }
      }
    ]
  )));
};
var bold4 = styleObject2(styleStrings2.bold);
var reset3 = styleObject2(styleStrings2.reset);
var dim3 = styleObject2(styleStrings2.dim);
var italic3 = styleObject2(styleStrings2.italic);
var underline3 = styleObject2(styleStrings2.underline);
var inverse2 = styleObject2(styleStrings2.inverse);
var strikethrough2 = styleObject2(styleStrings2.strikethrough);
var black2 = styleObject2(styleStrings2.black);
var white3 = styleObject2(styleStrings2.white);
var red4 = styleObject2(styleStrings2.red);
var green4 = styleObject2(styleStrings2.green);
var blue2 = styleObject2(styleStrings2.blue);
var yellow3 = styleObject2(styleStrings2.yellow);
var cyan3 = styleObject2(styleStrings2.cyan);
var magenta2 = styleObject2(styleStrings2.magenta);
var lightBlack2 = styleObject2(styleStrings2.lightBlack);
var lightWhite2 = styleObject2(styleStrings2.lightWhite);
var lightRed2 = styleObject2(styleStrings2.lightRed);
var lightGreen2 = styleObject2(styleStrings2.lightGreen);
var lightBlue2 = styleObject2(styleStrings2.lightBlue);
var lightYellow2 = styleObject2(styleStrings2.lightYellow);
var lightMagenta2 = styleObject2(styleStrings2.lightMagenta);
var lightCyan2 = styleObject2(styleStrings2.lightCyan);
var blackBackground2 = styleObject2(styleStrings2.blackBackground);
var whiteBackground2 = styleObject2(styleStrings2.whiteBackground);
var redBackground2 = styleObject2(styleStrings2.redBackground);
var greenBackground2 = styleObject2(styleStrings2.greenBackground);
var blueBackground2 = styleObject2(styleStrings2.blueBackground);
var yellowBackground2 = styleObject2(styleStrings2.yellowBackground);
var magentaBackground2 = styleObject2(styleStrings2.magentaBackground);
var cyanBackground2 = styleObject2(styleStrings2.cyanBackground);
var lightBlackBackground2 = styleObject2(styleStrings2.lightBlackBackground);
var lightRedBackground2 = styleObject2(styleStrings2.lightRedBackground);
var lightGreenBackground2 = styleObject2(styleStrings2.lightGreenBackground);
var lightYellowBackground2 = styleObject2(styleStrings2.lightYellowBackground);
var lightBlueBackground2 = styleObject2(styleStrings2.lightBlueBackground);
var lightMagentaBackground2 = styleObject2(styleStrings2.lightMagentaBackground);
var lightCyanBackground2 = styleObject2(styleStrings2.lightCyanBackground);
var lightWhiteBackground2 = styleObject2(styleStrings2.lightWhiteBackground);
var gray3 = styleObject2(styleStrings2.gray);
var grey2 = styleObject2(styleStrings2.grey);
var lightGray2 = styleObject2(styleStrings2.lightGray);
var lightGrey2 = styleObject2(styleStrings2.lightGrey);
var grayBackground2 = styleObject2(styleStrings2.grayBackground);
var greyBackground2 = styleObject2(styleStrings2.greyBackground);
var lightGrayBackground2 = styleObject2(styleStrings2.lightGrayBackground);
var lightGreyBackground2 = styleObject2(styleStrings2.lightGreyBackground);
var colorSupportCache2 = {
  includesAnsi: null,
  includes256: null,
  includes16m: null
};
var Console2 = {
  // TODO: add signal handler
  // Deno.addSignalListener("SIGINT", (...args)=>{
  //     console.debug(`args is:`,args)
  // })
  log(...args) {
    if (args.length == 0) {
      console.log();
    }
    let [arg1, ...others] = args.map((each2) => {
      if (each2 instanceof Object && each2[symbolForConsoleLog2] instanceof Function) {
        return each2[symbolForConsoleLog2]();
      }
      return each2;
    });
    if (typeof arg1 == "string") {
      arg1 = arg1.replace("%", "%%");
    }
    if (!isBrowserContext2) {
      if (!Console2.reliableColorSupport.includesAnsi) {
        arg1 = clearAnsiStylesFrom2(arg1);
        others = others.map((each2) => {
          if (typeof each2 == "string") {
            return clearAnsiStylesFrom2(each2);
          } else {
            return each2;
          }
        });
      }
      realConsole2.log(arg1, ...others);
    } else {
      if (args[0][symbolForConsoleLog2] && typeof args[0].styleString == "string") {
        realConsole2.log(`%c${arg1}${others.map((each2) => `${each2}`).join("")}`, args[0].styleString);
      } else {
        realConsole2.log(arg1, ...others);
      }
    }
    return Console2;
  },
  get env() {
    return env2 = env2 || new Proxy(
      Deno.env.toObject(),
      {
        // Object.keys
        ownKeys(target) {
          return Object.keys(Deno.env.toObject());
        },
        has(original, key) {
          if (typeof key === "symbol") {
            return false;
          } else {
            return Deno.env.get(key) !== void 0;
          }
        },
        get(original, key) {
          if (typeof key === "symbol") {
            return original[key];
          } else {
            return Deno.env.get(key);
          }
        },
        set(original, key, value) {
          original[key] = value;
          if (typeof key !== "symbol") {
            Deno.env.set(key, value);
          }
          return true;
        },
        deleteProperty(original, key) {
          if (typeof key === "symbol") {
            return void 0;
          } else {
            return Deno.env.delete(key);
          }
        }
      }
    );
  },
  disableColorIfNonIteractive: true,
  askFor: {
    // in the future once Deno.setRaw is stable, add a askFor.password using: https://github.com/caspervonb/deno-prompts
    line(question) {
      return prompt(question);
    },
    confirmation(question) {
      console.log(question);
      prompt("[use CTRL+C to quit, or press enter to continue]");
    },
    positiveIntegerOrZero(question) {
      while (1) {
        console.log(question);
        const answer = prompt(question);
        const asNumber = answer - 0;
        const isRealNumber = asNumber !== asNumber && asNumber * 2 !== asNumber;
        const isInteger2 = Math.round(asNumber) === asNumber;
        const isNonNegative = asNumber >= 0;
        if (isRealNumber && isInteger2 && isNonNegative) {
          return asNumber;
        } else {
          if (!isRealNumber) {
            console.log(`I don't think ${answer} is a real number, please try again`);
          }
          if (!isInteger2) {
            console.log(`I don't think ${answer} is an integer, please try again`);
          }
          if (!isNonNegative) {
            console.log(`I don't think ${answer} is \u2265 0, please try again`);
          }
        }
      }
    },
    yesNo(question) {
      while (true) {
        let answer = prompt(question);
        const match = `${answer}`.match(/^ *(y|yes|n|no) *\n?$/i);
        if (match) {
          if (match[1][0] == "y" || match[1][0] == "Y") {
            return true;
          } else {
            return false;
          }
        } else {
          console.log("[ please respond with y/n, yes/no, or use CTRL+C to cancel ]");
        }
      }
    },
    oneOf(keyValues, question = "Please type one of the names from the list above") {
      if (keyValues instanceof Array) {
        keyValues = Object.fromEntries(keyValues.map((each2, index) => [index, each2]));
      }
      const keys = Object.keys(keyValues);
      if (keys.length == 0) {
        console.warn(`Tried to perform Console.askFor.oneOf(object) but the object was empty`);
        return void 0;
      }
      const longest2 = Math.max(keys.map((each2) => each2.length));
      while (true) {
        for (const [key, value] of Object.entries(keyValues)) {
          const valueAsString = indent2({ string: `${value}
`, by: " ".repeat(longest2 + 2), noLead: true });
          console.log(``, `${key}: ${valueAsString}`);
        }
        let answer = prompt(question);
        if (keys.includes(answer)) {
          return keyValues[answer];
        } else {
          console.log("\n\n[ please pick one of the listed names, or use CTRL+C to cancel ]");
        }
      }
    }
  },
  get paths() {
    const spliter = OperatingSystem2.commonChecks.isWindows ? ";" : ":";
    return Deno.env.get("PATH").split(spliter);
  },
  get reliableColorSupport() {
    if (colorSupportCache2.includesAnsi != null) {
      return colorSupportCache2;
    }
    let terminalSupport;
    if (!Deno.isatty(0)) {
      terminalSupport = {
        includesAnsi: false,
        includes256: false,
        includes16m: false
      };
    } else if ("NO_COLOR" in Console2.env) {
      terminalSupport = {
        includesAnsi: false,
        includes256: false,
        includes16m: false
      };
    } else {
      if (OperatingSystem2.commonChecks.isWindows || OperatingSystem2.commonChecks.isWsl) {
        if (Deno.env.get("WT_SESSION")) {
          terminalSupport = {
            includesAnsi: true,
            includes256: true,
            includes16m: true
          };
        } else {
          terminalSupport = {
            includesAnsi: false,
            includes256: false,
            includes16m: false
          };
        }
      } else {
        if ("TERM_PROGRAM" in Console2.env) {
          const version = Number.parseInt((Console2.env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          if (Console2.env.TERM_PROGRAM == "iTerm.app") {
            if (version >= 3) {
              terminalSupport = {
                includesAnsi: true,
                includes256: true,
                includes16m: true
              };
            } else {
              terminalSupport = {
                includesAnsi: true,
                includes256: true,
                includes16m: false
              };
            }
          } else if (Console2.env.TERM_PROGRAM == "Apple_Terminal") {
            terminalSupport = {
              includesAnsi: true,
              includes256: true,
              includes16m: false
            };
          }
        }
        if (Console2.env.TERM === "dumb") {
          terminalSupport = {
            includesAnsi: false,
            includes256: false,
            includes16m: false
          };
        } else if ("CI" in Console2.env) {
          terminalSupport = {
            includesAnsi: ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE", "DRONE"].some((sign) => sign in Console2.env) || Console2.env.CI_NAME === "codeship",
            includes256: false,
            includes16m: false
          };
        } else if (Console2.env.COLORTERM === "truecolor") {
          terminalSupport = {
            includesAnsi: true,
            includes256: true,
            includes16m: true
          };
        } else if (/-256(color)?$/i.test(Console2.env.TERM)) {
          terminalSupport = {
            includesAnsi: true,
            includes256: true,
            includes16m: false
          };
        } else if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Console2.env.TERM)) {
          terminalSupport = {
            includesAnsi: true,
            includes256: false,
            includes16m: false
          };
        } else if ("COLORTERM" in Console2.env) {
          terminalSupport = {
            includesAnsi: true,
            includes256: false,
            includes16m: false
          };
        } else {
          terminalSupport = {
            includesAnsi: false,
            includes256: false,
            includes16m: false
          };
        }
      }
    }
    colorSupportCache2.includesAnsi = terminalSupport.includesAnsi;
    colorSupportCache2.includes256 = terminalSupport.includes256;
    colorSupportCache2.includes16m = terminalSupport.includes16m;
    return colorSupportCache2;
  }
};

// https://deno.land/x/quickr@0.6.54/main/run.js
var timeoutSymbol2 = Symbol("timeout");
var envSymbol2 = Symbol("env");
var cwdSymbol2 = Symbol("cwd");
var stdinSymbol2 = Symbol("stdin");
var stdoutSymbol2 = Symbol("stdout");
var stderrSymbol2 = Symbol("stderr");
var stdoutAndErrSymbol2 = Symbol("stdoutAndErr");
var overwriteSymbol2 = Symbol("overwrite");
var appendSymbol2 = Symbol("append");
var asString2 = Symbol("asString");
var throwIfFails2 = Symbol("throwIfFails");
var zipInto2 = Symbol("zipInto");
var mergeInto2 = Symbol("mergeInto");
var returnAsString2 = Symbol("returnAsString");
var Timeout2 = ({ gentlyBy, waitBeforeUsingForce }) => [timeoutSymbol2, { gentlyBy, waitBeforeUsingForce }];
var Env2 = (envVars) => [envSymbol2, envVars];
var Cwd2 = (newDirectory) => [cwdSymbol2, newDirectory];
var Stdin2 = (...streamsFilesOrStrings) => [stdinSymbol2, streamsFilesOrStrings];
var Stdout2 = (...pathsFilesStreamsOrSymbols) => [stdoutSymbol2, pathsFilesStreamsOrSymbols];
var Stderr2 = (...pathsFilesStreamsOrSymbols) => [stderrSymbol2, pathsFilesStreamsOrSymbols];
var Out2 = (...pathsFilesStreamsOrSymbols) => [stdoutAndErrSymbol2, pathsFilesStreamsOrSymbols];
var Overwrite2 = (fileOrFilePath) => [overwriteSymbol2, fileOrFilePath];
var AppendTo2 = (fileOrFilePath) => [appendSymbol2, fileOrFilePath];
var isReadable2 = (obj) => obj instanceof Object && obj.read instanceof Function;
var isWritable2 = (obj) => obj instanceof Object && obj.write instanceof Function;
var concatUint8Arrays2 = (arrays) => new Uint8Array(
  // simplified from: https://stackoverflow.com/questions/49129643/how-do-i-merge-an-array-of-uint8arrays
  arrays.reduce((acc, curr) => (acc.push(...curr), acc), [])
);
var { isWindows: isWindows7, isLinux: isLinux2, isMac: isMac2 } = OperatingSystem2.commonChecks;
var alreadyOpenFiles2 = {};
var ridToPath2 = {};
var realDenoOpen2 = Deno.open.bind(Deno);
Deno.open = function(...args) {
  const path10 = FileSystem2.makeAbsolutePath(args[0]);
  if (!alreadyOpenFiles2[path10]) {
    alreadyOpenFiles2[path10] = realDenoOpen2(...args).then((file) => {
      ridToPath2[file.rid] = path10;
      const realClose = file.close;
      file.close = function(...args2) {
        delete alreadyOpenFiles2[path10];
        realClose(...args2);
      }.bind(file);
      return file;
    });
  }
  return alreadyOpenFiles2[path10];
}.bind(Deno);
var realDenoOpenSync2 = Deno.openSync.bind(Deno);
Deno.openSync = function(...args) {
  const path10 = FileSystem2.makeAbsolutePath(args[0]);
  if (!alreadyOpenFiles2[path10]) {
    const file = realDenoOpenSync2(...args);
    ridToPath2[file.rid] = path10;
    const realClose = file.close;
    file.close = function(...args2) {
      delete alreadyOpenFiles2[path10];
      realClose(...args2);
    }.bind(file);
    alreadyOpenFiles2[path10] = file;
  }
  return alreadyOpenFiles2[path10];
}.bind(Deno);
var run3 = (maybeStrings, ...args) => {
  let newArgs = [];
  const argSplitter = /[ \t]+/;
  if (maybeStrings instanceof Array) {
    maybeStrings = [...maybeStrings];
    const lastString = maybeStrings.pop();
    for (const eachString of maybeStrings) {
      const innerArgs = eachString.split(argSplitter);
      for (const each2 of innerArgs) {
        if (each2.length > 0) {
          newArgs.push(each2);
        }
      }
      newArgs.push(args.shift());
    }
    const endingArgsString = lastString.trim();
    if (endingArgsString.length > 0) {
      const endingArgs = endingArgsString.split(argSplitter);
      for (const each2 of endingArgs) {
        newArgs.push(each2);
      }
    }
    args = newArgs;
  } else {
    args = [maybeStrings, ...args];
  }
  const commandMetaData = {
    timeout: { gentlyBy: void 0, waitBeforeUsingForce: void 0 },
    env: void 0,
    cwd: void 0,
    stdin: void 0,
    stdout: void 0,
    stderr: void 0,
    outAndError: []
  };
  for (const each2 of args) {
    if (typeof each2 == "symbol") {
      if (each2 == throwIfFails2) {
        commandMetaData.throwIfFails = true;
      }
    }
    if (each2 instanceof Array && typeof each2[0] == "symbol") {
      const [symbol, value] = each2;
      if (symbol === timeoutSymbol2) {
        Object.assign(commandMetaData.timeout, value);
      }
      if (symbol === envSymbol2) {
        commandMetaData.env = value;
      }
      if (symbol === cwdSymbol2) {
        commandMetaData.cwd = value;
      }
      if (symbol === stdinSymbol2) {
        commandMetaData.stdin = value;
      }
      if (symbol === stdoutSymbol2) {
        commandMetaData.stdout = value;
      }
      if (symbol === stderrSymbol2) {
        commandMetaData.stderr = value;
      }
      if (symbol === stdoutAndErrSymbol2) {
        commandMetaData.outAndError = value;
      }
    }
  }
  const runArg = {
    cmd: args.filter((each2) => typeof each2 == "string"),
    env: commandMetaData.env,
    cwd: commandMetaData.cwd,
    stdin: void 0,
    stdout: void 0,
    stderr: void 0
  };
  const syncStatus = { done: false, exitCode: void 0, success: void 0 };
  const asyncPart = async () => {
    if (
      // either both should be null or both should be set
      commandMetaData.timeout.gentlyBy == null !== (commandMetaData.timeout.waitBeforeUsingForce == null) || commandMetaData.timeout.gentlyBy != null && (!(commandMetaData.timeout.gentlyBy >= 0) || !(commandMetaData.timeout.waitBeforeUsingForce >= 0))
    ) {
      throw Error(`
When running command:
    ${JSON.stringify(runArg.cmd)}
it was given a:
    Timeout(${JSON.stringify(commandMetaData.timeout)})
however both "gentlyBy" and "waitBeforeUsingForce" are needed.
For example, if 
    gentlyBy: 1000
    waitBeforeUsingForce: 500
it would be force killed 1.5sec after the process started.
If you never want force to be used, do {waitBeforeUsingForce: Infinity}

`);
    }
    if (runArg.cwd !== void 0) {
      const folderExists = await Deno.stat(runArg.cwd).then(({ isDirectory: isDirectory2 }) => isDirectory2).catch(() => false);
      if (!folderExists) {
        throw Error(`
When running command:
    ${JSON.stringify(runArg.cmd)}
it was given a Cwd (cwd) of:
${JSON.stringify(runArg.cwd)}
but that doesn't seem to be a path to a folder, so the command would fail.

`);
      }
    }
    let stdinWriter = void 0;
    if (commandMetaData.stdin !== void 0) {
      let stdinArgs = commandMetaData.stdin;
      let index = 0;
      for (const each2 of stdinArgs) {
        if (each2 instanceof Promise) {
          stdinArgs[index] = await each2;
        }
        ++index;
      }
      if (stdinArgs.length == 0) {
        runArg.stdin = "piped";
      } else if (stdinArgs.length == 1 && stdinArgs[0] == null) {
        runArg.stdin = "null";
      } else {
        stdinArgs = stdinArgs.filter((each2) => each2 != null);
        if (stdinArgs.length == 0) {
          throw Error(`when calling run() with the command: 
    ${JSON.stringify(runArg.cmd)}
An Stdin() was given, but it wasn't given any arguments
if you want Stdin to be nothing (instead of the default Stdin(Deno.stdin)) put Stdin(null)

`);
        } else {
          runArg.stdin = "piped";
          if (stdinArgs.every((each2) => typeof each2 == "string" || each2 instanceof Uint8Array)) {
            const allUint8Arrays = stdinArgs.map((each2) => typeof each2 != "string" ? each2 : new TextEncoder().encode(each2));
            stdinWriter = concatUint8Arrays2(allUint8Arrays);
          } else {
            const first = stdinArgs[0];
            let prev;
            if (typeof first == "string") {
              stdinWriter = readableStreamFromReader(new StringReader(first));
              prev = "string";
            } else if (first instanceof Uint8Array) {
              stdinWriter = readableStreamFromReader(new Buffer(first));
              prev = "uint8array";
            } else if (first instanceof ReadableStream) {
              stdinWriter = first;
              prev = "readableStream";
            } else if (isReadable2(first)) {
              stdinWriter = readableStreamFromReader(first);
              prev = "readable";
            } else {
              throw Error(`when calling run() with the command: 
    ${JSON.stringify(runArg.cmd)}
An Stdin() was given, but there was a problem with one of the arguments.
The argument can be a string, a file (Deno.open("./path")), bytes (Uint8Array), or any readable object (like Deno.stdin or the .stdout of another run command)
but instead of any of those I received:
    ${first}

`);
            }
            for (const each2 of stdinArgs.slice(1)) {
              if (each2 === mergeInto2 || each2 === zipInto2) {
                prev = each2;
                continue;
              }
              let newStream;
              if (typeof each2 == "string") {
                newStream = readableStreamFromReader(new StringReader(each2));
                current = "string";
              } else if (each2 instanceof Uint8Array) {
                newStream = readableStreamFromReader(new Buffer(each2));
                current = "uint8";
              } else if (each2 instanceof ReadableStream) {
                newStream = each2;
                current = "readableStream";
              } else if (isReadable2(each2)) {
                newStream = readableStreamFromReader(each2);
                current = "readable";
              } else {
                throw Error(`when calling run() with the command: 
    ${JSON.stringify(runArg.cmd)}
An Stdin() was given, but there was a problem with one of the arguments.
The argument can be a string, a file (Deno.open("./path")), bytes (Uint8Array), or any readable object (like Deno.stdin or the .stdout of another run command)
but instead of any of those I received:
    ${each2}

`);
              }
              if (prev !== zipInto2 && (prev === mergeInto2 || prev == "string" || prev == "uint8array" || current == "string" || current == "uint8array")) {
                stdinWriter = stdinWriter.mergeReadableStreams(stdinWriter, newStream);
              } else {
                stdinWriter = stdinWriter.zipReadableStreams(stdinWriter, newStream);
              }
            }
          }
        }
      }
    }
    const outStreamNames = ["stdout", "stderr"];
    if (commandMetaData.outAndError.length > 0) {
      for (const each2 of outStreamNames) {
        if (!(commandMetaData[each2] instanceof Array)) {
          commandMetaData[each2] = [];
        }
        commandMetaData[each2] = commandMetaData[each2].concat(commandMetaData.outAndError);
      }
    }
    for (const each2 of outStreamNames) {
      if (commandMetaData[each2] !== void 0) {
        if (commandMetaData[each2].length == 0) {
          runArg[each2] = "piped";
        } else if (commandMetaData[each2].length == 1 && commandMetaData[each2][0] === null) {
          runArg[each2] = "null";
        } else {
          runArg[each2] = "piped";
          commandMetaData[each2] = [...new Set(commandMetaData[each2].filter((each3) => each3 != null))];
        }
      }
    }
    const openFiles = {};
    const convertReturnStreamArg = async (arg) => {
      if (arg === returnAsString2) {
        return arg;
      }
      if (arg instanceof Array) {
        if (typeof arg[0] == "symbol") {
          let [symbol, value] = arg;
          if (symbol === overwriteSymbol2) {
            if (typeof value == "string") {
              const path10 = FileSystem2.makeAbsolutePath(value);
              if (!openFiles[path10]) {
                await FileSystem2.clearAPathFor(value, { overwrite: true });
                openFiles[path10] = await Deno.open(value, { write: true, truncate: true, create: true });
              }
              value = openFiles[path10];
            }
            if (value instanceof Deno.File) {
              value.truncate();
            } else {
              throw Error(`
When running command:
    ${JSON.stringify(runArg.cmd)}
it was given one of:
    Stdout(Overwrite(arg))
    Stdin(Overwrite(arg))
    Out(Overwrite(arg))
However the given arg was not a string path or a file object.
Here's what I know about the argument:${debugValueAsString(value)}

`);
            }
          } else if (symbol === appendSymbol2) {
            if (typeof value == "string") {
              const path10 = FileSystem2.makeAbsolutePath(value);
              if (!openFiles[path10]) {
                await FileSystem2.ensureIsFolder(FileSystem2.parentPath(value));
                openFiles[path10] = await Deno.open(value, { write: true, create: true });
              }
              value = openFiles[path10];
            }
            if (value instanceof Deno.File) {
              await Deno.seek(value.rid, 0, Deno.SeekMode.End);
            } else {
              throw Error(`
When running command:
    ${JSON.stringify(runArg.cmd)}
it was given one of:
    Stdout(AppendTo(arg))
    Stdin(AppendTo(arg))
    Out(AppendTo(arg))
However the given arg was not a string path or a file object.
Here's what I know about the argument:${debugValueAsString(value)}

`);
            }
          }
          arg = value;
        }
      }
      if (arg instanceof WritableStream) {
        return arg;
      } else if (isWritable2(arg)) {
        return writableStreamFromWriter(arg);
      } else if (typeof arg == "string") {
        throw Error(`
When running command:
    ${JSON.stringify(runArg.cmd)}
it was given one of:
    Stdout(${JSON.stringify(arg)})
    Stdin(${JSON.stringify(arg)})
    Out(${JSON.stringify(arg)})
if you want to have them write to a file:
    dont:    Out(${JSON.stringify(arg)})
    instead: Out(Overwrite(${JSON.stringify(arg)}))
    or:      Out(AppendTo(${JSON.stringify(arg)}))

`);
      }
    };
    const alreadyComputed = /* @__PURE__ */ new Map();
    const convertArgsToWritables = (...args2) => args2.map((eachArg) => {
      let key;
      if (eachArg instanceof Array) {
        key = JSON.stringify(eachArg.map((each2) => {
          if (typeof each2 == "symbol") {
            return each2.toString();
          } else if (each2 instanceof Deno.File) {
            if (ridToPath2[each2.id]) {
              return FileSystem2.makeAbsolutePath(ridToPath2[each2.id]);
            }
            return `Deno.File(${each2.rid})`;
          } else if (typeof each2 == "string") {
            return FileSystem2.makeAbsolutePath(each2);
          } else {
            return JSON.stringify(each2);
          }
        }));
      } else {
        key = JSON.stringify(eachArg);
      }
      if (alreadyComputed.has(key)) {
        return alreadyComputed.get(key);
      } else {
        const output2 = convertReturnStreamArg(eachArg);
        alreadyComputed.set(key, output2);
        return output2;
      }
    });
    const stdoutWritables = await Promise.all(convertArgsToWritables(...commandMetaData.stdout || []));
    const stderrWritables = await Promise.all(convertArgsToWritables(...commandMetaData.stderr || []));
    let process = {};
    try {
      process = Deno.run(runArg);
    } catch (error) {
      const rejection = new Promise((resolve15, reject) => reject(`
${error}
This was from a run() call, which was converted to Deno.run(${JSON.stringify(runArg, 0, 4)})`));
      return [rejection, rejection, rejection];
    }
    if (commandMetaData.timeout.gentlyBy) {
      let outcome = false;
      process.status().then(() => outcome = true);
      setTimeout(async () => {
        if (!outcome) {
          process.kill("SIGINT");
          setTimeout(() => {
            if (!outcome) {
              process.kill("SIGKILL");
            }
          }, commandMetaData.timeout.waitBeforeUsingForce);
        }
      }, commandMetaData.timeout.gentlyBy);
    }
    let hasReturnString = false;
    let stdoutAndStderrDoneWritingPromise = { then(func2) {
      func2();
    } };
    const returnStringChunks = [];
    if (runArg.stdout == "piped" || runArg.stderr == "piped") {
      stdoutAndStderrDoneWritingPromise = deferredPromise();
      let stdoutIsDone = false;
      let stderrIsDone = false;
      const writableToWriter = /* @__PURE__ */ new Map();
      for (const eachWritable of stdoutWritables.concat(stderrWritables)) {
        if (!writableToWriter.has(eachWritable)) {
          if (eachWritable == returnAsString2) {
            hasReturnString = true;
            const decoder3 = new TextDecoder();
            writableToWriter.set(eachWritable, {
              write(value) {
                const stringValue = decoder3.decode(value);
                returnStringChunks.push(stringValue);
              }
            });
          } else {
            writableToWriter.set(eachWritable, eachWritable.getWriter());
          }
        }
      }
      const stdoutWriters = stdoutWritables.map((each2) => writableToWriter.get(each2));
      const stderrWriters = stderrWritables.map((each2) => writableToWriter.get(each2));
      if (runArg.stdout != "piped") {
        stdoutIsDone = true;
      } else {
        const reader = readableStreamFromReader(process.stdout).getReader();
        setTimeout(async () => {
          while (1) {
            const { value, done } = await reader.read();
            if (done) {
              stdoutIsDone = true;
              if (stderrIsDone) {
                stdoutAndStderrDoneWritingPromise.resolve();
              }
              break;
            }
            for (const each2 of stdoutWriters) {
              each2.write(value);
            }
          }
        });
      }
      if (runArg.stderr != "piped") {
        stderrIsDone = true;
      } else {
        const reader = readableStreamFromReader(process.stderr).getReader();
        setTimeout(async () => {
          while (1) {
            const { value, done } = await reader.read();
            if (done) {
              stderrIsDone = true;
              if (stdoutIsDone) {
                stdoutAndStderrDoneWritingPromise.resolve();
              }
              break;
            }
            for (const each2 of stderrWriters) {
              each2.write(value);
            }
          }
        });
      }
    }
    if (runArg.stdin == "piped") {
      if (stdinWriter instanceof Uint8Array) {
        process.stdin.write(stdinWriter).then(() => process.stdin.close());
      } else if (stdinWriter instanceof ReadableStream) {
        writableStreamFromWriter(process.stdin);
      }
    }
    let statusPromise2 = process.status();
    statusPromise2.then(({ code: code2, success }) => {
      syncStatus.done = true;
      syncStatus.exitCode = code2;
      syncStatus.success = success;
    });
    let processFinishedValue;
    if (hasReturnString) {
      processFinishedValue = statusPromise2.then(() => stdoutAndStderrDoneWritingPromise.then(() => returnStringChunks.join("")));
    } else {
      processFinishedValue = statusPromise2.then(({ success, code: code2 }) => {
        return {
          isDone: true,
          status: syncStatus,
          sendSignal: () => 0,
          success,
          exitCode: code2,
          pid: process.pid,
          rid: process.rid,
          kill: () => 0,
          close: process.close,
          stdin: runArg.stdin == "null" ? null : process.stdin || Deno.stdin,
          stdout: process.stdout || Deno.stdout,
          stderr: process.stderr || Deno.stderr
        };
      });
    }
    const returnValueOrError = new Promise(async (resolve15, reject) => {
      if (commandMetaData.throwIfFails) {
        const status = await statusPromise2;
        if (!status.success) {
          reject(await processFinishedValue);
          return;
        }
      }
      resolve15(processFinishedValue);
    });
    return [process, returnValueOrError, statusPromise2];
  };
  const asyncPartPromise = asyncPart();
  const processPromise = asyncPartPromise.then(([process, processFinishedValue, statusPromise2]) => process).catch((err) => err);
  const statusPromise = asyncPartPromise.then(([process, processFinishedValue, statusPromise2]) => statusPromise2).catch((err) => err);
  const returnValuePromise = asyncPartPromise.then(([process, processFinishedValue, statusPromise2]) => processFinishedValue);
  Object.defineProperties(returnValuePromise, {
    status: { get() {
      return syncStatus;
    } },
    isDone: { get() {
      return syncStatus.done;
    } },
    sendSignal: { get() {
      return (...args2) => processPromise.then((process) => process.kill(...args2)).catch((error) => error);
    } },
    kill: { get() {
      return (signal = "SIGKILL") => processPromise.then((process) => process.kill(signal));
    } },
    close: { get() {
      return (...args2) => processPromise.then((process) => process.close(...args2));
    } },
    success: { get() {
      return statusPromise.then(({ success }) => success);
    } },
    exitCode: { get() {
      return statusPromise.then(({ code: code2 }) => code2);
    } },
    outcome: { get() {
      return statusPromise;
    } },
    rid: { get() {
      return processPromise.then(({ rid }) => rid);
    } },
    pid: { get() {
      return processPromise.then(({ pid }) => pid);
    } },
    stdout: { get() {
      return processPromise.then(({ stdout }) => stdout || Deno.stdout);
    } },
    stderr: { get() {
      return processPromise.then(({ stderr }) => stderr || Deno.stderr);
    } },
    stdin: {
      get() {
        const realStdinPromise = processPromise.then(({ stdin }) => stdin || Deno.stdin);
        return {
          send(rawDataOrString) {
            if (typeof rawDataOrString == "string") {
              return { ...realStdinPromise.then((realStdin) => realStdin.write(new TextEncoder().encode(rawDataOrString))), ...this };
            } else {
              return { ...realStdinPromise.then((realStdin) => realStdin.write(rawDataOrString)), ...this };
            }
          },
          close(...args2) {
            return realStdinPromise.then((realStdin) => (realStdin.close(...args2), this));
          }
        };
      }
    }
  });
  return returnValuePromise;
};
run3.Timeout = Timeout2;
run3.Env = Env2;
run3.Cwd = Cwd2;
run3.Stdin = Stdin2;
run3.Stdout = Stdout2;
run3.Stderr = Stderr2;
run3.Out = Out2;
run3.Overwrite = Overwrite2;
run3.AppendTo = AppendTo2;
run3.zipInto = zipInto2;
run3.mergeInto = mergeInto2;
run3.returnAsString = returnAsString2;

// tools/misc.js
var versionToList = (version) => `${version}`.split(".").map((each2) => each2.split(/(?<=\d)(?=\D)|(?<=\D)(?=\d)/)).flat(1).map((each2) => each2.match(/^\d+$/) ? each2 - 0 : each2);
var versionSort = ({ array, elementToVersion }) => {
  return [...array].sort(
    (a, b) => {
      for (let [numberForA, numberForB] of zip2(versionToList(elementToVersion(a)), versionToList(elementToVersion(b)))) {
        if (numberForA != numberForB) {
          if (typeof numberForB == "number" && typeof numberForB == "number") {
            return numberForB - numberForA;
          } else if (typeof numberForB == "number") {
            return numberForB;
          } else if (typeof numberForA == "number") {
            return -numberForA;
          } else {
            return `${numberForB}`.localeCompare(numberForA);
          }
        }
      }
      return 0;
    }
  );
};

// tools/search_tools.js
var rikudoeSage = {
  async searchBasePackage(query) {
    try {
      return [];
    } catch (error) {
      throw Error(`Unable to connect to history.nix-packages.com:
    ${error}`);
    }
  },
  async getVersionsFor(attrPath) {
    const url = `https://api.history.nix-packages.com/packages/${encodeURIComponent(attrPath)}`;
    let results;
    try {
      results = await fetch(url).then((result2) => result2.json());
    } catch (error) {
      return [];
    }
    return results.map(({ name, revision, version }) => ({ version, hash: revision, attrPath: name }));
  }
};
var devbox = {
  async searchBasePackage(query) {
    try {
      const url = `https://www.nixhub.io/search?q=${encodeURIComponent(query)}`;
      const htmlResult = await fetch(url).then((result2) => result2.text());
      var document2 = new DOMParser().parseFromString(
        htmlResult,
        "text/html"
      );
      const list = document2.querySelector("ul");
      if (!list) {
        throw Error(`Looks like www.nixhub.io has updated, meaning this CLI tool needs to be updated (issue finding base names $("ul"))`);
      }
      const searchResults = [...list.querySelectorAll("li")];
      return searchResults.map((each2) => {
        const dataDiv = each2.querySelector("div");
        const output2 = {
          attrPath: each2.querySelector("h3").innerText
        };
        if (dataDiv) {
          let key;
          for (const each3 of [...dataDiv.children]) {
            if (each3.tagName == "DT") {
              key = each3.innerText.trim();
            }
            if (key && each3.tagName == "DD") {
              output2[key] = each3.innerText;
            }
          }
        }
        return output2;
      });
    } catch (error) {
      throw Error(`Unable to connect to nixhub.io, ${error}`);
    }
  },
  async getVersionsFor(attrPath) {
    const url = `https://www.nixhub.io/packages/${encodeURIComponent(attrPath)}`;
    let htmlResult;
    try {
      htmlResult = await fetch(url).then((result2) => result2.text());
    } catch (error) {
      return [];
    }
    const document2 = new DOMParser().parseFromString(
      htmlResult,
      "text/html"
    );
    const list = document2.querySelector("main ul");
    if (!list) {
      throw Error(`Looks like www.nixhub.io has updated, meaning this CLI tool needs to be updated (issue finding list $("main ul"))`);
    }
    const versionElements = [...list.querySelectorAll("li")];
    const versionResults = [];
    const prefixForVersionString = "Version ";
    for (const eachVersion of versionElements) {
      const divs = [...eachVersion.querySelectorAll("div")];
      const versionStringDiv = divs.filter((each2) => each2.innerText.startsWith(prefixForVersionString));
      if (!versionStringDiv) {
        throw Error(`Looks like www.nixhub.io has updated, meaning this CLI tool needs to be updated (issue finding version string div)`);
      }
      const version = versionStringDiv[0].innerText.slice(prefixForVersionString.length);
      const referenceInfoOuterDiv = divs.filter((each2) => [...each2.children].some((subChild) => subChild.innerText.match(/Nixpkgs Reference/)))[0];
      if (!referenceInfoOuterDiv) {
        throw Error(`Looks like www.nixhub.io has updated, meaning this CLI tool needs to be updated (issue finding version info within list element)`);
      }
      const referenceInfoInnerDiv = [...referenceInfoOuterDiv.querySelectorAll("div")].filter((each2) => each2.innerText.match("#"))[0];
      if (!referenceInfoInnerDiv) {
        throw Error(`Looks like www.nixhub.io has updated, meaning this CLI tool needs to be updated (issue extracting inner referece hash div)`);
      }
      const hashAndAttrName = referenceInfoInnerDiv.innerText.replace(/^\s*Nixpkgs Reference\s*/, "").split(/ *# */);
      if (!(hashAndAttrName.length == 2)) {
        throw Error(`Looks like www.nixhub.io has updated, meaning this CLI tool needs to be updated (issue extracting referece hash from referece hash div)`);
      }
      versionResults.push({
        version,
        hash: hashAndAttrName[0],
        attrPath: hashAndAttrName[1]
      });
    }
    return versionResults;
  }
};
var lazamar = {
  searchBasePackage(query) {
    return [];
  },
  async getVersionsFor(attrPath) {
    let query = attrPath.split(".").slice(-1)[0];
    const url = `https://lazamar.co.uk/nix-versions/?channel=nixpkgs-unstable&package=${encodeURIComponent(query)}`;
    let htmlResult;
    try {
      htmlResult = await fetch(url).then((result2) => result2.text());
    } catch (error) {
      return [];
    }
    const document2 = new DOMParser().parseFromString(
      htmlResult,
      "text/html"
    );
    const table = document2.querySelector(".pure-table-bordered.pure-table tbody");
    const dataPerAttributePath = {};
    for (let each2 of [...table.children]) {
      let [packageNameNode, versionNode, revisionNode, dateNode] = [...each2.children];
      const anchor = revisionNode.querySelector("a");
      const params = new URLSearchParams(anchor.getAttribute("href"));
      const attrPath2 = params.get("keyName");
      if (attrPath2) {
        dataPerAttributePath[attrPath2] = dataPerAttributePath[attrPath2] || { attrPath: attrPath2, versions: [] };
        dataPerAttributePath[attrPath2].versions.push({
          version: params.get("version"),
          hash: params.get("revision"),
          attrPath: attrPath2,
          date: dateNode.innerText
        });
      }
    }
    return dataPerAttributePath[attrPath]?.versions || [];
  }
};
var sources = {
  "lazamar.co.uk": lazamar,
  "history.nix-packages.com": rikudoeSage,
  "nixhub.io": devbox
};
async function search(query) {
  let basePackages = [];
  for (const [name, sourceTools] of Object.entries(sources)) {
    try {
      basePackages = basePackages.concat(await sourceTools.searchBasePackage(query));
    } catch (error) {
      console.warn(`Failed getting packages from one of the sources (${name}):
    ${error}
`);
    }
  }
  for (const value of basePackages) {
    value.versionsPromise = new Promise(async (resolve15, reject) => {
      let versions = [];
      for (const [name, sourceTools] of Object.entries(sources)) {
        try {
          versions = versions.concat(await sourceTools.getVersionsFor(value.attrPath));
        } catch (error) {
          console.warn(`Failed getting version info from one of the sources (${name}):
    ${error}
`);
          resolve15(null);
        }
      }
      const alreadySeen = /* @__PURE__ */ new Set();
      versions = versions.filter((each2) => {
        if (alreadySeen.has(each2.version)) {
          return false;
        }
        alreadySeen.add(each2.version);
        return true;
      });
      versions = versionSort({ array: versions, elementToVersion: (each2) => each2.version });
      resolve15(versions);
    });
  }
  return basePackages;
}
var determinateSystems = {
  async searchBasePackage(query) {
    const output2 = await fetch("https://b4lflfxxy4-dsn.algolia.net/1/indexes/*/queries?x-algolia-agent=Algolia%20for%20JavaScript%20(4.20.0)%3B%20Browser%3B%20instantsearch.js%20(4.58.0)%3B%20react%20(18.2.0)%3B%20react-instantsearch%20(7.2.0)%3B%20react-instantsearch-core%20(7.2.0)%3B%20JS%20Helper%20(3.14.2)", {
      "credentials": "omit",
      "headers": {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/119.0",
        "Accept": "*/*",
        "Accept-Language": "en-CA,en-US;q=0.7,en;q=0.3",
        "x-algolia-api-key": "1673b56771c2f826310f4bdf25a43c42",
        "x-algolia-application-id": "B4LFLFXXY4",
        "content-type": "application/x-www-form-urlencoded",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "cross-site"
      },
      "referrer": "https://flakehub.com/",
      "body": `{"requests":[{"indexName":"flakes","params":"clickAnalytics=true&facets=%5B%5D&highlightPostTag=__%2Fais-highlight__&highlightPreTag=__ais-highlight__&hitsPerPage=100&query=${JSON.stringify(encodeURIComponent(query)).slice(1, -1)}l&tagFilters="}]}`,
      "method": "POST",
      "mode": "cors"
    }).then((result2) => result2.json());
    return output2.results[0]?.hits || [];
  },
  async getVersionsFor(flakePackage) {
    const { org, project, description, labels } = flakePackage;
    const url = `https://flakehub.com/f/${org}/${project}`;
    let versionInfo;
    try {
      versionInfo = await fetch(`${url}/releases`).then((result2) => result2.json());
    } catch (error) {
      return [];
    }
    const extractOutputs = async (version) => {
      try {
        const info = await run3`nix flake show --json --all-systems ${`https://api.flakehub.com/f/${org}/${project}/${version}.tar.gz`} ${Stdout2(returnAsString2)} ${Stderr2(null)}`;
        return [...new Set(Object.values(JSON.parse(info).packages).map((each2) => Object.keys(each2)).flat(1))];
      } catch (error) {
        return [];
      }
    };
    await Promise.all(
      versionInfo.map(
        (each2) => extractOutputs(each2.simplified_version).then(
          (result2) => {
            each2.packageOutputs = result2;
          }
        )
      )
    );
    return versionInfo;
  },
  async search(query) {
    const results = await this.searchBasePackage(query);
    for (const each2 of results) {
      each2.versionsPromise = this.getVersionsFor(each2);
    }
    return results;
  }
};

// main.js
var posixShellEscape = (string2) => "'" + string2.replace(/'/g, `'"'"'`) + "'";
var clearScreen2 = () => console.log("\x1B[2J");
var escapeNixString = (string2) => {
  return `"${string2.replace(/\$\{|[\\"]/g, "\\$&").replace(/\u0000/g, "\\0")}"`;
};
var listNixPackages = async () => {
  const packageList = await run2`nix profile list ${Stdout(returnAsString)}`;
  return parse12(
    clearAnsiStylesFrom(
      indent3({ string: packageList, by: "    " }).replace(/^    Index:/gm, "-\n    Index:")
    )
  );
};
var cachePath = `${FileSystem.home}/.cache/nvs/has_flakes_enabled.check`;
var hasFlakesEnabledString = FileSystem.sync.read(cachePath);
if (hasFlakesEnabledString == null) {
  console.log(`
Let me check real quick if you have flakes enabled`);
  console.log(`(this will only run once)`);
  try {
    const result2 = await run2`nix profile list ${Stdout(returnAsString)} ${Stderr(null)}`;
    hasFlakesEnabledString = !!result2.match(/^Flake attribute: /m);
  } catch (error) {
    hasFlakesEnabledString = false;
  }
  hasFlakesEnabledString = JSON.stringify(hasFlakesEnabledString);
  console.log(`
`);
  FileSystem.sync.write({
    data: hasFlakesEnabledString,
    path: cachePath
  });
}
var hasFlakesEnabled = JSON.parse(hasFlakesEnabledString);
var command = await new Command().name("Nix Version Search").version("1.0.0").description(`Find/install exact versions of nix packages

Examples:
    nvs --install python@3
    nvs python@3
    nvs --shell python@3`).globalOption("--install", "Install into the system").globalOption("--dry-install", "Show the nix command for installing into the system").globalOption("--shell", "Show the shell command info").globalOption("--force", "Uninstall any packages that conflict with an install").globalOption("--json", "Return json output of the results (force enables non-interactive)").globalOption("--explain", "Include beginner-friendly explanations with the output").arguments("[...args:string]").action(async function(options, ...args) {
  args = args.concat(this.getLiteralArgs());
  if (args.length == 0) {
    return command.parse(["--help"].concat(Deno.args));
  }
  if (args[0].startsWith("https://") && options.install) {
    if (hasFlakesEnabled) {
      var { success } = await run2`nix profile install ${args[0]}`;
      Deno.exit(success);
    } else {
      var { success } = await run2`nix-env -i -f ${args[0]}`;
      await run2`nix profile install ${args[0]}`;
      Deno.exit(success);
    }
  }
  var [name, versionPrefix] = args[0].split("@");
  versionPrefix = versionPrefix || "";
  const results = await search(name);
  let flakeResults = [];
  if (hasFlakesEnabled) {
    flakeResults = await determinateSystems.search(name);
  }
  const choiceOptions = {};
  for (const each2 of flakeResults) {
    choiceOptions[each2.project + ` \u2744\uFE0F ${each2.org}`] = each2;
  }
  for (const each2 of results) {
    let oldVersionsPromise = choiceOptions[each2.attrPath]?.versionsPromise;
    choiceOptions[each2.attrPath] = { ...choiceOptions[each2.attrPath], ...each2 };
    if (oldVersionsPromise) {
      choiceOptions[each2.attrPath].versionsPromise = new Promise(async (resolve15, reject) => {
        try {
          resolve15(
            (await oldVersionsPromise || []).concat(await each2.versionsPromise)
          );
        } catch (error) {
          reject(error);
        }
      });
    }
  }
  for (const [key, value] of Object.entries(choiceOptions)) {
    value.versionsPromise.then((versions) => {
      if (versions.filter((each2) => each2.version.startsWith(versionPrefix)).length == 0) {
        delete choiceOptions[key];
      }
    });
  }
  if (options.json) {
    await Promise.all(
      Object.values(choiceOptions).map(
        (eachPackage) => eachPackage.versionsPromise.then((versions) => {
          eachPackage.versions = (eachPackage.versions || []).concat(
            versions.filter((each2) => each2.version.startsWith(versionPrefix))
          );
          delete eachPackage.versionsPromise;
          return eachPackage;
        })
      )
    );
    console.log(JSON.stringify(choiceOptions));
    return;
  }
  while (1) {
    const optionDescriptions = Object.values(choiceOptions).map((each2) => (each2.Description || each2.description || "").replace(/\n/g, " "));
    const packageInfo = await selectOne({
      message: "Which Package [type OR press enter OR use arrow keys]",
      showList: true,
      showInfo: false,
      options: choiceOptions,
      optionDescriptions
    });
    if (!packageInfo) {
      console.log(red2`Sorry, I checked just now`);
      console.log(red2`it looks like that package doesn't have any versions matching ${JSON.stringify(versionPrefix)}\n`);
      continue;
    }
    const versionOptions = (await packageInfo?.versionsPromise || []).filter((each2) => each2.version.startsWith(versionPrefix));
    if (versionOptions.length == 0) {
      console.log(red2`Sorry, I checked just now`);
      console.log(red2`it looks like ${cyan2(packageInfo.attrPath)} doesn't have any versions matching ${JSON.stringify(versionPrefix)}\n`);
      delete choiceOptions[packageInfo.attrPath];
      continue;
    }
    const version = await selectOne({
      message: "Pick a version",
      showList: true,
      showInfo: false,
      autocompleteOnSubmit: false,
      options: versionOptions.map((each2) => each2.version)
    });
    const viableVersions = versionOptions.filter((each2) => each2.version.startsWith(version));
    if (viableVersions.length == 0) {
      throw Error(`Sorry I don't see that version`);
    }
    const pureVersions = viableVersions.filter((each2) => each2.version.match(/^[\.0-9]+$/));
    let versionInfo;
    if (pureVersions.length != 0) {
      versionInfo = versionSort({ array: pureVersions, elementToVersion: (each2) => each2.version })[0];
    } else {
      versionInfo = versionSort({ array: viableVersions, elementToVersion: (each2) => each2.version })[0];
    }
    let didSomething = false;
    let humanPackageSummary;
    let url;
    let packageName;
    if (hasFlakesEnabled) {
      if (packageInfo.project) {
        packageName = packageInfo.project;
        humanPackageSummary = `${green2(packageInfo.project)}${cyan2`@${versionInfo.version}`}${dim2` from `}${yellow2(packageInfo.org)}`;
        url = `https://flakehub.com/f/${packageInfo.org}/${packageInfo.project}/${versionInfo.simplified_version}.tar.gz`;
      } else {
        packageName = packageInfo.attrPath;
        humanPackageSummary = `${green2(packageInfo.attrPath)}${cyan2`@${versionInfo.version}`}${dim2` from `}${yellow2("nixpkgs")}`;
        url = `https://github.com/NixOS/nixpkgs/archive/${versionInfo.hash}.tar.gz#${versionInfo.attrPath}`;
      }
    }
    if (options.install) {
      didSomething = true;
      if (hasFlakesEnabled) {
        console.log(`Okay installing ${humanPackageSummary}`);
        let noProgressLoopDetection;
        install:
          while (1) {
            var stderrOutput = "";
            var listener = {
              async write(chunk) {
                stderrOutput += new TextDecoder().decode(chunk);
              }
            };
            await run2`nix profile install ${url} ${Stderr(Deno.stderr, listener)}`;
            if (noProgressLoopDetection == stderrOutput) {
              console.error(`
Sorry, it looks like I was unable to install the package`);
              Deno.exit(7);
            }
            noProgressLoopDetection = stderrOutput;
            const conflictMatch = stderrOutput.match(/error: An existing package already provides the following file:(?:\w|\W)+?(?<existing>\/nix\/store\/.+)(?:\w|\W)+?This is the conflicting file from the new package:(?:\w|\W)+?(?<newPackage>\/nix\/store\/.+)(?:\w|\W)+?To remove the existing package:(?:\w|\W)+?(?<removeExisting>nix profile remove.+)(?:\w|\W)+?To prioritise the new package:(?:\w|\W)+?(?<prioritiseNew>nix profile install.+)(?:\w|\W)+?To prioritise the existing package:(?:\w|\W)+?(?<prioritiseExisting>nix profile install.+)/);
            if (conflictMatch) {
              const { existing, newPackage, removeExisting, prioritiseNew, prioritiseExisting } = conflictMatch.groups;
              const [folders, name2, ext] = FileSystem.pathPieces(existing);
              const simpleName = cyan2(folders.slice(4).join("/")) + cyan2("/") + green2(name2 + ext);
              clearScreen2();
              const packages = await listNixPackages();
              const removeExistingPackage = async () => {
                try {
                  if (removeExisting) {
                    const url2 = (removeExisting.slice("nix profile remove ".length).match(/(.+?)#/) || "")[1];
                    const uninstallList = packages.filter((each2) => each2["Original flake URL"] == url2 || each2["Store paths"] == existing);
                    for (const each2 of uninstallList) {
                      if (each2.Index != null) {
                        try {
                          await run2`nix profile remove ${`${each2.Index}`.trim()}`;
                        } catch (error) {
                        }
                      }
                    }
                  }
                } catch (error) {
                }
              };
              if (options.force) {
                await removeExistingPackage();
                continue install;
              } else {
                console.log(bold2`Looks like there was a conflict:`);
                console.log(`    The install adds: ${simpleName}`);
                console.log(`    Which already exists from:
        ${yellow2((removeExisting || "").trim().slice("nix profile remove ".length) || existing)}`);
                console.log(``);
                const uninstallOption = "uninstall: remove the old package, install the one you just picked";
                const newHigherPriorityOption = "higher: install the one you just picked with a higher priority";
                const installAsLowerOption = "lower: install one you just picked, but have it be lower priority";
                const choice = await selectOne({
                  message: "Choose an action:",
                  showList: true,
                  showInfo: false,
                  options: [
                    uninstallOption,
                    ...prioritiseNew ? [newHigherPriorityOption] : [],
                    installAsLowerOption,
                    "cancel"
                  ]
                });
                if (choice == "cancel") {
                  Deno.exit(0);
                  return;
                } else if (choice == newHigherPriorityOption) {
                  await run2(prioritiseNew.trim().split(/\s/g));
                } else if (choice == installAsLowerOption) {
                  await run2(prioritiseExisting.trim().split(/\s/g));
                } else if (choice == uninstallOption) {
                  await removeExistingPackage();
                }
                continue install;
              }
            } else {
              console.log(`
 - \u2705 ${humanPackageSummary} should now be installed`);
            }
            break;
          }
      } else {
        await run2`nix-env -iA ${versionInfo.attrPath} -f {https://github.com/NixOS/nixpkgs/archive/${versionInfo.hash}.tar.gz}`;
        console.log(`
 - \u2705 ${versionInfo.attrPath}@${versionInfo.version} should now be installed`);
      }
    }
    if (options.dryInstall) {
      didSomething = true;
      if (hasFlakesEnabled) {
        console.log(`Okay run the following to get ${humanPackageSummary}`);
        console.log(``);
        console.log(cyan2`nix profile install ${posixShellEscape(url)}`);
        console.log(``);
      } else {
        console.log(`Okay run the following to get version ${yellow2(versionInfo.version)} of ${yellow2(packageInfo.attrPath)}`);
        console.log(``);
        console.log(cyan2`nix-env -iA ${posixShellEscape(versionInfo.attrPath)} -f https://github.com/NixOS/nixpkgs/archive/${versionInfo.hash}.tar.gz`);
        console.log(``);
      }
    }
    if (options.shell) {
      didSomething = true;
      if (hasFlakesEnabled) {
        console.log(`Okay, run the following to a shell that has ${humanPackageSummary}`);
        console.log(``);
        console.log(cyan2`nix develop ${posixShellEscape(url)}`);
        console.log(``);
      } else {
        console.log(`Okay, run the following to a shell that has version ${yellow2(versionInfo.version)} of ${yellow2(packageInfo.attrPath)}`);
        console.log(``);
        console.log(cyan2`nix-shell -p ${posixShellEscape(versionInfo.attrPath)} -I https://github.com/NixOS/nixpkgs/archive/${versionInfo.hash}.tar.gz`);
        console.log(``);
      }
    }
    if (!didSomething) {
      if (hasFlakesEnabled) {
        const name2 = toCamelCase(packageName);
        const nonDefaultPackages = (versionInfo?.packageOutputs || []).filter((each2) => each2 != "default");
        if (!options.explain) {
          console.log(`Okay use the following to get ${humanPackageSummary}`);
          console.log(``);
          console.log(cyan2`    ${name2}.url = ${escapeNixString(url)}`);
          if (nonDefaultPackages.length > 0) {
            console.log(``);
            console.log(dim2`Note: you may need to use one of the following to get what you want:`);
            console.log(nonDefaultPackages.map((each2) => dim2.lightRed`    ${name2}.${each2}`).join("\n"));
          }
          console.log(``);
          console.log(dim2`Run again with ${yellow2`--explain`} if you're not sure how to use this^`);
        } else {
          console.log(`If you have a ${yellow2`flake.nix`} file it might look like:
`);
          console.log(dim2`   {`);
          console.log(dim2`     description = "something";`);
          console.log(dim2`     inputs = {`);
          console.log(dim2`       nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";`);
          console.log(dim2`     };`);
          console.log(dim2`     outputs = { self, nixpkgs, }:`);
          console.log(dim2`       let`);
          console.log(dim2`          somethingSomething = 10;`);
          console.log(dim2`       in`);
          console.log(dim2`         {`);
          console.log(dim2`         }`);
          console.log(dim2`   }`);
          console.log(dim2``);
          prompt(cyan2`[press enter to continue]`);
          console.log(``);
          console.log(`To make it work with ${humanPackageSummary}`);
          console.log(`You would change it to be:
`);
          console.log(dim2`   {`);
          console.log(dim2`     description = "something";`);
          console.log(dim2`     inputs = {`);
          console.log(dim2`       nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";`);
          console.log(green2`       ${name2}.url = ${escapeNixString(url)};`);
          console.log(dim2`     };`);
          console.log(`     outputs = { self, nixpkgs, ${green2(name2)} }:`);
          console.log(dim2`       let`);
          console.log(dim2`          somethingSomething = 10;`);
          if (nonDefaultPackages.length > 0) {
            console.log(dim2.cyan`          # Note: you may need to use one of the following to get what you want:`);
            console.log(nonDefaultPackages.map((each2) => dim2.cyan`          #    ${name2}.${each2}`).join("\n"));
          }
          console.log(dim2`       in`);
          console.log(dim2`         {`);
          console.log(dim2`         }`);
          console.log(dim2`   }`);
          console.log(``);
        }
      } else {
        if (!options.explain) {
          console.log(`Here's what to include in your nix code:`);
          console.log(``);
          console.log(cyan2`    yourVarName = (`);
          console.log(cyan2`      (import (builtins.fetchTarball {`);
          console.log(cyan2`          url = "https://github.com/NixOS/nixpkgs/archive/${versionInfo.hash}.tar.gz";`);
          console.log(cyan2`      }) {}).${versionInfo.attrPath}`);
          console.log(cyan2`    );`);
          console.log(``);
          console.log(dim2`Run again with ${yellow2`--explain`} if you're not sure how to use this^`);
        } else {
          console.log(`If you have a ${yellow2`shell.nix`} or ${yellow2`default.nix`} file it might look like:
`);
          console.log(dim2`     { pkgs ? import <nixpkgs> {} }:`);
          console.log(dim2`     let`);
          console.log(dim2`       python = pkgs.python;`);
          console.log(dim2`     in`);
          console.log(dim2`       pkgs.mkShell {`);
          console.log(dim2`         buildInputs = [`);
          console.log(dim2`           python`);
          console.log(dim2`         ];`);
          console.log(dim2`         nativeBuildInputs = [`);
          console.log(dim2`         ];`);
          console.log(dim2`         shellHook = ''`);
          console.log(dim2`             # blah blah blah`);
          console.log(dim2`         '';`);
          console.log(dim2`       }`);
          console.log(dim2``);
          prompt(cyan2`[press enter to continue]`);
          console.log(``);
          console.log(`To make it work with version ${yellow2(versionInfo.version)} of ${yellow2(packageInfo.attrPath)}`);
          console.log(`You would change it to be:
`);
          console.log(dim2`     { pkgs ? import <nixpkgs> {} }:`);
          console.log(dim2`     let`);
          console.log(dim2`       python = pkgs.python;`);
          console.log(green2`       YOUR_THING = (`);
          console.log(green2`         (import (builtins.fetchTarball {`);
          console.log(green2`            url = "https://github.com/NixOS/nixpkgs/archive/${versionInfo.hash}.tar.gz";`);
          console.log(green2`         }) {}).${versionInfo.attrPath}`);
          console.log(green2`       );`);
          console.log(dim2`     in`);
          console.log(dim2`       pkgs.mkShell {`);
          console.log(dim2`         buildInputs = [`);
          console.log(dim2`           python`);
          console.log(green2`           YOUR_THING`);
          console.log(dim2`         ];`);
          console.log(dim2`         nativeBuildInputs = [`);
          console.log(dim2`         ];`);
          console.log(dim2`         shellHook = ''`);
          console.log(dim2`             # blah blah blah`);
          console.log(dim2`         '';`);
          console.log(dim2`       }`);
        }
      }
    }
    break;
  }
});
await command.parse(Deno.args);
/*!
 * Sizzle CSS Selector Engine v2.3.7-pre
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2022-04-02
 *
 * git commit hash for Deno DOM: ede0e97563c8473b8cfa4045c7c2cd6129ecc1aa
 */
